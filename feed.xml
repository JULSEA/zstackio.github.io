<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ZStack</title>
    <description>ZStack is open source IaaS software managing resources of compute, storage, networking throughout a datacenter all by APIs.</description>
    <link>http://zstack.org/</link>
    <atom:link href="http://zstack.org/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 25 Apr 2016 13:44:30 +0800</pubDate>
    <lastBuildDate>Mon, 25 Apr 2016 13:44:30 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>ZStack v1.1.2 发布</title>
        <description>&lt;h2&gt;ZStack 1.1.2 版本今天发布&lt;/h2&gt;

&lt;p&gt;ZStack v1.1.2 修复了部分 zstack-ctl 的功能,以便搭建ZStack HA的集群.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#zstackctl&quot;&gt;使用zstack-ctl修改管理节点IP地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#install&quot;&gt;一键安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#offlineinstall&quot;&gt;离线安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgrade&quot;&gt;无缝升级&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;功能提升&lt;/h2&gt;

&lt;h3 id=&quot;zstackctl&quot;&gt;1. 使用zstack-ctl修改管理节点IP地址&lt;/h3&gt;


&lt;p&gt;在之前的版本中,如果管理节点IP变更,我们需要用户手动修改 zstack.properties的文件.
从1.1 版本开始,我们提供了全新的&lt;code&gt;zstack-ctl change_ip&lt;/code&gt;来帮助用户修改管理节点,
数据库,消息总线的IP地址. 例如:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@172-20-11-73 ~]# zstack-ctl change_ip --ip 172.20.11.73
Update cloudbus server ip 172.20.11.73 in /usr/local/zstack/apache-tomcat/webapps/zstack/WEB-INF/classes/zstack.properties 
Update mysql new url jdbc:mysql://172.20.11.73:3306 in /usr/local/zstack/apache-tomcat/webapps/zstack/WEB-INF/classes/zstack.properties 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果数据库,消息总线使用了不同的IP地址,我们也可以使用该命令进行修改.具体的参数细节,请添加-h 参数获取:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@172-20-11-73 ~]# zstack-ctl change_ip -h
usage: zstackctl change_ip [-h] --ip IP [--kairosdb_ip KAIROSDB_IP]
                           [--cassandra_rpc_address CASSANDRA_RPC_ADDRESS]
                           [--cassandra_listen_address CASSANDRA_LISTEN_ADDRESS]
                           [--cloudbus_server_ip CLOUDBUS_SERVER_IP]
                           [--mysql_ip MYSQL_IP]

optional arguments:
  -h, --help            show this help message and exit
  --ip IP               The new IP address of management node.This operation
                        will update the new ip address to zstack, kairosdb and
                        cassandra config file
  --kairosdb_ip KAIROSDB_IP
                        The new IP address of kairosdb, default will use value
                        from --ip
  --cassandra_rpc_address CASSANDRA_RPC_ADDRESS
                        The new IP address of cassandra_rpc_address, default
                        will use value from --ip
  --cassandra_listen_address CASSANDRA_LISTEN_ADDRESS
                        The new IP address of cassandra_listen_address,
                        default will use value from --ip
  --cloudbus_server_ip CLOUDBUS_SERVER_IP
                        The new IP address of CloudBus.serverIp.0, default
                        will use value from --ip
  --mysql_ip MYSQL_IP   The new IP address of DB.url, default will use value
                        from --ip
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;install&quot;&gt; 2. 安装 &lt;/h3&gt;


&lt;p&gt;你可以通过下面方式安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.1/1.1.2/zstack-installer-1.1.2.bin -O zstack-installer-1.1.2.bin
    bash zstack-installer-1.1.2.bin -R aliyun
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;这里&lt;code&gt;-R aliyun&lt;/code&gt;参数指定使用阿里云的源进行安装，你也可以使用&lt;code&gt;-R 163&lt;/code&gt;使用网易的源。我们推荐使用阿里云的源&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;offlineinstall&quot;&gt; 3. 离线安装 ZStack &lt;/h3&gt;


&lt;p&gt;针对内网用户,以及访问Internet速度较慢的用户.ZStack 1.1 提供了离线安装方式.
用户若需要离线安装ZStack,需要在目标管理节点和计算节点上安装CentOS 7.2 ZStack社区版.&lt;/p&gt;

&lt;p&gt;然后在下载了第8步中的 zstack-installer 之后,你可以通过下面方式快速完成离线安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    bash zstack-installer-1.1.2.bin -o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体的离线安装教程和CentOS 7.2 ZStack社区版请阅读: &lt;a href=&quot;./offline-install-zstack-from-custom-iso.html&quot;&gt;ZStack离线安装教程&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;upgrade&quot;&gt; 4. 升级 &lt;/h3&gt;


&lt;p&gt;一如既往的，我们支持一键无缝升级：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.1/1.1.2/zstack-installer-1.1.2.bin -O zstack-installer-1.1.2.bin
    bash zstack-installer-1.1.2.bin -u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;多节点升级中的zstack.war 可以从如下链接获取: http://download.zstack.org/releases/1.1/1.1.2/zstack.war&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/v1.1.2.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/v1.1.2.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
      <item>
        <title>ZStack v1.1.1 发布</title>
        <description>&lt;h2&gt;ZStack 1.1.1 版本今天发布&lt;/h2&gt;

&lt;p&gt;ZStack v1.1.1 修复了 v1.1.0里两个缺陷: 默认超时过短和添加Ceph存储出错. 建议用户升级.&lt;/p&gt;

&lt;h2&gt;修复缺陷&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#timeout&quot;&gt;默认超时过短&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ceph&quot;&gt;添加Ceph存储出错&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;功能提升&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#zstackctl&quot;&gt;使用zstack-ctl修改管理节点IP地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3 id=&quot;timeout&quot;&gt;1. 默认超时过短 &lt;/h3&gt;


&lt;p&gt;1.1.0 版本中默认超时存在一个缺陷,导致API的默认超时仅为300秒. 1.1.1版本已经把耗时API超时时间加长到了默认3个小时,例如下载Image的API,创建Image的API.&lt;/p&gt;

&lt;h3 id=&quot;ceph&quot;&gt;2. 添加Ceph存储出错 &lt;/h3&gt;


&lt;p&gt;1.1.0 版本中的资源添加优化程序存在一个缺陷,导致ceph存储添加可能出现错误. 1.1.1版本已经修复了该错误.&lt;/p&gt;

&lt;h3 id=&quot;zstackctl&quot;&gt;3. 使用zstack-ctl修改管理节点IP地址&lt;/h3&gt;


&lt;p&gt;在之前的版本中,如果管理节点IP变更,我们需要用户手动修改 zstack.properties的文件.
从1.1 版本开始,我们提供了全新的&lt;code&gt;zstack-ctl change_ip&lt;/code&gt;来帮助用户修改管理节点,
数据库,消息总线的IP地址. 例如:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@172-20-11-73 ~]# zstack-ctl change_ip --ip 172.20.11.73
Update cloudbus server ip 172.20.11.73 in /usr/local/zstack/apache-tomcat/webapps/zstack/WEB-INF/classes/zstack.properties 
Update mysql new url jdbc:mysql://172.20.11.73:3306 in /usr/local/zstack/apache-tomcat/webapps/zstack/WEB-INF/classes/zstack.properties 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果数据库,消息总线使用了不同的IP地址,我们也可以使用该命令进行修改.具体的参数细节,请添加-h 参数获取:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@172-20-11-73 ~]# zstack-ctl change_ip -h
usage: zstackctl change_ip [-h] --ip IP [--kairosdb_ip KAIROSDB_IP]
                           [--cassandra_rpc_address CASSANDRA_RPC_ADDRESS]
                           [--cassandra_listen_address CASSANDRA_LISTEN_ADDRESS]
                           [--cloudbus_server_ip CLOUDBUS_SERVER_IP]
                           [--mysql_ip MYSQL_IP]

optional arguments:
  -h, --help            show this help message and exit
  --ip IP               The new IP address of management node.This operation
                        will update the new ip address to zstack, kairosdb and
                        cassandra config file
  --kairosdb_ip KAIROSDB_IP
                        The new IP address of kairosdb, default will use value
                        from --ip
  --cassandra_rpc_address CASSANDRA_RPC_ADDRESS
                        The new IP address of cassandra_rpc_address, default
                        will use value from --ip
  --cassandra_listen_address CASSANDRA_LISTEN_ADDRESS
                        The new IP address of cassandra_listen_address,
                        default will use value from --ip
  --cloudbus_server_ip CLOUDBUS_SERVER_IP
                        The new IP address of CloudBus.serverIp.0, default
                        will use value from --ip
  --mysql_ip MYSQL_IP   The new IP address of DB.url, default will use value
                        from --ip
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;install&quot;&gt; 4. 安装 &lt;/h3&gt;


&lt;p&gt;你可以通过下面方式安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.1/1.1.1/zstack-installer-1.1.1.bin -O zstack-installer-1.1.1.bin
    bash zstack-installer-1.1.1.bin -R aliyun
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;这里&lt;code&gt;-R aliyun&lt;/code&gt;参数指定使用阿里云的源进行安装，你也可以使用&lt;code&gt;-R 163&lt;/code&gt;使用网易的源。我们推荐使用阿里云的源&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;install&quot;&gt; 5. 离线安装 ZStack &lt;/h3&gt;


&lt;p&gt;针对内网用户,以及访问Internet速度较慢的用户.ZStack 1.1 提供了离线安装方式.
用户若需要离线安装ZStack,需要在目标管理节点和计算节点上安装CentOS 7.2 ZStack社区版.&lt;/p&gt;

&lt;p&gt;然后在下载了第8步中的 zstack-installer 之后,你可以通过下面方式快速完成离线安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    bash zstack-installer-1.1.1.bin -o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体的离线安装教程和CentOS 7.2 ZStack社区版请阅读: &lt;a href=&quot;./offline-install-zstack-from-custom-iso.html&quot;&gt;ZStack离线安装教程&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;upgrade&quot;&gt; 6. 升级 &lt;/h3&gt;


&lt;p&gt;一如既往的，我们支持一键无缝升级：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.1/1.1.1/zstack-installer-1.1.1.bin -O zstack-installer-1.1.1.bin
    bash zstack-installer-1.1.1.bin -u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;多节点升级中的zstack.war 可以从如下链接获取: http://download.zstack.org/releases/1.1/1.1.1/zstack.war&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/v1.1.1.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/v1.1.1.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
      <item>
        <title>ZStack v1.1 发布</title>
        <description>&lt;h2&gt;ZStack 1.1 版本今天发布&lt;/h2&gt;

&lt;p&gt;ZStack 1.1 版本今天发布，欢迎大家下载试用。在该版本中，我们主要针对1.0 版本做了性能和稳定性相关的优化工作。
某些性能指标提升超过10倍,例如consoleproxy在管理节点重启后会立刻安装完毕.
此外,针对内网用户,ZStack 1.1 还提供了离线安装方法.用户只要预先安装CentOS 7.2 ZStack社区版,就可以完成ZStack离线安装.&lt;/p&gt;

&lt;h2&gt;新增功能&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ansible&quot;&gt;Ansible 优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#consoleproxy&quot;&gt;ConsoleProxy 重连API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#timeout&quot;&gt;API超时管理框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#reclaim&quot;&gt;垃圾自动回收&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zstackimage&quot;&gt;15M超小试用镜像--支持动态添加删除云盘和网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#virtualrouter&quot;&gt;更新虚拟路由（VirtualRouter）镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#migration&quot;&gt;修改CentOS7.2 无法热迁移VM的Bug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;安装升级&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#install&quot;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#offline-install&quot;&gt;离线安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgrade&quot;&gt;升级&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgradenetwork&quot;&gt;Virtual Router Provider升级到Flat Network Porvider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3 id=&quot;ansible&quot;&gt;1. Ansible优化 &lt;/h3&gt;


&lt;p&gt;在1.1版本中，我们不再使用Ansible Playbook的方式去部署agent，而是直接使用了Ansible的原生SDK，为每个agent都定制了单独的部署程序，使得部署的稳定性和效率得到了极大的提高。&lt;/p&gt;

&lt;p&gt;新的Ansible部署工具会自动检查系统依赖包的安装情况，只在有依赖包缺失的情况下才访问yum或apt源，避免了重启ZStack和升级ZStack过程中，由于访问外网抖动导致的物理机重连失败的问题，提高了系统的稳定性。新的部署工具也会检查Python依赖，解决了升级过程中consoleproxy依赖的websockify重复编译问题，升级consoleproxy的部署时间从原来的5分钟缩减到了4秒。&lt;/p&gt;

&lt;h3 id=&quot;consoleproxy&quot;&gt;2. ConsoleProxy重连API &lt;/h3&gt;


&lt;p&gt;在1.1版本中，我们加入了console proxy的重连和查询API，用户不再需要通过重启ZStack来重新部署console proxy。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt;QueryConsoleProxyAgent 
    {
        &quot;inventories&quot;: [
            {
                &quot;createDate&quot;: &quot;Mar 26, 2016 12:53:17 PM&quot;,
                &quot;description&quot;: &quot;Console proxy agent running on the management node[uuid:ae80b109e9ca4f4c81191cd2ffe43000]&quot;,
                &quot;lastOpDate&quot;: &quot;Mar 26, 2016 12:53:22 PM&quot;,
                &quot;managementIp&quot;: &quot;172.20.12.46&quot;,
                &quot;state&quot;: &quot;Enabled&quot;,
                &quot;status&quot;: &quot;Connected&quot;,
                &quot;type&quot;: &quot;ManagementServerConsoleProxy&quot;,
                &quot;uuid&quot;: &quot;ae80b109e9ca4f4c81191cd2ffe43000&quot;
            }
        ],
        &quot;success&quot;: true
    }

    &amp;gt;&amp;gt;&amp;gt;ReconnectConsoleProxyAgent 
    {
        &quot;inventory&quot;: {
            &quot;ae80b109e9ca4f4c81191cd2ffe43000&quot;: true
        },
        &quot;success&quot;: true
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;timeout&quot;&gt;3. API超时管理框架&lt;/h3&gt;


&lt;p&gt;ZStack所有功能由大量相互独立的微服务实现，服务之间使用异步消息通信，通常一个API会涉及到多个消息以及跟Agent端的HTTP调用，超时管理成为一个难题。在1.1版本中，我们加入了统一的API超时管理框架，用户无需关心底层细节。在当前版本中，用户如果需要改变默认的API超时，暂时还需要通过zstack.properties文件来改变，例如需要改变AddImage的API超时为6个小时，需要在zstack.properties添加如下配置：&lt;/p&gt;

&lt;p&gt;ApiTimeout.org.zstack.header.image.APIAddImageMsg= org.zstack.header.storage.backup.DownloadImageMsg, org.zstack.storage.backup.sftp.SftpBackupStorageCommands$DownloadCmd, org.zstack.storage.ceph.backup.CephBackupStorageBase$DownloadCmd; 6h&lt;/p&gt;

&lt;p&gt;NOTE：目前我们为所有耗时的API都设置了默认3小时的超时时间，用户在如无特殊需要，不建议通过配置的方式进行修改。我们在1.2版本会新加超时管理API，用户可以直接通过API来设定相应操作的超时时间。&lt;/p&gt;

&lt;h3 id=&quot;reclaim&quot;&gt;4. 垃圾回收机制&lt;/h3&gt;


&lt;p&gt;在1.1版本中，我们全面开启了跟虚拟机相关的垃圾回收器，可以自动回收由于网络故障、物理机故障导致的遗留资源，而不阻碍用户操作。&lt;/p&gt;

&lt;p&gt; 场景：&lt;/p&gt;

&lt;p&gt;物理机网络失联导致用户无法删除该物理机上运行的虚拟机。在早前的ZStack版本中，用户需要等待物理机网络恢复后再执行删除操作。有了垃圾回收器后，用户可以直接删除虚拟机，后台会记录该删除操作。垃圾回收器会在物理机网络恢复后自动触发，执行未完成的操作。&lt;/p&gt;

&lt;p&gt;目前已经启动的垃圾回收器包括云主机、云盘、快照，更多的垃圾回收器会在未来版本中逐一开放。&lt;/p&gt;

&lt;p&gt;ZStack的垃圾回收器非常智能，支持时间轮询和事件触发，其中事件触发支持多种关联事件。例如在前面的例子中，如果管理员在物理机网络恢复前又删除了该物理机，垃圾回收器也会被触发，清除之前提交的删除该物理机上虚拟机的任务。&lt;/p&gt;

&lt;h3 id=&quot;virtualrouter&quot;&gt;5. 新虚拟路由（Virtual Router）镜像&lt;/h3&gt;


&lt;p&gt;VirtualRouter image 更新到了 zstack-virtualrouter-1.1.0.qcow2 .我们除了更新了VirtualRouter 对应的services外，还提高了VirtualRouter的安全访问方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;修改了virtual router 默认的密码，原先的默认密码是 password。以后用户无法用密码登录Virtual Router&lt;/li&gt;
&lt;li&gt;使用了用户特别的 SSH public key。 这个public key是用户在安装ZStack的时候自动产生的，可以保证每个用户都是用不同的SSH key。 用户可以使用私有的 SSH private key从Virtual Router的管理网络登录。 该SSH private key 默认存放在管理节点： /usr/local/zstack/apache-tomcat/webapps/zstackWEB-INF/classes/ansible/rsaKeys/id_rsa&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;用户可以下载并替换原有VirtualRouter Image: http://download.zstack.org/templates/zstack-virtualrouter-1.1.0.qcow2&lt;/p&gt;

&lt;p&gt;替换原有VirtualRouter的方法是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;从UI上下载最新的VirtualRouter image，例如命名为 zstack-vr-1.1-image&lt;/li&gt;
&lt;li&gt;从镜像服务器删除老的VirtualRouter Image&lt;/li&gt;
&lt;li&gt;删除老的VirtualRouter Offering&lt;/li&gt;
&lt;li&gt;创建新的VirtualRouter Offering，并且选择新下载的zstack-vr-1.1-image做为VirtualRouter Offering的镜像。其他网络配置不变。&lt;/li&gt;
&lt;li&gt;从UI面板的Virtual Router菜单中删除现有的VirtualRouter VM&lt;/li&gt;
&lt;li&gt;选择使用VR的L3网络重新创建一个普通VM，ZStack就会使用新的Virtual Router镜像创建一个新的虚拟路由。&lt;/li&gt;
&lt;/ol&gt;


&lt;h3 id=&quot;zstackimage&quot;&gt;6. 15M超小试用镜像--支持动态添加删除云盘和网络 &lt;/h3&gt;


&lt;p&gt;在1.1我们为ZStack专门构建了一个只有15M的测试镜像，支持网络、SSHD，用户可以用它来做一些基本测试。相比于之前的1.0的测试镜像，该镜像支持了动态添加删除云盘和网络。下载链接：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     http://download.zstack.org/templates/zstack-image-1.2.qcow2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;感谢Robert Yang(@linuxer)提供该镜像!&lt;/p&gt;

&lt;h3 id=&quot;migration&quot;&gt; 7. 修复CentOS7.2 物理机无法热迁移VM的bug&lt;/h3&gt;


&lt;p&gt;CentOS7.2 修改了热迁移VM的libvirt的相关代码，导致如果用户没有显示的设置物理机Hostname的情况下，云主机无法热迁移。ZStack以及给RedHat报告了问题。
不过在ZStack 1.1中，我们做了特别的改动来避免CentOS7.2 的这个bug。&lt;/p&gt;

&lt;h3 id=&quot;install&quot;&gt; 8. 安装 &lt;/h3&gt;


&lt;p&gt;你可以通过下面方式安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.1/1.1.0/0331/zstack-installer-1.1.0-0331.bin -O zstack-installer-1.1.0.bin
    bash zstack-installer-1.1.0.bin -R aliyun
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;这里&lt;code&gt;-R aliyun&lt;/code&gt;参数指定使用阿里云的源进行安装，你也可以使用&lt;code&gt;-R 163&lt;/code&gt;使用网易的源。我们推荐使用阿里云的源&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;install&quot;&gt; 9. 离线安装 ZStack &lt;/h3&gt;


&lt;p&gt;针对内网用户,以及访问Internet速度较慢的用户.ZStack 1.1 提供了离线安装方式.
用户若需要离线安装ZStack,需要在目标管理节点和计算节点上安装CentOS 7.2 ZStack社区版.&lt;/p&gt;

&lt;p&gt;然后在下载了第8步中的 zstack-installer 之后,你可以通过下面方式快速完成离线安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    bash zstack-installer-1.1.0.bin -o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体的离线安装教程和CentOS 7.2 ZStack社区版请阅读: &lt;a href=&quot;./offline-install-zstack-from-custom-iso.html&quot;&gt;ZStack离线安装教程&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;upgrade&quot;&gt; 10. 升级 &lt;/h3&gt;


&lt;p&gt;一如既往的，我们支持一键无缝升级：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.1/1.1.0/0331/zstack-installer-1.1.0-0331.bin -O zstack-installer-1.1.0.bin
    bash zstack-installer-1.1.0.bin -u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;多节点升级中的zstack.war 可以从如下链接获取: http://download.zstack.org/releases/1.1/1.1.0/0331/zstack.war&lt;/p&gt;

&lt;h3 id=&quot;upgradenetwork&quot;&gt; 11. 用Flat Network Provider替换Virtual Router Provider &lt;/h3&gt;


&lt;p&gt;如果你的网络模式是扁平网络，并且使用的是Virtual Rotuer Provider作为网络提供商，你可以使用1.0的Flat Network Provider替换它，这样你就不再需要virtual router VM来充当DHCP服务器了。假定你要替换网络提供商的L3网络的UUID是1a82c2691978476fa6cefa36bb9d4bfd，参考以下步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获得当前L3网络的网络提供商UUID&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceL3NetworkRef l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd
 {
     &quot;inventories&quot;: [
         {
             &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
             &quot;networkServiceType&quot;: &quot;DNS&quot;
         },
         {
             &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
             &quot;networkServiceType&quot;: &quot;DHCP&quot;
         }
     ],
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从L3网络上卸载Virtual Router Provider&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;DetachNetworkServiceFromL3Network  l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;:[&quot;DHCP&quot;,&quot;DNS&quot;]}&#39;
 {
     &quot;inventory&quot;: {
         &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;dns&quot;: [
             &quot;8.8.8.8&quot;
         ],
         &quot;ipRanges&quot;: [
             {
                 &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                 &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;name&quot;: &quot;ipr-dk7p&quot;,
                 &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                 &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                 &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
             }
         ],
         &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;name&quot;: &quot;l3-etpz&quot;,
         &quot;networkServices&quot;: [],
         &quot;state&quot;: &quot;Enabled&quot;,
         &quot;system&quot;: false,
         &quot;type&quot;: &quot;L3BasicNetwork&quot;,
         &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
         &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
     },
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;注意这里的参数networkServices是一个map， key是第一步里返回的networkServiceProviderUuid，value是第一步里返回的networkServiceType&lt;/p&gt;&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获得Flat Network Provider的UUID&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceProvider type=Flat
 {
     &quot;inventories&quot;: [
         {
             &quot;attachedL2NetworkUuids&quot;: [
                 &quot;9ec8cad681d1424fa7eda2447edae142&quot;
             ],
             &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
             &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
             &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
             &quot;networkServiceTypes&quot;: [
                 &quot;DHCP&quot;,
                 &quot;Userdata&quot;
             ],
             &quot;type&quot;: &quot;Flat&quot;,
             &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
         }
     ],
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获得承载L3网络的L2网络的UUID&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryL3Network fields=l2NetworkUuid, uuid=1a82c2691978476fa6cefa36bb9d4bfd
 {
     &quot;inventories&quot;: [
         {
             &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;
         }
     ],
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加载Flat Network Provider到L2网络&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceProviderToL2Network l2NetworkUuid=9ec8cad681d1424fa7eda2447edae142 networkServiceProviderUuid=17864f985e584a9ba4cd81de215212ce
 {
     &quot;inventory&quot;: {
         &quot;attachedL2NetworkUuids&quot;: [
             &quot;9ec8cad681d1424fa7eda2447edae142&quot;
         ],
         &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
         &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
         &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
         &quot;networkServiceTypes&quot;: [
             &quot;DHCP&quot;,
             &quot;Userdata&quot;
         ],
         &quot;type&quot;: &quot;Flat&quot;,
         &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
     },
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加载Flat Network Provider的服务到三层网络&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceToL3Network l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;17864f985e584a9ba4cd81de215212ce&quot;:[&quot;DHCP&quot;,&quot;Userdata&quot;]}&#39;
 {
     &quot;inventory&quot;: {
         &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;dns&quot;: [
             &quot;8.8.8.8&quot;
         ],
         &quot;ipRanges&quot;: [
             {
                 &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                 &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;name&quot;: &quot;ipr-dk7p&quot;,
                 &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                 &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                 &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
             }
         ],
         &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;name&quot;: &quot;l3-etpz&quot;,
         &quot;networkServices&quot;: [
             {
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                 &quot;networkServiceType&quot;: &quot;DHCP&quot;
             },
             {
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                 &quot;networkServiceType&quot;: &quot;Userdata&quot;
             }
         ],
         &quot;state&quot;: &quot;Enabled&quot;,
         &quot;system&quot;: false,
         &quot;type&quot;: &quot;L3BasicNetwork&quot;,
         &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
         &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
     },
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除virtualrouter ,删除virtual router offering&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryVirtualRouterVm
 {
     &quot;inventories&quot;: [
         {
             &quot;allVolumes&quot;: [
                 {
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;description&quot;: &quot;Root volume for VM[uuid:c5a966cb87d644649952daf683f89e26]&quot;,
                     &quot;deviceId&quot;: 0,
                     &quot;format&quot;: &quot;qcow2&quot;,
                     &quot;installPath&quot;: &quot;/zstack_ps/rootVolumes/acct-36c27e8ff05c4780bf6d2fa65700f22e/vol-8eeaa9cb4c1045a2825f8815fed69d72/8eeaa9cb4c1045a2825f8815fed69d72.qcow2&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:59 PM&quot;,
                     &quot;name&quot;: &quot;ROOT-for-virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;primaryStorageUuid&quot;: &quot;4bff4e2d266f480ead596752d14ff3b5&quot;,
                     &quot;rootImageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
                     &quot;size&quot;: 467206656,
                     &quot;state&quot;: &quot;Enabled&quot;,
                     &quot;status&quot;: &quot;Ready&quot;,
                     &quot;type&quot;: &quot;Root&quot;,
                     &quot;uuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
                     &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                 }
             ],
             &quot;allocatorStrategy&quot;: &quot;LeastVmPreferredHostAllocatorStrategy&quot;,
             &quot;applianceVmType&quot;: &quot;VirtualRouter&quot;,
             &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
             &quot;cpuNum&quot;: 1,
             &quot;cpuSpeed&quot;: 2,
             &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
             &quot;defaultRouteL3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;hostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
             &quot;hypervisorType&quot;: &quot;KVM&quot;,
             &quot;imageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
             &quot;instanceOfferingUuid&quot;: &quot;9cec7bd6324445a184351ffb7d32f970&quot;,
             &quot;lastHostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:07:20 PM&quot;,
             &quot;managementNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;memorySize&quot;: 536870912,
             &quot;name&quot;: &quot;virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;platform&quot;: &quot;Linux&quot;,
             &quot;publicNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;rootVolumeUuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
             &quot;state&quot;: &quot;Running&quot;,
             &quot;status&quot;: &quot;Connected&quot;,
             &quot;type&quot;: &quot;ApplianceVm&quot;,
             &quot;uuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;,
             &quot;vmNics&quot;: [
                 {
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;deviceId&quot;: 0,
                     &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                     &quot;ip&quot;: &quot;192.168.201.195&quot;,
                     &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;mac&quot;: &quot;fa:4c:01:68:77:00&quot;,
                     &quot;metaData&quot;: &quot;7&quot;,
                     &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                     &quot;uuid&quot;: &quot;c44e856aa88a42bc85ec30ce8c334c6c&quot;,
                     &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                 }
             ],
             &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
         }
     ],
     &quot;success&quot;: true
 }

 &amp;gt;&amp;gt;&amp;gt;DestroyVmInstance uuid=c5a966cb87d644649952daf683f89e26
 {
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重连所有有VM运行的host&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryHost
 {
     &quot;inventories&quot;: [
         {
             &quot;availableCpuCapacity&quot;: 7180,
             &quot;availableMemoryCapacity&quot;: 1997570048,
             &quot;clusterUuid&quot;: &quot;4282fb61aa55458ea160de138e130298&quot;,
             &quot;createDate&quot;: &quot;Jan 30, 2016 2:51:13 PM&quot;,
             &quot;hypervisorType&quot;: &quot;KVM&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:20 PM&quot;,
             &quot;managementIp&quot;: &quot;192.168.200.187&quot;,
             &quot;name&quot;: &quot;host1&quot;,
             &quot;state&quot;: &quot;Enabled&quot;,
             &quot;status&quot;: &quot;Connected&quot;,
             &quot;totalCpuCapacity&quot;: 7182,
             &quot;totalMemoryCapacity&quot;: 2098233344,
             &quot;username&quot;: &quot;root&quot;,
             &quot;uuid&quot;: &quot;402f8304a50c410486e023512492316b&quot;,
             &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
         },
         {
             &quot;availableCpuCapacity&quot;: 14363,
             &quot;availableMemoryCapacity&quot;: 8321593344,
             &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
             &quot;createDate&quot;: &quot;Jan 30, 2016 3:03:14 PM&quot;,
             &quot;hypervisorType&quot;: &quot;KVM&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:52 PM&quot;,
             &quot;managementIp&quot;: &quot;192.168.200.150&quot;,
             &quot;name&quot;: &quot;host2&quot;,
             &quot;state&quot;: &quot;Enabled&quot;,
             &quot;status&quot;: &quot;Connected&quot;,
             &quot;totalCpuCapacity&quot;: 14364,
             &quot;totalMemoryCapacity&quot;: 8371924992,
             &quot;username&quot;: &quot;root&quot;,
             &quot;uuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
             &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
         }
     ],
     &quot;success&quot;: true
 }

 &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=402f8304a50c410486e023512492316b
 {
     &quot;success&quot;: true
 }

 &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=415fa093b34e4a3d873368104b127115
 {
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 30 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/v1.1.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/v1.1.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
      <item>
        <title>ZStack v1.1 release</title>
        <description>&lt;p&gt;Hello everyone, I am Frank Zhang, the architect of ZStack. Today I am happy to
announce that ZStack v1.1 is released.&lt;/p&gt;

&lt;h1&gt;New Features And Enhancements&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ansible&quot;&gt;Ansible Optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#consoleproxy&quot;&gt;Console Proxy APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#apitimeout&quot;&gt;API Timeout Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#gc&quot;&gt;Garbage Collector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#image&quot;&gt;15 Tiny Tryout Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vr&quot;&gt;Virtual Router Image Upgrade&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Installation And Upgrade&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#install&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgrade&quot;&gt;Upgrade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgradevr&quot;&gt;Upgrade Virtual Router Provider To Flat Network Provider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;ansible&quot;&gt; 1. Ansible Optimization &lt;/h2&gt;


&lt;p&gt;In this version, we create customized deployers for all ZStack agents(i.e. kvmagent, backup storage agent) directly using Ansible SDK, instead of regular Ansible playbook YAML files. As the result, the speed of agent deployment gets significantly improved, because the deployer that is a Python application will try best to avoid unnecessary time-costing steps such as accessing YUM repo; the logging also gets better, each task will post messages to a logging URL before and after execution, and the error message will clearly state the error instead of flooding out all tasks status, which regular Ansible playbook YAML files normally do.&lt;/p&gt;

&lt;h2 id=&quot;consoleproxy&quot;&gt;2. Console Proxy APIs &lt;/h2&gt;


&lt;p&gt;Two new APIs are added for console proxy, &lt;code&gt;ReconnectConsoleProxyAgent&lt;/code&gt; and &lt;code&gt;QueryConsoleProxyAgent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Users can use &lt;code&gt;ReconnectConsoleProxyAgent&lt;/code&gt; to redeploy console proxy agents:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;&amp;gt;ReconnectConsoleProxyAgent 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or use &lt;code&gt;QueryConsoleProxyAgent&lt;/code&gt; to query agents&#39; status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       &amp;gt;&amp;gt;&amp;gt;QueryConsoleProxyAgent 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;apitimeout&quot;&gt;3. API Timeout Management&lt;/h2&gt;


&lt;p&gt;As ZStack consists of a lot of microservices which communicate with each other through async-messages, it&#39;s very hard to control API timeout because the API has no idea about internal messages entailed by itself. In this version, we add a central API timeout management framework that can connect an API to all entailed internal messages and HTTP requests, and that can propagate the API&#39;s timeout to the descendants. All APIs have default configurations, users can change a configuration by editing the &lt;code&gt;zstack.properties&lt;/code&gt; file, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ApiTimeout.org.zstack.header.image.APIAddImageMsg= org.zstack.header.storage.backup.DownloadImageMsg, org.zstack.storage.backup.sftp.SftpBackupStorageCommands$DownloadCmd, org.zstack.storage.ceph.backup.CephBackupStorageBase$DownloadCmd; 6h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example changes the timeout of API &lt;code&gt;org.zstack.header.image.APIAddImageMsg&lt;/code&gt; to six hours. However, this way is discouraged. In 1.2 version, we will allow users to configure APIs&#39; timeout through a new API.&lt;/p&gt;

&lt;h2 id=&quot;gc&quot;&gt;4. Garbage Collector&lt;/h2&gt;


&lt;p&gt;In this version, the VM related garbage collectors are enabled. Users can destroy a VM anytime no matter the connection status of the host. For example, you can delete a VM even the network connection to the host where the VM is running is lost. The garbage collector will save user operations which cannot be completed in current situation and re-execute them once the host&#39;s network connection recovers. The garbage collector can be triggered by time-based poll and events, for example, a host reconnect event and host delete event can both trigger a VM deleting garbage collector.&lt;/p&gt;

&lt;h2 id=&quot;image&quot;&gt;5. 15M Tiny Tryout Image&lt;/h2&gt;


&lt;p&gt;A new 15 tiny image is ready for quickly try out creating VMs. The image supports runtime attaching/detaching volumes and networks. The ACPID daemon is also included so you can gracefully shutdown a VM. You can download the image from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    http://download.zstack.org/templates/zstack-image-1.2.qcow2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;vr&quot;&gt;6. New Virtual Router Image&lt;/h2&gt;


&lt;p&gt;The virtual router image is upgraded to 1.1 version, you can download it from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    http://download.zstack.org/templates/zstack-virtualrouter-1.1.0.qcow2
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;NOTE: Users still using the old 0.9 version are not necessary to upgrade. However, we suggest all new users using the new version.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;install&quot;&gt;7. Installation&lt;/h2&gt;


&lt;p&gt;You can install the 1.1 release by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.1/1.1.0/0331/zstack-installer-1.1.0-0331.bin -O zstack-installer-1.1.0.bin
    bash zstack-installer-1.1.0.bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;upgrade&quot;&gt;8. Upgrade&lt;/h2&gt;


&lt;p&gt;To upgrade your ZStack to 1.1, do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.1/1.1.0/0331/zstack-installer-1.1.0-0331.bin -O zstack-installer-1.1.0.bin
    bash zstack-installer-1.1.0.bin -u
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;upgradevr&quot;&gt;9. Upgrade Virtual Router Provider To Flat Network Provider&lt;/h2&gt;


&lt;p&gt;If you are currently using a flat network with a previous ZStack version, you can upgrade the L3 network using the flat network provider so
you won&#39;t need the virtual router VM anymore. Assume the UUID of your L3 network is 1a82c2691978476fa6cefa36bb9d4bfd, please follow
the below steps:&lt;/p&gt;

&lt;h4&gt;1. Obtain the UUID of the virtual rotuer provider&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceL3NetworkRef l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd
    {
        &quot;inventories&quot;: [
            {
                &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
                &quot;networkServiceType&quot;: &quot;DNS&quot;
            },
            {
                &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
                &quot;networkServiceType&quot;: &quot;DHCP&quot;
            }
        ],
        &quot;success&quot;: true
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;2. Detach the virtual router provider from the L3 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;&amp;gt;DetachNetworkServiceFromL3Network  l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;:[&quot;DHCP&quot;,&quot;DNS&quot;]}&#39;
         {
             &quot;inventory&quot;: {
                 &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
                 &quot;dns&quot;: [
                     &quot;8.8.8.8&quot;
                 ],
                 &quot;ipRanges&quot;: [
                     {
                         &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                         &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                         &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                         &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                         &quot;name&quot;: &quot;ipr-dk7p&quot;,
                         &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                         &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                         &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
                     }
                 ],
                 &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
                 &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
                 &quot;name&quot;: &quot;l3-etpz&quot;,
                 &quot;networkServices&quot;: [],
                 &quot;state&quot;: &quot;Enabled&quot;,
                 &quot;system&quot;: false,
                 &quot;type&quot;: &quot;L3BasicNetwork&quot;,
                 &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
             },
             &quot;success&quot;: true
         }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;the parameter &lt;code&gt;networkServices&lt;/code&gt; is a map where the key is a &lt;code&gt;networkServiceProviderUuid&lt;/code&gt; and the value is a list of &lt;code&gt;networkServiceType&lt;/code&gt;, which you obtain in the step 1&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4&gt;3. Get the flat network provider UUID&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceProvider type=Flat
        {
            &quot;inventories&quot;: [
                {
                    &quot;attachedL2NetworkUuids&quot;: [
                        &quot;9ec8cad681d1424fa7eda2447edae142&quot;
                    ],
                    &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
                    &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
                    &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
                    &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
                    &quot;networkServiceTypes&quot;: [
                        &quot;DHCP&quot;,
                        &quot;Userdata&quot;
                    ],
                    &quot;type&quot;: &quot;Flat&quot;,
                    &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
                }
            ],
            &quot;success&quot;: true
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;4. Get L2 UUID for the L3 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;&amp;gt;QueryL3Network fields=l2NetworkUuid, uuid=1a82c2691978476fa6cefa36bb9d4bfd
        {
            &quot;inventories&quot;: [
                {
                    &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;
                }
            ],
            &quot;success&quot;: true
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;5. Attach the flat network provider to the L2 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;       &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceProviderToL2Network l2NetworkUuid=9ec8cad681d1424fa7eda2447edae142 networkServiceProviderUuid=17864f985e584a9ba4cd81de215212ce
       {
           &quot;inventory&quot;: {
               &quot;attachedL2NetworkUuids&quot;: [
                   &quot;9ec8cad681d1424fa7eda2447edae142&quot;
               ],
               &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
               &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
               &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
               &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
               &quot;networkServiceTypes&quot;: [
                   &quot;DHCP&quot;,
                   &quot;Userdata&quot;
               ],
               &quot;type&quot;: &quot;Flat&quot;,
               &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
           },
           &quot;success&quot;: true
       }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;6. Attach the flat network provider to the L3 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;     &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceToL3Network l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;17864f985e584a9ba4cd81de215212ce&quot;:[&quot;DHCP&quot;,&quot;Userdata&quot;]}&#39;
      {
          &quot;inventory&quot;: {
              &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
              &quot;dns&quot;: [
                  &quot;8.8.8.8&quot;
              ],
              &quot;ipRanges&quot;: [
                  {
                      &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                      &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                      &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                      &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                      &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                      &quot;name&quot;: &quot;ipr-dk7p&quot;,
                      &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                      &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                      &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
                  }
              ],
              &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
              &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
              &quot;name&quot;: &quot;l3-etpz&quot;,
              &quot;networkServices&quot;: [
                  {
                      &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                      &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                      &quot;networkServiceType&quot;: &quot;DHCP&quot;
                  },
                  {
                      &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                      &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                      &quot;networkServiceType&quot;: &quot;Userdata&quot;
                  }
              ],
              &quot;state&quot;: &quot;Enabled&quot;,
              &quot;system&quot;: false,
              &quot;type&quot;: &quot;L3BasicNetwork&quot;,
              &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
              &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
          },
          &quot;success&quot;: true
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;7. Delete the virtual router VM&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;QueryVirtualRouterVm
         {
             &quot;inventories&quot;: [
                 {
                     &quot;allVolumes&quot;: [
                         {
                             &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                             &quot;description&quot;: &quot;Root volume for VM[uuid:c5a966cb87d644649952daf683f89e26]&quot;,
                             &quot;deviceId&quot;: 0,
                             &quot;format&quot;: &quot;qcow2&quot;,
                             &quot;installPath&quot;: &quot;/zstack_ps/rootVolumes/acct-36c27e8ff05c4780bf6d2fa65700f22e/vol-8eeaa9cb4c1045a2825f8815fed69d72/8eeaa9cb4c1045a2825f8815fed69d72.qcow2&quot;,
                             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:59 PM&quot;,
                             &quot;name&quot;: &quot;ROOT-for-virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                             &quot;primaryStorageUuid&quot;: &quot;4bff4e2d266f480ead596752d14ff3b5&quot;,
                             &quot;rootImageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
                             &quot;size&quot;: 467206656,
                             &quot;state&quot;: &quot;Enabled&quot;,
                             &quot;status&quot;: &quot;Ready&quot;,
                             &quot;type&quot;: &quot;Root&quot;,
                             &quot;uuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
                             &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                         }
                     ],
                     &quot;allocatorStrategy&quot;: &quot;LeastVmPreferredHostAllocatorStrategy&quot;,
                     &quot;applianceVmType&quot;: &quot;VirtualRouter&quot;,
                     &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
                     &quot;cpuNum&quot;: 1,
                     &quot;cpuSpeed&quot;: 2,
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;defaultRouteL3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;hostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
                     &quot;hypervisorType&quot;: &quot;KVM&quot;,
                     &quot;imageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
                     &quot;instanceOfferingUuid&quot;: &quot;9cec7bd6324445a184351ffb7d32f970&quot;,
                     &quot;lastHostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:07:20 PM&quot;,
                     &quot;managementNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;memorySize&quot;: 536870912,
                     &quot;name&quot;: &quot;virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;platform&quot;: &quot;Linux&quot;,
                     &quot;publicNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;rootVolumeUuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
                     &quot;state&quot;: &quot;Running&quot;,
                     &quot;status&quot;: &quot;Connected&quot;,
                     &quot;type&quot;: &quot;ApplianceVm&quot;,
                     &quot;uuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;,
                     &quot;vmNics&quot;: [
                         {
                             &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                             &quot;deviceId&quot;: 0,
                             &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                             &quot;ip&quot;: &quot;192.168.201.195&quot;,
                             &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                             &quot;mac&quot;: &quot;fa:4c:01:68:77:00&quot;,
                             &quot;metaData&quot;: &quot;7&quot;,
                             &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                             &quot;uuid&quot;: &quot;c44e856aa88a42bc85ec30ce8c334c6c&quot;,
                             &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                         }
                     ],
                     &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
                 }
             ],
             &quot;success&quot;: true
         }

         &amp;gt;&amp;gt;&amp;gt;DestroyVmInstance uuid=c5a966cb87d644649952daf683f89e26
         {
             &quot;success&quot;: true
         }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;8. Reconnect all hosts&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;         &amp;gt;&amp;gt;&amp;gt;QueryHost
         {
             &quot;inventories&quot;: [
                 {
                     &quot;availableCpuCapacity&quot;: 7180,
                     &quot;availableMemoryCapacity&quot;: 1997570048,
                     &quot;clusterUuid&quot;: &quot;4282fb61aa55458ea160de138e130298&quot;,
                     &quot;createDate&quot;: &quot;Jan 30, 2016 2:51:13 PM&quot;,
                     &quot;hypervisorType&quot;: &quot;KVM&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:20 PM&quot;,
                     &quot;managementIp&quot;: &quot;192.168.200.187&quot;,
                     &quot;name&quot;: &quot;host1&quot;,
                     &quot;state&quot;: &quot;Enabled&quot;,
                     &quot;status&quot;: &quot;Connected&quot;,
                     &quot;totalCpuCapacity&quot;: 7182,
                     &quot;totalMemoryCapacity&quot;: 2098233344,
                     &quot;username&quot;: &quot;root&quot;,
                     &quot;uuid&quot;: &quot;402f8304a50c410486e023512492316b&quot;,
                     &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
                 },
                 {
                     &quot;availableCpuCapacity&quot;: 14363,
                     &quot;availableMemoryCapacity&quot;: 8321593344,
                     &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:03:14 PM&quot;,
                     &quot;hypervisorType&quot;: &quot;KVM&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:52 PM&quot;,
                     &quot;managementIp&quot;: &quot;192.168.200.150&quot;,
                     &quot;name&quot;: &quot;host2&quot;,
                     &quot;state&quot;: &quot;Enabled&quot;,
                     &quot;status&quot;: &quot;Connected&quot;,
                     &quot;totalCpuCapacity&quot;: 14364,
                     &quot;totalMemoryCapacity&quot;: 8371924992,
                     &quot;username&quot;: &quot;root&quot;,
                     &quot;uuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
                     &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
                 }
             ],
             &quot;success&quot;: true
         }

         &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=402f8304a50c410486e023512492316b
         {
             &quot;success&quot;: true
         }

         &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=415fa093b34e4a3d873368104b127115
         {
             &quot;success&quot;: true
         }
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 30 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/blog/v1.1.html</link>
        <guid isPermaLink="true">http://zstack.org/blog/v1.1.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>ZStack v1.1 release</title>
        <description>&lt;p&gt;Hello everyone, I am Frank Zhang, the architect of ZStack. Today I am happy to
announce that ZStack v1.1 is released.&lt;/p&gt;

&lt;h1&gt;New Features And Enhancements&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ansible&quot;&gt;Ansible Optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#consoleproxy&quot;&gt;Console Proxy APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#apitimeout&quot;&gt;API Timeout Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#gc&quot;&gt;Garbage Collector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#image&quot;&gt;15 Tiny Tryout Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vr&quot;&gt;Virtual Router Image Upgrade&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Installation And Upgrade&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#install&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgrade&quot;&gt;Upgrade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgradevr&quot;&gt;Upgrade Virtual Router Provider To Flat Network Provider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;ansible&quot;&gt; 1. Ansible Optimization &lt;/h2&gt;


&lt;p&gt;In this version, we create customized deployers for all ZStack agents(i.e. kvmagent, backup storage agent) directly using Ansible SDK, instead of regular Ansible playbook YAML files. As the result, the speed of agent deployment gets significantly improved, because the deployer that is a Python application will try best to avoid unnecessary time-costing steps such as accessing YUM repo; the logging also gets better, each task will post messages to a logging URL before and after execution, and the error message will clearly state the error instead of flooding out all tasks status, which regular Ansible playbook YAML files normally do.&lt;/p&gt;

&lt;h2 id=&quot;consoleproxy&quot;&gt;2. Console Proxy APIs &lt;/h2&gt;


&lt;p&gt;Two new APIs are added for console proxy, &lt;code&gt;ReconnectConsoleProxyAgent&lt;/code&gt; and &lt;code&gt;QueryConsoleProxyAgent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Users can use &lt;code&gt;ReconnectConsoleProxyAgent&lt;/code&gt; to redeploy console proxy agents:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;&amp;gt;ReconnectConsoleProxyAgent 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or use &lt;code&gt;QueryConsoleProxyAgent&lt;/code&gt; to query agents&#39; status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       &amp;gt;&amp;gt;&amp;gt;QueryConsoleProxyAgent 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;apitimeout&quot;&gt;3. API Timeout Management&lt;/h2&gt;


&lt;p&gt;As ZStack consists of a lot of microservices which communicate with each other through async-messages, it&#39;s very hard to control API timeout because the API has no idea about internal messages entailed by itself. In this version, we add a central API timeout management framework that can connect an API to all entailed internal messages and HTTP requests, and that can propagate the API&#39;s timeout to the descendants. All APIs have default configurations, users can change a configuration by editing the &lt;code&gt;zstack.properties&lt;/code&gt; file, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ApiTimeout.org.zstack.header.image.APIAddImageMsg= org.zstack.header.storage.backup.DownloadImageMsg, org.zstack.storage.backup.sftp.SftpBackupStorageCommands$DownloadCmd, org.zstack.storage.ceph.backup.CephBackupStorageBase$DownloadCmd; 6h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example changes the timeout of API &lt;code&gt;org.zstack.header.image.APIAddImageMsg&lt;/code&gt; to six hours. However, this way is discouraged. In 1.2 version, we will allow users to configure APIs&#39; timeout through a new API.&lt;/p&gt;

&lt;h2 id=&quot;gc&quot;&gt;4. Garbage Collector&lt;/h2&gt;


&lt;p&gt;In this version, the VM related garbage collectors are enabled. Users can destroy a VM anytime no matter the connection status of the host. For example, you can delete a VM even the network connection to the host where the VM is running is lost. The garbage collector will save user operations which cannot be completed in current situation and re-execute them once the host&#39;s network connection recovers. The garbage collector can be triggered by time-based poll and events, for example, a host reconnect event and host delete event can both trigger a VM deleting garbage collector.&lt;/p&gt;

&lt;h2 id=&quot;image&quot;&gt;5. 15M Tiny Tryout Image&lt;/h2&gt;


&lt;p&gt;A new 15 tiny image is ready for quickly try out creating VMs. The image supports runtime attaching/detaching volumes and networks. The ACPID daemon is also included so you can gracefully shutdown a VM. You can download the image from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    http://download.zstack.org/templates/zstack-image-1.2.qcow2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;vr&quot;&gt;6. New Virtual Router Image&lt;/h2&gt;


&lt;p&gt;The virtual router image is upgraded to 1.1 version, you can download it from:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    http://download.zstack.org/templates/zstack-virtualrouter-1.1.0.qcow2
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;NOTE: Users still using the old 0.9 version are not necessary to upgrade. However, we suggest all new users using the new version.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;install&quot;&gt;7. Installation&lt;/h2&gt;


&lt;p&gt;You can install the 1.1 release by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.1/1.1.0/0331/zstack-installer-1.1.0-0331.bin -O zstack-installer-1.1.0.bin
    bash zstack-installer-1.1.0.bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;upgrade&quot;&gt;8. Upgrade&lt;/h2&gt;


&lt;p&gt;To upgrade your ZStack to 1.1, do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.1/1.1.0/0331/zstack-installer-1.1.0-0331.bin -O zstack-installer-1.1.0.bin
    bash zstack-installer-1.1.0.bin -u
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;upgradevr&quot;&gt;9. Upgrade Virtual Router Provider To Flat Network Provider&lt;/h2&gt;


&lt;p&gt;If you are currently using a flat network with a previous ZStack version, you can upgrade the L3 network using the flat network provider so
you won&#39;t need the virtual router VM anymore. Assume the UUID of your L3 network is 1a82c2691978476fa6cefa36bb9d4bfd, please follow
the below steps:&lt;/p&gt;

&lt;h4&gt;1. Obtain the UUID of the virtual rotuer provider&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceL3NetworkRef l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd
    {
        &quot;inventories&quot;: [
            {
                &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
                &quot;networkServiceType&quot;: &quot;DNS&quot;
            },
            {
                &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
                &quot;networkServiceType&quot;: &quot;DHCP&quot;
            }
        ],
        &quot;success&quot;: true
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;2. Detach the virtual router provider from the L3 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;&amp;gt;DetachNetworkServiceFromL3Network  l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;:[&quot;DHCP&quot;,&quot;DNS&quot;]}&#39;
         {
             &quot;inventory&quot;: {
                 &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
                 &quot;dns&quot;: [
                     &quot;8.8.8.8&quot;
                 ],
                 &quot;ipRanges&quot;: [
                     {
                         &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                         &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                         &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                         &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                         &quot;name&quot;: &quot;ipr-dk7p&quot;,
                         &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                         &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                         &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
                     }
                 ],
                 &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
                 &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
                 &quot;name&quot;: &quot;l3-etpz&quot;,
                 &quot;networkServices&quot;: [],
                 &quot;state&quot;: &quot;Enabled&quot;,
                 &quot;system&quot;: false,
                 &quot;type&quot;: &quot;L3BasicNetwork&quot;,
                 &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
             },
             &quot;success&quot;: true
         }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;the parameter &lt;code&gt;networkServices&lt;/code&gt; is a map where the key is a &lt;code&gt;networkServiceProviderUuid&lt;/code&gt; and the value is a list of &lt;code&gt;networkServiceType&lt;/code&gt;, which you obtain in the step 1&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4&gt;3. Get the flat network provider UUID&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceProvider type=Flat
        {
            &quot;inventories&quot;: [
                {
                    &quot;attachedL2NetworkUuids&quot;: [
                        &quot;9ec8cad681d1424fa7eda2447edae142&quot;
                    ],
                    &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
                    &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
                    &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
                    &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
                    &quot;networkServiceTypes&quot;: [
                        &quot;DHCP&quot;,
                        &quot;Userdata&quot;
                    ],
                    &quot;type&quot;: &quot;Flat&quot;,
                    &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
                }
            ],
            &quot;success&quot;: true
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;4. Get L2 UUID for the L3 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;&amp;gt;QueryL3Network fields=l2NetworkUuid, uuid=1a82c2691978476fa6cefa36bb9d4bfd
        {
            &quot;inventories&quot;: [
                {
                    &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;
                }
            ],
            &quot;success&quot;: true
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;5. Attach the flat network provider to the L2 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;       &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceProviderToL2Network l2NetworkUuid=9ec8cad681d1424fa7eda2447edae142 networkServiceProviderUuid=17864f985e584a9ba4cd81de215212ce
       {
           &quot;inventory&quot;: {
               &quot;attachedL2NetworkUuids&quot;: [
                   &quot;9ec8cad681d1424fa7eda2447edae142&quot;
               ],
               &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
               &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
               &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
               &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
               &quot;networkServiceTypes&quot;: [
                   &quot;DHCP&quot;,
                   &quot;Userdata&quot;
               ],
               &quot;type&quot;: &quot;Flat&quot;,
               &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
           },
           &quot;success&quot;: true
       }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;6. Attach the flat network provider to the L3 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;     &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceToL3Network l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;17864f985e584a9ba4cd81de215212ce&quot;:[&quot;DHCP&quot;,&quot;Userdata&quot;]}&#39;
      {
          &quot;inventory&quot;: {
              &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
              &quot;dns&quot;: [
                  &quot;8.8.8.8&quot;
              ],
              &quot;ipRanges&quot;: [
                  {
                      &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                      &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                      &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                      &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                      &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                      &quot;name&quot;: &quot;ipr-dk7p&quot;,
                      &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                      &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                      &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
                  }
              ],
              &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
              &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
              &quot;name&quot;: &quot;l3-etpz&quot;,
              &quot;networkServices&quot;: [
                  {
                      &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                      &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                      &quot;networkServiceType&quot;: &quot;DHCP&quot;
                  },
                  {
                      &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                      &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                      &quot;networkServiceType&quot;: &quot;Userdata&quot;
                  }
              ],
              &quot;state&quot;: &quot;Enabled&quot;,
              &quot;system&quot;: false,
              &quot;type&quot;: &quot;L3BasicNetwork&quot;,
              &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
              &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
          },
          &quot;success&quot;: true
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;7. Delete the virtual router VM&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;QueryVirtualRouterVm
         {
             &quot;inventories&quot;: [
                 {
                     &quot;allVolumes&quot;: [
                         {
                             &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                             &quot;description&quot;: &quot;Root volume for VM[uuid:c5a966cb87d644649952daf683f89e26]&quot;,
                             &quot;deviceId&quot;: 0,
                             &quot;format&quot;: &quot;qcow2&quot;,
                             &quot;installPath&quot;: &quot;/zstack_ps/rootVolumes/acct-36c27e8ff05c4780bf6d2fa65700f22e/vol-8eeaa9cb4c1045a2825f8815fed69d72/8eeaa9cb4c1045a2825f8815fed69d72.qcow2&quot;,
                             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:59 PM&quot;,
                             &quot;name&quot;: &quot;ROOT-for-virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                             &quot;primaryStorageUuid&quot;: &quot;4bff4e2d266f480ead596752d14ff3b5&quot;,
                             &quot;rootImageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
                             &quot;size&quot;: 467206656,
                             &quot;state&quot;: &quot;Enabled&quot;,
                             &quot;status&quot;: &quot;Ready&quot;,
                             &quot;type&quot;: &quot;Root&quot;,
                             &quot;uuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
                             &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                         }
                     ],
                     &quot;allocatorStrategy&quot;: &quot;LeastVmPreferredHostAllocatorStrategy&quot;,
                     &quot;applianceVmType&quot;: &quot;VirtualRouter&quot;,
                     &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
                     &quot;cpuNum&quot;: 1,
                     &quot;cpuSpeed&quot;: 2,
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;defaultRouteL3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;hostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
                     &quot;hypervisorType&quot;: &quot;KVM&quot;,
                     &quot;imageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
                     &quot;instanceOfferingUuid&quot;: &quot;9cec7bd6324445a184351ffb7d32f970&quot;,
                     &quot;lastHostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:07:20 PM&quot;,
                     &quot;managementNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;memorySize&quot;: 536870912,
                     &quot;name&quot;: &quot;virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;platform&quot;: &quot;Linux&quot;,
                     &quot;publicNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;rootVolumeUuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
                     &quot;state&quot;: &quot;Running&quot;,
                     &quot;status&quot;: &quot;Connected&quot;,
                     &quot;type&quot;: &quot;ApplianceVm&quot;,
                     &quot;uuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;,
                     &quot;vmNics&quot;: [
                         {
                             &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                             &quot;deviceId&quot;: 0,
                             &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                             &quot;ip&quot;: &quot;192.168.201.195&quot;,
                             &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                             &quot;mac&quot;: &quot;fa:4c:01:68:77:00&quot;,
                             &quot;metaData&quot;: &quot;7&quot;,
                             &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                             &quot;uuid&quot;: &quot;c44e856aa88a42bc85ec30ce8c334c6c&quot;,
                             &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                         }
                     ],
                     &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
                 }
             ],
             &quot;success&quot;: true
         }

         &amp;gt;&amp;gt;&amp;gt;DestroyVmInstance uuid=c5a966cb87d644649952daf683f89e26
         {
             &quot;success&quot;: true
         }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;8. Reconnect all hosts&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;         &amp;gt;&amp;gt;&amp;gt;QueryHost
         {
             &quot;inventories&quot;: [
                 {
                     &quot;availableCpuCapacity&quot;: 7180,
                     &quot;availableMemoryCapacity&quot;: 1997570048,
                     &quot;clusterUuid&quot;: &quot;4282fb61aa55458ea160de138e130298&quot;,
                     &quot;createDate&quot;: &quot;Jan 30, 2016 2:51:13 PM&quot;,
                     &quot;hypervisorType&quot;: &quot;KVM&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:20 PM&quot;,
                     &quot;managementIp&quot;: &quot;192.168.200.187&quot;,
                     &quot;name&quot;: &quot;host1&quot;,
                     &quot;state&quot;: &quot;Enabled&quot;,
                     &quot;status&quot;: &quot;Connected&quot;,
                     &quot;totalCpuCapacity&quot;: 7182,
                     &quot;totalMemoryCapacity&quot;: 2098233344,
                     &quot;username&quot;: &quot;root&quot;,
                     &quot;uuid&quot;: &quot;402f8304a50c410486e023512492316b&quot;,
                     &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
                 },
                 {
                     &quot;availableCpuCapacity&quot;: 14363,
                     &quot;availableMemoryCapacity&quot;: 8321593344,
                     &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:03:14 PM&quot;,
                     &quot;hypervisorType&quot;: &quot;KVM&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:52 PM&quot;,
                     &quot;managementIp&quot;: &quot;192.168.200.150&quot;,
                     &quot;name&quot;: &quot;host2&quot;,
                     &quot;state&quot;: &quot;Enabled&quot;,
                     &quot;status&quot;: &quot;Connected&quot;,
                     &quot;totalCpuCapacity&quot;: 14364,
                     &quot;totalMemoryCapacity&quot;: 8371924992,
                     &quot;username&quot;: &quot;root&quot;,
                     &quot;uuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
                     &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
                 }
             ],
             &quot;success&quot;: true
         }

         &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=402f8304a50c410486e023512492316b
         {
             &quot;success&quot;: true
         }

         &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=415fa093b34e4a3d873368104b127115
         {
             &quot;success&quot;: true
         }
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 30 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn/blog/v1.1.html</link>
        <guid isPermaLink="true">http://zstack.org/cn/blog/v1.1.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>ZStack离线安装教程</title>
        <description>&lt;h2&gt;ZStack离线安装教程&lt;/h2&gt;

&lt;p&gt;针对无法访问互联网以及访问互联网速度较慢的用户，ZStack 1.1版本特别提供了一个离线安装的方法。
用户使用离线安装方法，首先需要在管理节点,镜像服务器和计算节点上安装CentOS 7.2的ZStack社区版，
然后在安装ZStack的时候使用-o参数即可快速完成环境的搭建。&lt;/p&gt;

&lt;p&gt;本文将会详细介绍如何把定制版ISO的刻录成U盘，如何使用U盘引导安装CentOS 7.2操作系统，
以及如何离线安装ZStack系统的方法。&lt;/p&gt;

&lt;h4&gt;CentOS 7.2 ZStack社区版ISO特性：&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;基于CentOS-7-x86_64-1511.ISO深度定制；&lt;/li&gt;
&lt;li&gt;包含ZStack需要的所有安装包，安装ZStack时，无须连接外网，也无须配置yum源，就可以实现ZStack的完全离线安装；&lt;/li&gt;
&lt;li&gt;保留了CentOS7.2的官方yum源，支持官方yum更新；&lt;/li&gt;
&lt;li&gt;默认设置了root密码为password，支持安装OS后修改密码；&lt;/li&gt;
&lt;li&gt;网卡名称默认为ethX格式，例如eth0或eth1；&lt;/li&gt;
&lt;li&gt;默认选项：时区--亚洲东八区，语言--English，键盘--English(United States)。&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;CentOS 7.2 ZStack 社区定制版系统安装教程：&lt;/h3&gt;

&lt;h4&gt;1. 下载ZStack社区定制版CentOS7.2 ISO&lt;/h4&gt;

&lt;p&gt;文件名称：ZStack-Community-x86_64-DVD-1.2.0.iso (1.3G)&lt;/p&gt;

&lt;p&gt;MD5校验码：17691a91c49a397430ef5fa6f9033a5b&lt;/p&gt;

&lt;p&gt;下载地址1：
http://download.zstack.org/ISO/ZStack-Community-x86_64-DVD-1.2.0.iso&lt;/p&gt;

&lt;p&gt;下载地址2：
http://pan.baidu.com/s/1dF4ozU5&lt;/p&gt;

&lt;h4&gt;2. 制作U盘安装盘&lt;/h4&gt;

&lt;h5&gt;2.1   使用UltraISO打开ISO&lt;/h5&gt;

&lt;p&gt;使用UltraISO，点击“文件”按钮，选择打开已下载好的CentOS7.2 ISO文件，如图1所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/blogs/offline_install/use-UltraISO-open-custom-centos7.2-iso.png&quot; &gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图1 选择UltraISO打开定制版CentOS7.2 ISO&lt;/em&gt;&lt;/p&gt;

&lt;h5&gt;2.2   写入硬盘镜像&lt;/h5&gt;

&lt;p&gt;点击“启动”按钮，选择“写入硬盘镜像”，如图2所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/blogs/offline_install/click-write-to-diskimage.png&quot; &gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图2 点击写入硬盘镜像&lt;/em&gt;&lt;/p&gt;

&lt;h5&gt;2.3   将ISO写入硬盘镜像&lt;/h5&gt;

&lt;p&gt;在硬盘驱动器列表选择相应的U盘进行刻录，如果系统只插了一个U盘，则默认以此U盘进行刻录和写入，在刻录前，注意备份U盘之前的内容。
其他选项，按照默认设置，无须额外配置。点击“写入”按钮，如图3所示。在新界面中点击“是”按钮进行确认，UltraISO将会把此ISO刻录到U盘。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/blogs/offline_install/choose-u-disk-to-write.png&quot; &gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图3 选择U盘，点击写入按钮&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/blogs/offline_install/choose-u-disk-to-write.png&quot; &gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图4 确认写入&lt;/em&gt;&lt;/p&gt;

&lt;h5&gt;2.4   刻录检查&lt;/h5&gt;

&lt;p&gt;刻录成功的界面如图5所示，表示ZStack的定制版CentOS 7.2 可引导U盘已刻录成功。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/blogs/offline_install/burn-check.png&quot; &gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图5 刻录检查&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;3. 使用U盘引导CentOS7.2&lt;/h4&gt;

&lt;p&gt;此ISO支持Legacy模式引导，也支持UEFI模式引导。可根据需求，自定义选择安装。下面以Legacy模式引导安装举例。
在BIOS启动选项列表，选择此U盘为第一启动设备，启动后，引导安装界面如图6所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/blogs/offline_install/boot-from-U-disk.png&quot; &gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图6 可引导U盘启动界面&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;4. 硬盘分区&lt;/h4&gt;

&lt;p&gt;安装过程中，只需进行分区，即可一键安装CentOS7.2操作系统，如图7所示的分区为根分区48G，swap分区为2G。也可根据存储及需求，提前设置好大容量分区。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/blogs/offline_install/partition.png&quot; &gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图7 安装分区界面&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;5. 安装系统&lt;/h4&gt;

&lt;p&gt;分区完毕后，点击“Begin Installation”按钮，开始安装。如图8所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/blogs/offline_install/click-begin-installation.png&quot; &gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图8 点击Begin Installation按钮&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;所有的安装包安装完毕后，点击“reboot”按钮，如图9所示，即可启动进入CentOS7.2系统。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/blogs/offline_install/prepare-reboot.png&quot; &gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图9 点击reboot按钮&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;离线安装ZStack：&lt;/h3&gt;

&lt;p&gt;安装系统后，可通过以下方法离线安装ZStack。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;下载ZStack离线安装包(e.g. wget http://download.zstack.org/releases/1.1/1.1.2/zstack-installer-1.1.2.bin -O zstack-installer.bin)到任意目录(假定文件名为zstack-installer.bin)；&lt;/li&gt;
&lt;li&gt;在此目录下执行“bash zstack-installer.bin -o”即可完成相应安装。如图10所示。&lt;/li&gt;
&lt;li&gt;安装过程如果提示错误，可参考相应错误提示进行处理。如果无法正常安装可发送相应错误日志到官方讨论群寻求帮助。&lt;/li&gt;
&lt;li&gt;安装完毕可参考相应的提示，访问对应的URL打开ZStack Web UI。
&lt;img src=&quot;../images/blogs/offline_install/offline-install-zstack.png&quot; &gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;em&gt;图10 离线安装ZStack&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;配置用户内网独立yum源：&lt;/h2&gt;

&lt;p&gt;如果用户自己在内部配置了统一的yum源,也可以不使用ZStack CentOS 7.2 社区版的ISO来安装系统。
但是需要手动在每一台机器上(需要安装ZStack管理节点,镜像服务器以及计算节点的机器),编写如下的yum配置,把内部yum源配置到名为zstack-local的repository里:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#echo /etc/yum.repos.d/zstack-local.repo
[zstack-local]
name=ZStack Local Yum Repo
baseurl=http://内部YUM源URL
enabled=0
gpgcheck=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要注意的是该内部源内需要包含系统需要以来的各种标准库,包括epel里的库.&lt;/p&gt;

&lt;p&gt;配置之后,就可以使用-o参数来安装ZStack.添加各种ZStack资源的时候,也会使用每台服务器上的该配置文件.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/offline-install-zstack-from-custom-iso.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/offline-install-zstack-from-custom-iso.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
      <item>
        <title>ZStack v1.1 RC1 发布</title>
        <description>&lt;h2&gt;ZStack 1.1 RC1 版本今天发布&lt;/h2&gt;

&lt;p&gt;ZStack 1.1 RC1 版本今天发布，欢迎大家下载试用。在该版本中，我们主要针对1.0 版本做了性能和稳定性相关的工作。
某些性能指标提升超过10倍,例如consoleproxy在管理节点重启后会立刻安装完毕.
在ZStack 1.1 正式版发布的时候我们还会提供一个离线版的CentOS7.2的安装ISO和ZStack 1.1的离线安装方法。&lt;/p&gt;

&lt;h2&gt;新增功能&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ansible&quot;&gt;Ansible 优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#consoleproxy&quot;&gt;ConsoleProxy 重连API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#timeout&quot;&gt;API超时管理框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#reclaim&quot;&gt;垃圾自动回收&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zstackimage&quot;&gt;15M超小试用镜像--支持动态添加删除云盘和网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#virtualrouter&quot;&gt;更新虚拟路由（VirtualRouter）镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#migration&quot;&gt;修改CentOS7.2 无法热迁移VM的Bug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;安装升级&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#install&quot;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgrade&quot;&gt;升级&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgradenetwork&quot;&gt;Virtual Router Provider升级到Flat Network Porvider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3 id=&quot;ansible&quot;&gt;1. Ansible优化 &lt;/h3&gt;


&lt;p&gt;在1.1版本中，我们不再使用Ansible Playbook的方式去部署agent，而是直接使用了Ansible的原生SDK，为每个agent都定制了单独的部署程序，使得部署的稳定性和效率得到了极大的提高。&lt;/p&gt;

&lt;p&gt;新的Ansible部署工具会自动检查系统依赖包的安装情况，只在有依赖包缺失的情况下才访问yum或apt源，避免了重启ZStack和升级ZStack过程中，由于访问外网抖动导致的物理机重连失败的问题，提高了系统的稳定性。新的部署工具也会检查Python依赖，解决了升级过程中consoleproxy依赖的websockify重复编译问题，升级consoleproxy的部署时间从原来的5分钟缩减到了4秒。&lt;/p&gt;

&lt;h3 id=&quot;consoleproxy&quot;&gt;2. ConsoleProxy重连API &lt;/h3&gt;


&lt;p&gt;在1.1版本中，我们加入了console proxy的重连和查询API，用户不再需要通过重启ZStack来重新部署console proxy。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt;QueryConsoleProxyAgent 
    {
        &quot;inventories&quot;: [
            {
                &quot;createDate&quot;: &quot;Mar 26, 2016 12:53:17 PM&quot;,
                &quot;description&quot;: &quot;Console proxy agent running on the management node[uuid:ae80b109e9ca4f4c81191cd2ffe43000]&quot;,
                &quot;lastOpDate&quot;: &quot;Mar 26, 2016 12:53:22 PM&quot;,
                &quot;managementIp&quot;: &quot;172.20.12.46&quot;,
                &quot;state&quot;: &quot;Enabled&quot;,
                &quot;status&quot;: &quot;Connected&quot;,
                &quot;type&quot;: &quot;ManagementServerConsoleProxy&quot;,
                &quot;uuid&quot;: &quot;ae80b109e9ca4f4c81191cd2ffe43000&quot;
            }
        ],
        &quot;success&quot;: true
    }

    &amp;gt;&amp;gt;&amp;gt;ReconnectConsoleProxyAgent 
    {
        &quot;inventory&quot;: {
            &quot;ae80b109e9ca4f4c81191cd2ffe43000&quot;: true
        },
        &quot;success&quot;: true
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;timeout&quot;&gt;3. API超时管理框架&lt;/h3&gt;


&lt;p&gt;ZStack所有功能由大量相互独立的微服务实现，服务之间使用异步消息通信，通常一个API会涉及到多个消息以及跟Agent端的HTTP调用，超时管理成为一个难题。在1.1版本中，我们加入了统一的API超时管理框架，用户无需关心底层细节。在当前版本中，用户如果需要改变默认的API超时，暂时还需要通过zstack.properties文件来改变，例如需要改变AddImage的API超时为6个小时，需要在zstack.properties添加如下配置：&lt;/p&gt;

&lt;p&gt;ApiTimeout.org.zstack.header.image.APIAddImageMsg= org.zstack.header.storage.backup.DownloadImageMsg, org.zstack.storage.backup.sftp.SftpBackupStorageCommands$DownloadCmd, org.zstack.storage.ceph.backup.CephBackupStorageBase$DownloadCmd; 6h&lt;/p&gt;

&lt;p&gt;NOTE：目前我们为所有耗时的API都设置了默认3小时的超时时间，用户在如无特殊需要，不建议通过配置的方式进行修改。我们在1.2版本会新加超时管理API，用户可以直接通过API来设定相应操作的超时时间。&lt;/p&gt;

&lt;h3 id=&quot;reclaim&quot;&gt;4. 垃圾回收机制&lt;/h3&gt;


&lt;p&gt;在1.1版本中，我们全面开启了跟虚拟机相关的垃圾回收器，可以自动回收由于网络故障、物理机故障导致的遗留资源，而不阻碍用户操作。&lt;/p&gt;

&lt;p&gt; 场景：&lt;/p&gt;

&lt;p&gt;物理机网络失联导致用户无法删除该物理机上运行的虚拟机。在早前的ZStack版本中，用户需要等待物理机网络恢复后再执行删除操作。有了垃圾回收器后，用户可以直接删除虚拟机，后台会记录该删除操作。垃圾回收器会在物理机网络恢复后自动触发，执行未完成的操作。&lt;/p&gt;

&lt;p&gt;目前已经启动的垃圾回收器包括云主机、云盘、快照，更多的垃圾回收器会在未来版本中逐一开放。&lt;/p&gt;

&lt;p&gt;ZStack的垃圾回收器非常智能，支持时间轮询和事件触发，其中事件触发支持多种关联事件。例如在前面的例子中，如果管理员在物理机网络恢复前又删除了该物理机，垃圾回收器也会被触发，清除之前提交的删除该物理机上虚拟机的任务。&lt;/p&gt;

&lt;h3 id=&quot;virtualrouter&quot;&gt;5. 新虚拟路由（Virtual Router）镜像&lt;/h3&gt;


&lt;p&gt;VirtualRouter image 更新到了 zstack-virtualrouter-1.1.0.qcow2 .我们除了更新了VirtualRouter 对应的services外，还提高了VirtualRouter的安全访问方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;修改了virtual router 默认的密码，原先的默认密码是 password。以后用户无法用密码登录Virtual Router&lt;/li&gt;
&lt;li&gt;使用了用户特别的 SSH public key。 这个public key是用户在安装ZStack的时候自动产生的，可以保证每个用户都是用不同的SSH key。 用户可以使用私有的 SSH private key从Virtual Router的管理网络登录。 该SSH private key 默认存放在管理节点： /usr/local/zstack/apache-tomcat/webapps/zstackWEB-INF/classes/ansible/rsaKeys/id_rsa&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;用户可以下载并替换原有VirtualRouter Image: http://download.zstack.org/templates/zstack-virtualrouter-1.1.0.qcow2&lt;/p&gt;

&lt;p&gt;替换原有VirtualRouter的方法是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;从UI上下载最新的VirtualRouter image，例如命名为 zstack-vr-1.1-image&lt;/li&gt;
&lt;li&gt;从镜像服务器删除老的VirtualRouter Image&lt;/li&gt;
&lt;li&gt;删除老的VirtualRouter Offering&lt;/li&gt;
&lt;li&gt;创建新的VirtualRouter Offering，并且选择新下载的zstack-vr-1.1-image做为VirtualRouter Offering的镜像。其他网络配置不变。&lt;/li&gt;
&lt;li&gt;从UI面板的Virtual Router菜单中删除现有的VirtualRouter VM&lt;/li&gt;
&lt;li&gt;选择使用VR的L3网络重新创建一个普通VM，ZStack就会使用新的Virtual Router镜像创建一个新的虚拟路由。&lt;/li&gt;
&lt;/ol&gt;


&lt;h3 id=&quot;zstackimage&quot;&gt;6. 15M超小试用镜像--支持动态添加删除云盘和网络 &lt;/h3&gt;


&lt;p&gt;在1.1我们为ZStack专门构建了一个只有15M的测试镜像，支持网络、SSHD，用户可以用它来做一些基本测试。相比于之前的1.0的测试镜像，该镜像支持了动态添加删除云盘和网络。下载链接：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     http://download.zstack.org/templates/zstack-image-1.2.qcow2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;感谢Robert Yang(@linuxer)提供该镜像!&lt;/p&gt;

&lt;h3 id=&quot;migration&quot;&gt; 7. 修复CentOS7.2 物理机无法热迁移VM的bug&lt;/h3&gt;


&lt;p&gt;CentOS7.2 修改了热迁移VM的libvirt的相关代码，导致如果用户没有显示的设置物理机Hostname的情况下，云主机无法热迁移。ZStack以及给RedHat报告了问题。
不过在ZStack 1.1中，我们做了特别的改动来避免CentOS7.2 的这个bug。&lt;/p&gt;

&lt;h3 id=&quot;install&quot;&gt; 8. 安装 &lt;/h3&gt;


&lt;p&gt;你可以通过下面方式安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.1/1.1.0/rc1/zstack-installer-1.1.0-rc1.bin -O zstack-installer-1.1.0-rc1.bin
    bash zstack-installer-1.1.0-rc1.bin -R aliyun
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;这里&lt;code&gt;-R aliyun&lt;/code&gt;参数指定使用阿里云的源进行安装，你也可以使用&lt;code&gt;-R 163&lt;/code&gt;使用网易的源。我们推荐使用阿里云的源&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;upgrade&quot;&gt; 9. 升级 &lt;/h3&gt;


&lt;p&gt;一如既往的，我们支持一键无缝升级：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.1/1.1.0/rc1/zstack-installer-1.1.0-rc1.bin -O zstack-installer-1.1.0-rc1.bin
    bash zstack-installer-1.1.0-rc1.bin -u
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;upgradenetwork&quot;&gt; 10. 用Flat Network Provider替换Virtual Router Provider &lt;/h3&gt;


&lt;p&gt;如果你的网络模式是扁平网络，并且使用的是Virtual Rotuer Provider作为网络提供商，你可以使用1.0的Flat Network Provider替换它，这样你就不再需要virtual router VM来充当DHCP服务器了。假定你要替换网络提供商的L3网络的UUID是1a82c2691978476fa6cefa36bb9d4bfd，参考以下步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获得当前L3网络的网络提供商UUID&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceL3NetworkRef l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd
 {
     &quot;inventories&quot;: [
         {
             &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
             &quot;networkServiceType&quot;: &quot;DNS&quot;
         },
         {
             &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
             &quot;networkServiceType&quot;: &quot;DHCP&quot;
         }
     ],
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从L3网络上卸载Virtual Router Provider&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;DetachNetworkServiceFromL3Network  l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;:[&quot;DHCP&quot;,&quot;DNS&quot;]}&#39;
 {
     &quot;inventory&quot;: {
         &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;dns&quot;: [
             &quot;8.8.8.8&quot;
         ],
         &quot;ipRanges&quot;: [
             {
                 &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                 &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;name&quot;: &quot;ipr-dk7p&quot;,
                 &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                 &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                 &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
             }
         ],
         &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;name&quot;: &quot;l3-etpz&quot;,
         &quot;networkServices&quot;: [],
         &quot;state&quot;: &quot;Enabled&quot;,
         &quot;system&quot;: false,
         &quot;type&quot;: &quot;L3BasicNetwork&quot;,
         &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
         &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
     },
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;注意这里的参数networkServices是一个map， key是第一步里返回的networkServiceProviderUuid，value是第一步里返回的networkServiceType&lt;/p&gt;&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获得Flat Network Provider的UUID&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceProvider type=Flat
 {
     &quot;inventories&quot;: [
         {
             &quot;attachedL2NetworkUuids&quot;: [
                 &quot;9ec8cad681d1424fa7eda2447edae142&quot;
             ],
             &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
             &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
             &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
             &quot;networkServiceTypes&quot;: [
                 &quot;DHCP&quot;,
                 &quot;Userdata&quot;
             ],
             &quot;type&quot;: &quot;Flat&quot;,
             &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
         }
     ],
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获得承载L3网络的L2网络的UUID&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryL3Network fields=l2NetworkUuid, uuid=1a82c2691978476fa6cefa36bb9d4bfd
 {
     &quot;inventories&quot;: [
         {
             &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;
         }
     ],
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加载Flat Network Provider到L2网络&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceProviderToL2Network l2NetworkUuid=9ec8cad681d1424fa7eda2447edae142 networkServiceProviderUuid=17864f985e584a9ba4cd81de215212ce
 {
     &quot;inventory&quot;: {
         &quot;attachedL2NetworkUuids&quot;: [
             &quot;9ec8cad681d1424fa7eda2447edae142&quot;
         ],
         &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
         &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
         &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
         &quot;networkServiceTypes&quot;: [
             &quot;DHCP&quot;,
             &quot;Userdata&quot;
         ],
         &quot;type&quot;: &quot;Flat&quot;,
         &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
     },
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加载Flat Network Provider的服务到三层网络&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceToL3Network l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;17864f985e584a9ba4cd81de215212ce&quot;:[&quot;DHCP&quot;,&quot;Userdata&quot;]}&#39;
 {
     &quot;inventory&quot;: {
         &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;dns&quot;: [
             &quot;8.8.8.8&quot;
         ],
         &quot;ipRanges&quot;: [
             {
                 &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                 &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;name&quot;: &quot;ipr-dk7p&quot;,
                 &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                 &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                 &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
             }
         ],
         &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;name&quot;: &quot;l3-etpz&quot;,
         &quot;networkServices&quot;: [
             {
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                 &quot;networkServiceType&quot;: &quot;DHCP&quot;
             },
             {
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                 &quot;networkServiceType&quot;: &quot;Userdata&quot;
             }
         ],
         &quot;state&quot;: &quot;Enabled&quot;,
         &quot;system&quot;: false,
         &quot;type&quot;: &quot;L3BasicNetwork&quot;,
         &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
         &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
     },
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除virtualrouter ,删除virtual router offering&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryVirtualRouterVm
 {
     &quot;inventories&quot;: [
         {
             &quot;allVolumes&quot;: [
                 {
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;description&quot;: &quot;Root volume for VM[uuid:c5a966cb87d644649952daf683f89e26]&quot;,
                     &quot;deviceId&quot;: 0,
                     &quot;format&quot;: &quot;qcow2&quot;,
                     &quot;installPath&quot;: &quot;/zstack_ps/rootVolumes/acct-36c27e8ff05c4780bf6d2fa65700f22e/vol-8eeaa9cb4c1045a2825f8815fed69d72/8eeaa9cb4c1045a2825f8815fed69d72.qcow2&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:59 PM&quot;,
                     &quot;name&quot;: &quot;ROOT-for-virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;primaryStorageUuid&quot;: &quot;4bff4e2d266f480ead596752d14ff3b5&quot;,
                     &quot;rootImageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
                     &quot;size&quot;: 467206656,
                     &quot;state&quot;: &quot;Enabled&quot;,
                     &quot;status&quot;: &quot;Ready&quot;,
                     &quot;type&quot;: &quot;Root&quot;,
                     &quot;uuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
                     &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                 }
             ],
             &quot;allocatorStrategy&quot;: &quot;LeastVmPreferredHostAllocatorStrategy&quot;,
             &quot;applianceVmType&quot;: &quot;VirtualRouter&quot;,
             &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
             &quot;cpuNum&quot;: 1,
             &quot;cpuSpeed&quot;: 2,
             &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
             &quot;defaultRouteL3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;hostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
             &quot;hypervisorType&quot;: &quot;KVM&quot;,
             &quot;imageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
             &quot;instanceOfferingUuid&quot;: &quot;9cec7bd6324445a184351ffb7d32f970&quot;,
             &quot;lastHostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:07:20 PM&quot;,
             &quot;managementNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;memorySize&quot;: 536870912,
             &quot;name&quot;: &quot;virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;platform&quot;: &quot;Linux&quot;,
             &quot;publicNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;rootVolumeUuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
             &quot;state&quot;: &quot;Running&quot;,
             &quot;status&quot;: &quot;Connected&quot;,
             &quot;type&quot;: &quot;ApplianceVm&quot;,
             &quot;uuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;,
             &quot;vmNics&quot;: [
                 {
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;deviceId&quot;: 0,
                     &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                     &quot;ip&quot;: &quot;192.168.201.195&quot;,
                     &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;mac&quot;: &quot;fa:4c:01:68:77:00&quot;,
                     &quot;metaData&quot;: &quot;7&quot;,
                     &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                     &quot;uuid&quot;: &quot;c44e856aa88a42bc85ec30ce8c334c6c&quot;,
                     &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                 }
             ],
             &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
         }
     ],
     &quot;success&quot;: true
 }

 &amp;gt;&amp;gt;&amp;gt;DestroyVmInstance uuid=c5a966cb87d644649952daf683f89e26
 {
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重连所有有VM运行的host&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryHost
 {
     &quot;inventories&quot;: [
         {
             &quot;availableCpuCapacity&quot;: 7180,
             &quot;availableMemoryCapacity&quot;: 1997570048,
             &quot;clusterUuid&quot;: &quot;4282fb61aa55458ea160de138e130298&quot;,
             &quot;createDate&quot;: &quot;Jan 30, 2016 2:51:13 PM&quot;,
             &quot;hypervisorType&quot;: &quot;KVM&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:20 PM&quot;,
             &quot;managementIp&quot;: &quot;192.168.200.187&quot;,
             &quot;name&quot;: &quot;host1&quot;,
             &quot;state&quot;: &quot;Enabled&quot;,
             &quot;status&quot;: &quot;Connected&quot;,
             &quot;totalCpuCapacity&quot;: 7182,
             &quot;totalMemoryCapacity&quot;: 2098233344,
             &quot;username&quot;: &quot;root&quot;,
             &quot;uuid&quot;: &quot;402f8304a50c410486e023512492316b&quot;,
             &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
         },
         {
             &quot;availableCpuCapacity&quot;: 14363,
             &quot;availableMemoryCapacity&quot;: 8321593344,
             &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
             &quot;createDate&quot;: &quot;Jan 30, 2016 3:03:14 PM&quot;,
             &quot;hypervisorType&quot;: &quot;KVM&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:52 PM&quot;,
             &quot;managementIp&quot;: &quot;192.168.200.150&quot;,
             &quot;name&quot;: &quot;host2&quot;,
             &quot;state&quot;: &quot;Enabled&quot;,
             &quot;status&quot;: &quot;Connected&quot;,
             &quot;totalCpuCapacity&quot;: 14364,
             &quot;totalMemoryCapacity&quot;: 8371924992,
             &quot;username&quot;: &quot;root&quot;,
             &quot;uuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
             &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
         }
     ],
     &quot;success&quot;: true
 }

 &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=402f8304a50c410486e023512492316b
 {
     &quot;success&quot;: true
 }

 &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=415fa093b34e4a3d873368104b127115
 {
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 26 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/v1.1-rc1.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/v1.1-rc1.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
      <item>
        <title>ZStack v1.0.4发布</title>
        <description>&lt;h2&gt;ZStack 1.0.4 版本今天发布&lt;/h2&gt;

&lt;p&gt;ZStack 1.0.4 版本今天发布，在该版本中我们修复了一个潜在的严重bug，&lt;strong&gt;该bug可能导致在删除云主机(还未执行彻底删除)的时候，该云主机的磁盘快照被删除，该bug在1.0版本后引入，我们建议所有ZStack用户升级你们的系统到1.0.4版本&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;此外我们还修复了zstack-dashboard上模糊查询不工作的bug.&lt;/p&gt;

&lt;h3&gt;BUG描述&lt;/h3&gt;

&lt;p&gt;该Bug并不会影响通常情况的云主机使用,但是在尝试恢复一个已经被删除的,并且创建过根云盘快照的云主机的时候会发生错误.
该Bug的具体现象如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;用户创建云主机&lt;/li&gt;
&lt;li&gt;用户给云主机的根云盘创建了快照&lt;/li&gt;
&lt;li&gt;用户删除云主机&lt;/li&gt;
&lt;li&gt;用户恢复云主机&lt;/li&gt;
&lt;li&gt;用户启动该云主机,会发生启动失败,原因是云盘快照已经被删除.&lt;/li&gt;
&lt;/ol&gt;


&lt;h3 id=&quot;install&quot;&gt; 安装 &lt;/h3&gt;


&lt;p&gt;你可以通过下面方式安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.0/1.0.4/zstack-installer-1.0.4.bin -O zstack-installer-1.0.4.bin
    bash zstack-installer-1.0.4.bin -R aliyun
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;这里&lt;code&gt;-R aliyun&lt;/code&gt;参数指定使用阿里云的源进行安装，你也可以使用&lt;code&gt;-R 163&lt;/code&gt;使用网易的源。我们推荐使用阿里云的源&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;upgrade&quot;&gt; 升级 &lt;/h3&gt;


&lt;p&gt;一如既往的，我们支持一键无缝升级：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.0/1.0.4/zstack-installer-1.0.4.bin -O zstack-installer-1.0.4.bin
    bash zstack-installer-1.0.4.bin -u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;升级多节点的用户,可以参考zstack v0.9的release notes 来升级. 1.0.4版本的zstack.war 文件放置在 http://download.zstack.org/releases/1.0/1.0.4/zstack.war&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;获取更多帮助,请添加ZStack QQ群:410185063&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 17 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/v1.0.4.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/v1.0.4.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
      <item>
        <title>ZStack v1.0.3发布</title>
        <description>&lt;h2&gt;ZStack 1.0.3 版本今天发布&lt;/h2&gt;

&lt;p&gt;ZStack 1.0.3 版本今天发布，在该版本中我们主要修复了无法通过&lt;code&gt;zstack-cli UpdateAccount&lt;/code&gt;正确的修改用户密码的Bug**:&lt;/p&gt;

&lt;h3&gt;BUG描述&lt;/h3&gt;

&lt;p&gt;该Bug的引发过程如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;用户使用zstack-cli 修改用户密码&lt;/li&gt;
&lt;li&gt;zstack-cli UpdateAccount 没有正确的把用户密码设置到数据库.&lt;/li&gt;
&lt;/ol&gt;


&lt;h3 id=&quot;install&quot;&gt; 安装 &lt;/h3&gt;


&lt;p&gt;你可以通过下面方式安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.0/1.0.3/0313/zstack-installer-1.0.3-0313.bin -O zstack-installer-1.0.3.bin
    bash zstack-installer-1.0.3.bin -R aliyun
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;这里&lt;code&gt;-R aliyun&lt;/code&gt;参数指定使用阿里云的源进行安装，你也可以使用&lt;code&gt;-R 163&lt;/code&gt;使用网易的源。我们推荐使用阿里云的源&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;upgrade&quot;&gt; 升级 &lt;/h3&gt;


&lt;p&gt;一如既往的，我们支持一键无缝升级：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.0/1.0.3/0313/zstack-installer-1.0.3-0313.bin -O zstack-installer-1.0.3.bin
    bash zstack-installer-1.0.3.bin -u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;升级多节点的用户,可以参考zstack v0.9的release notes 来升级.zstack.war 文件放置在 http://download.zstack.org/releases/1.0/1.0.3/0313/zstack.war&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;获取更多帮助,请添加ZStack QQ群:410185063&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 12 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/v1.0.3.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/v1.0.3.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
      <item>
        <title>ZStack v1.0.2发布</title>
        <description>&lt;h2&gt;ZStack 1.0.2 版本今天发布&lt;/h2&gt;

&lt;p&gt;ZStack 1.0.2 版本今天发布，在该版本中我们修复了一个严重的bug，&lt;strong&gt;该bug可能导致在删除二层网络的时候，磁盘快照被删除，该bug在0.8版本后引入，我们建议所有ZStack用户升级你们的系统到1.0.2版本&lt;/strong&gt;:&lt;/p&gt;

&lt;h3&gt;BUG描述&lt;/h3&gt;

&lt;p&gt;该Bug的引发过程如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;用户删除二层网络&lt;/li&gt;
&lt;li&gt;Cascade Framework下发该操作到子节点资源插件，其中虚拟机插件在接收到该操作时会执行卸载网卡的操作&lt;/li&gt;
&lt;li&gt;虚拟机插件在执行完卸载网卡操作后，&lt;strong&gt;本应该向子资源下发网卡卸载操作，但由于程序逻辑的误判，下发操作变成了删除操作&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;磁盘快照插件接收到删除操作后，删除虚拟机快照。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;由于二层网络删除跟磁盘快照在逻辑上不相关，我们的integration test和system test没有相关用例测试删除二层网络后虚拟机快照的情况，该bug是model based test(基于模型的测试）在长时间运行后的一次偶然情况下发现的。&lt;/p&gt;

&lt;p&gt;该bug修复后我们已经增加了对应的integration test case和system test case来保证将来不会产生regression。这个bug也暴露了我们当前测试系统的不足，model based test虽然可以根据预定义算法产生随机用例进行测试，但它依赖于算法的成功条件定义，发现bug的几率随机性比较大。为此，我们的QA团队已经在构建新型的测试系统 ———— &lt;strong&gt;基于Log分析的测试系统&lt;/strong&gt;。由于ZStack里所有的操作都是message和HTTP request，当我们把log level设置成TRACE时，log可以记录所有操作。这样当执行某个操作时，我们可以通过分析log发现是否有不应该出现的message和HTTP request出现，从而判定系统是否有bug。例如，删除二层网络的操作永远不应该导致删除磁盘快照的message出现，一旦出现系统必有bug。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;该BUG不会导致磁盘(volume)或安全组(security group)被删除&lt;/strong&gt;。磁盘和安全组虽然逻辑上是虚拟机的子资源，但在操作逻辑中它们属于workflow engine而非cascade framework。顾不会受该bug影响。&lt;/p&gt;

&lt;h3&gt;其他Bug&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;修复了在flat network provider模式下，删除IP range没有释放分布式DHCP IP的问题&lt;/li&gt;
&lt;li&gt;修复了删除L3网络后，重新加载L3网络时，虚拟机userdata添加不上的问题&lt;/li&gt;
&lt;/ul&gt;


&lt;h3 id=&quot;install&quot;&gt; 安装 &lt;/h3&gt;


&lt;p&gt;你可以通过下面方式安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.0/1.0.2/zstack-installer-1.0.2.bin -O zstack-installer-1.0.2.bin
    bash zstack-installer-1.0.2.bin -R aliyun
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;这里&lt;code&gt;-R aliyun&lt;/code&gt;参数指定使用阿里云的源进行安装，你也可以使用&lt;code&gt;-R 163&lt;/code&gt;使用网易的源。我们推荐使用阿里云的源&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;upgrade&quot;&gt; 升级 &lt;/h3&gt;


&lt;p&gt;一如既往的，我们支持一键无缝升级：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.0/1.0.2/zstack-installer-1.0.2.bin -O zstack-installer-1.0.2.bin
    bash zstack-installer-1.0.2.bin -u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;升级多节点的用户,可以参考zstack v0.9的release notes 来升级.zstack.war 文件放置在 http://download.zstack.org/releases/1.0/1.0.2/zstack.war&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;获取更多帮助,请添加ZStack QQ群:410185063&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 01 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/v1.0.2.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/v1.0.2.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
  </channel>
</rss>
