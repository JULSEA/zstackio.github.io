<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ZStack</title>
    <description>A open source, scalable, easy IaaS software</description>
    <link>http://zstack.org/</link>
    <atom:link href="http://zstack.org/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 04 Apr 2015 14:56:53 -0700</pubDate>
    <lastBuildDate>Sat, 04 Apr 2015 14:56:53 -0700</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>The Automation Testing System 3: Model-based Testing</title>
        <description>&lt;p&gt;&lt;em&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Model-based_testing&quot;&gt;model-based testing&lt;/a&gt; system
is a sub-project in zstack-woodpecker. With finite-state machines and
action selection strategies, it can generate random API operations that may run forever
unless a defect is found, or pre-defined exit conditions are met. ZStack relies on model-based testing to test
corner cases that hardly happen in real world, which compensates integration testing and
system testing in terms of test coverage.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;p&gt;Test coverage is an important indicator that judges the quality of a testing system. Regular testing methodologies such
as unit testing, integration testing, and system testing all of which are designed by human logical thinking are very hard
to cover corner cases of the software. This problem becomes more obvious in IaaS software that manage different
sub-systems that can lead to complex scenarios.&lt;/p&gt;

&lt;p&gt;ZStack solves this problem by introducing model-based testing that can generate scenarios consisting of random API
combinations that will continuously run until meeting pre-defined exit conditions or finding a defect. As machine driven testing, the
model-based testing can overcome weaknesses of human logical thinking to conduct tests that are seemly human illogical
but API correct, helping discover corner cases that are hard to notice by human leading testing.&lt;/p&gt;

&lt;p&gt;An example may help understand the idea; the model-based testing system used to uncover a bug after executing ~200 APIs; after
debugging, we found the minimal sequence to reproduce the issue is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create a VM&lt;/li&gt;
&lt;li&gt;stop the VM&lt;/li&gt;
&lt;li&gt;create a volume snapshot for the VM's root volume&lt;/li&gt;
&lt;li&gt;create a new data volume template from the VM root volume&lt;/li&gt;
&lt;li&gt;destroy VM&lt;/li&gt;
&lt;li&gt;create a new data volume from the template in step 4&lt;/li&gt;
&lt;li&gt;create a new volume snapshot from the data volume in step 6&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This operating sequence is apparently illogical, we believe no tester will write an integration testing case or system testing
case doing so. This is where machine thinking shines because it doesn't have human feelings and will do things human feels
unreasonable. After finding this bug, we generate a regression test to guard the issue for the future.&lt;/p&gt;

&lt;h3&gt;Model-based Testing System&lt;/h3&gt;

&lt;p&gt;The model-based testing system, as driven by the machine, is also called robot testing. When the system runs, it moves from
one model(also called stage in following sections) to another by executing actions(also called operations) selected
by action selection strategies. After every model is finished, checkers will validate the testing result and test exit
conditions; the system will quit if any failure is discovered or the exit conditions are met. Otherwise, it moves to next
model and repeats.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/testing/model-based-test.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;h4&gt;Finite-state Machine&lt;/h4&gt;

&lt;p&gt;In the theory of model-based testing, there are many ways to generate testing operations, for example, &lt;a href=&quot;http://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;finite-state machine&lt;/a&gt;,
&lt;a href=&quot;http://en.wikipedia.org/wiki/Automated_theorem_proving&quot;&gt;theorem proving&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Model_checking&quot;&gt;model checking&lt;/a&gt;.
We chose to use a finite-state machine because it naturally fits IaaS software that every resource is essentially driven
by states. For example, VM states from user perspective are like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/testing/vm-transition-table.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;In the model-based testing system, states of every resource are pre-defined in &lt;code&gt;test_state.py&lt;/code&gt;, which looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;vm_state_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;vm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RUNNING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;vm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STOPPED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;vm_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESTROYED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;vm_volume_state_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;vm_no_volume_att&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;vm_volume_att_not_full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;vm_volume_att_full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; 
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;volume_state_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;free_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;no_free_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;image_state_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;no_new_template_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;new_template_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;States of all resources in the system make up of a &lt;em&gt;stage&lt;/em&gt;(model); the system can transit from one stage to next stage
by executing operations maintained in the transition table. A stage is defined as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestStage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Test states definition and Test state transition matrix. &lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_current_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_volume_current_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume_current_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image_current_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sg_current_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vip_current_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp_current_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snapshot_live_cap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume_vm_current_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A stage can be represented by an integer that is the sum of all states the stage contains; using the
integer, we can look up the transition table for next candidate operations; an example of the transition table
is like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#state transition table for vm_state, volume_state and image_state&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normal_action_transition_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
        &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reboot_vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destroy_vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;migrate_vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destroy_vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_image_from_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_data_vol_template_from_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
        &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;211&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
      &lt;span class=&quot;mi&quot;&gt;222&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;223&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
      &lt;span class=&quot;mi&quot;&gt;224&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;232&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detach_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;233&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detach_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;244&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;332&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detach_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
      &lt;span class=&quot;mi&quot;&gt;333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detach_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;334&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;342&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detach_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
      &lt;span class=&quot;mi&quot;&gt;343&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detach_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;344&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
     &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_data_volume_from_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By this way, the model-based testing system can keep running from one stage to another until meeting some
pre-defined exit conditions or finding some defect, it can continuously run several days and call APIs
tens of thousands times.&lt;/p&gt;

&lt;h4&gt;Action Selection Strategies&lt;/h4&gt;

&lt;p&gt;When moving amid stages, the model-based testing system needs to decide what the next operation to
perform; the decision maker is called &lt;em&gt;action selection strategy&lt;/em&gt; that is a pluggable engine that various
selection algorithms can be implemented with different intentions.&lt;/p&gt;

&lt;p&gt;Current system has three strategies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Random scheduler&lt;/strong&gt; is the simplest strategy that randomly picks up the next operation from candidates for the current stage.
As a straightforward algorithm, the random scheduler may repeat one operation while keep other operations starving;
to relieve the issue, we enhance each operation with a weight, so testers can give higher weights to operations they
want to test more.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;../../images/blogs/testing/random-scheduler.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fair scheduler&lt;/strong&gt; is the strategy that every candidate operation is treated equally, compensating random scheduler
in the way that every operation has fair chance to be executed, guaranteeing all operations will be tested as long as the
testing period is long enough.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;../../images/blogs/testing/fair-scheduler.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Path coverage scheduler&lt;/strong&gt; is the strategy that decides the next operation by historical data; this strategy will
memorize operation paths that have been tested, and try to choose the next operation that can form a new operation path;
for example, given candidate operations A, B, C, D, if previous operation is B and paths BA, BB, BC all have been
tested, the strategy will choose D as the next operation so path BD can be tested.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;../../images/blogs/testing/path-coverage-scheduler.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;As mentioned before that action selection strategy is a pluggable engine, every strategy actually derives from class
&lt;code&gt;ActionSelector&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActionSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;history_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priority_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;history_actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;history_actions&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action_list&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priority_actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priority_actions&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        New Action Selector need to implement own select() function. &lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_action_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_list&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_priority_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priority_actions&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_history_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;history_actions&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;An implementation example of random scheduler is like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RandomActionSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Base on the priority action list, just randomly pickup action. &lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    If need to set higher priority for some action, it just needs to put them&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    more times in priority_actions list. &lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;history_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priority_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RandomActionSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
                &lt;span class=&quot;n&quot;&gt;history_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priority_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;priority_actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priority_actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_priority_action_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priority_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_action_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_action_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Exit Conditions&lt;/h3&gt;

&lt;p&gt;Before starting the model-based testing system, exit conditions must be set otherwise the system will keep running
until a defect is found, or the log files explode hard drive of the testing machine. Exit conditions can be any forms,
for example, stopping after running 24 hours, stopping when the system has 100 EIPs created, stopping when there are
2 stopped and 8 running VMs; it's all up to testers to define conditions that can augment the chance of finding defects
as big as possible.&lt;/p&gt;

&lt;h3&gt;Failure Replaying&lt;/h3&gt;

&lt;p&gt;Debugging a failure found by model-based testing is hard and frustrating; most failures are uncovered by very large
operation sequences that are usually illogical and with huge lines of logs. We used to reproduce failures manually; after
painfully, manually invoking APIs using &lt;code&gt;zstack-cli&lt;/code&gt; 200 times following a ~500,000 lines log, we finally realized this
miserable job is humanly impossible. Then we invented a tool that can reproduce a failure by replaying the action log
that records test information purely about APIs.&lt;/p&gt;

&lt;p&gt;An action log is like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;Robot Action: create_vm  
 Robot Action Result: create_vm; new VM: fc2c0221be72423ea303a522fd6570e9 
 Robot Action: stop_vm; on VM: fc2c0221be72423ea303a522fd6570e9 
 Robot Action: create_volume_snapshot; on Root Volume: fe839dcb305f471a852a1f5e21d4feda; on VM: fc2c0221be72423ea303a522fd6570e9 
 Robot Action Result: create_volume_snapshot; new SP: 497ac6abaf984f5a825ae4fb2c585a88 
 Robot Action: create_data_volume_template_from_volume; on Volume: fe839dcb305f471a852a1f5e21d4feda;  on VM: fc2c0221be72423ea303a522fd6570e9 
 Robot Action Result: create_data_volume_template_from_volume; new DataVolume Image: fb23cdfce4b54072847a3cfe8ae45d35 
 Robot Action: destroy_vm; on VM: fc2c0221be72423ea303a522fd6570e9 
 Robot Action: create_data_volume_from_image; on Image: fb23cdfce4b54072847a3cfe8ae45d35 
 Robot Action Result: create_data_volume_from_image; new Volume: 20dee895d68b428a88e5ec3d3ef634d8 
 Robot Action: create_volume_snapshot; on Volume: 20dee895d68b428a88e5ec3d3ef634d8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Testers can recreate the failure environment by calling the replaying tool:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;robot_replay.py -f path_to_action_log
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we introduced model-based testing system. As being good at uncovering issues of corner cases, the
model-based testing system works with integration testing system and system testing system as the foundation of defending
ZStack's quality, allowing us to deliver a product with proud confidence.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 May 2015 16:32:03 -0700</pubDate>
        <link>http://zstack.org/blog/model-based-testing.html</link>
        <guid isPermaLink="true">http://zstack.org/blog/model-based-testing.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>The Automation Testing System 2: System Testing</title>
        <description>&lt;p&gt;&lt;em&gt;ZStack's &lt;a href=&quot;http://en.wikipedia.org/wiki/System_testing&quot;&gt;system testing&lt;/a&gt;
system runs test cases in real hardware environment; like integration testing,
the system testing is full automated and covers aspects of functional tests,
stress tests, and performance tests.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;p&gt;Despite the integration testing system we introduced in &lt;a href=&quot;integration-testing.html&quot;&gt;The Automation Testing System 1: Integration Testing&lt;/a&gt;
is powerful to expose a large proportion of bugs in the development process, it has
inherent weaknesses. First, as the test cases use simulators, they cannot
test real scenarios, for example, testing creating a VM on a physical KVM host. Second,
the integration test cases focus on testing a single scenario in a simple, artificial environment; for example, still the
creating VM case, it may only deploy a minimal environment having one host, one L3 network that just meets the requirement
for creating a VM. These weaknesses, however, are deliberate because we want developers can quickly and easily write cases when
they develop a new feature, it's a tradeoff we have to take.&lt;/p&gt;

&lt;p&gt;System testing, which aims to test the whole software in a real, complex environment, compensates integration testing naturally.
ZStack's system testing system is designed for two goals:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Complex scenario&lt;/strong&gt;: scenarios should be more complex than the real world use cases, to test limits of the software. For example,
the attaching/detaching volume case will continuously and repeatedly attach/detach volumes to VMs in a very fast manner that
humans cannot do with their hands.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Easy to write and maintain test cases&lt;/strong&gt;: just like integration testing system, the system testing system takes over most
boring, repeating tasks from testers, letting testers write cases efficiently.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The system testing system is a Python project named as &lt;em&gt;zstack-woodpecker&lt;/em&gt; and is made up of three parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Testing Framework&lt;/strong&gt;: a framework managing all test cases and providing necessary libraries, utilities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Environment deploying tool&lt;/strong&gt;: a tool that can deploy an environment from XML configuration file; it's very similar to
the &lt;code&gt;Deployer&lt;/code&gt; in integration testing system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Modularized test cases&lt;/strong&gt;: test cases are highly modularized and are covering functional test, performance test, and stress test.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;System Testing&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/testing/test-framework.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;zstack-woodpecker&lt;/em&gt; is created all by ourselves; before deciding to reinvent the wheel, we tried popular Python testing
frameworks like &lt;a href=&quot;http://pythontesting.net/framework/nose/nose-introduction/&quot;&gt;nose&lt;/a&gt; and finally selected to create a new tool
that fits our interests best.&lt;/p&gt;

&lt;h4&gt;Suite Configuration&lt;/h4&gt;

&lt;p&gt;Like all other testing frameworks, a test suite in zstack-woodpecker starts with &lt;code&gt;suite setup&lt;/code&gt;, ends with &lt;code&gt;suite teardown&lt;/code&gt;,
and has test cases among them. The &lt;code&gt;suite setup&lt;/code&gt; and &lt;code&gt;suite teardown&lt;/code&gt; are actually two special cases that the &lt;code&gt;suite setup&lt;/code&gt;
is responsible for preparing the environment needed by test cases followed, and that the &lt;code&gt;suite teardown&lt;/code&gt; is responsible for
cleaning up the environment when all cases finish. A typical test suite configuration file looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;integrationTest&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;suite&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;basic test&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;setupCase=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;suite_setup.py&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;teardownCase=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;suite_teardown.py&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parallel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;case&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;timeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;120&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test_create_vm.py&lt;span class=&quot;nt&quot;&gt;&amp;lt;/case&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;case&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;timeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;220&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test_reboot_vm.py&lt;span class=&quot;nt&quot;&gt;&amp;lt;/case&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;case&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;timeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test_add_volume.py&lt;span class=&quot;nt&quot;&gt;&amp;lt;/case&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;case&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;timeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test_add_volume_reboot_vm.py&lt;span class=&quot;nt&quot;&gt;&amp;lt;/case&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;case&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;timeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;400&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test_add_multi_volumes.py&lt;span class=&quot;nt&quot;&gt;&amp;lt;/case&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;case&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;timeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;600&amp;#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;noparallel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;True&amp;#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;resource/test_delete_l2.py&lt;span class=&quot;nt&quot;&gt;&amp;lt;/case&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/suite&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/integrationTest&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Readers with sharp eyes may have noticed some parameters that are not seen in other testing frameworks. The first one is
the &lt;code&gt;timeout&lt;/code&gt;; every test case can define its timeout and if it cannot finish in the period it will be marked as &lt;em&gt;timeout&lt;/em&gt;
in the final result. The second one is &lt;code&gt;repeat&lt;/code&gt; that allows you to specify how many times the case should run within the suite.
The third one that is also the killer one is &lt;code&gt;parallel&lt;/code&gt; that allows tester to set the parallelism level of the suite; this is
the key feature that makes zstack-woodpecker runs test cases very fast; in the above example the &lt;code&gt;parallel&lt;/code&gt; is set to 8, that
means there will be at most 8 cases running simultaneously; this not only speeds up running cases but also creates a complex
scenario that simulates users carrying out different tasks sharing the same environment. However, not all cases can be executed
simultaneously; in our example the case &lt;code&gt;test_delete_l2.py&lt;/code&gt; will delete L2 networks on which are relied by other cases, so it
cannot be executed while other cases are running; this is the situation that the fourth parameter &lt;code&gt;noparallel&lt;/code&gt; plays its role;
once it's set to &lt;code&gt;True&lt;/code&gt;, the case will be executed lonely and no other cases can run at the same time.&lt;/p&gt;

&lt;h4&gt;Command Line Tool&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;zstest.py&lt;/code&gt; is a command line tool that helps testers control the testing framework, doing jobs like starting test suite,
listing test cases and so forth. &lt;code&gt;zstest.py&lt;/code&gt; provides plenty of options assisting testers simplifying their work. A
couple of options, which we use in our daily testing, are particular useful as follows.&lt;/p&gt;

&lt;p&gt;Testers can retrieve available test cases by option &lt;code&gt;-l&lt;/code&gt;, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./zstest.py -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it will show results like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/testing/list-test-case.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;The test suite name is the first level folder name of test cases; for instance, in above picture you see lots of cases beginning
with &lt;code&gt;basic&lt;/code&gt; (e.g. basic/test_reboot_vm.py), yes the &lt;code&gt;basic&lt;/code&gt; is the test suite name. Testers
can start a suite by option &lt;code&gt;-s&lt;/code&gt;, using full suite name or part of suite name as long as it's unique, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./zstest.py -s basic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./zstest.py -s ba
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/testing/run-test-case.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;Testers can also selectively execute cases using their names or IDs, with the option &lt;code&gt;-c&lt;/code&gt;; for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./zstest.py -c 1,6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./zstest.py -c suite_setup,test_add_volume.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;remember you need to run the &lt;code&gt;suite setup&lt;/code&gt; case &lt;code&gt;suite_setup.py&lt;/code&gt; as the first case, unless you have done it manually.&lt;/p&gt;

&lt;p&gt;As a test suite will execute all cases, clean up the environment, and send out a result report, testers sometimes
may want to stop the suite and keep the environment when a case fails, so they can look into the failure and debug; option
&lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-S&lt;/code&gt; are made for this; &lt;code&gt;-n&lt;/code&gt; instructs testing framework not to clean up the environment while &lt;code&gt;-S&lt;/code&gt; asks it to skip
cases not executed; for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./zstest.py -s virutalrouter -n -S
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besides, the option &lt;code&gt;-b&lt;/code&gt; can pull the latest source code and build a brand new &lt;code&gt;zstack.war&lt;/code&gt;, it's particularly useful in
nightly test that is supposed to test newest code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./zstest.py -s virutalrouter -b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once all cases finish, a report is generated and printed out on the screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/testing/test-result.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;The testing framework will keep all logs and will directly print out the absolute path to each failure log if there
are any. In addition to normal logs that record verbose details, there is a special log called &lt;code&gt;action log&lt;/code&gt; that records information
about every API call; because it's the log purely about API, we can easily root cause a failure without being distracted by testing framework logs. Besides, it's an important tool
that can automatically generate a new case to replay the failure, this is the magic weapon we use to debug failures in Model-based
testing that every case executes APIs randomly; you can check out details in &lt;a href=&quot;model-based-testing.html&quot;&gt;The Automation Testing System 3: Model-based Testing&lt;/a&gt;.
A snippet of action log is like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/testing/action-log.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;h4&gt;Environment Deploying Tool&lt;/h4&gt;

&lt;p&gt;Similar to the integration testing, the frequent and repeated task for every test case is preparing the test environment; for example,
case testing creating VM needs to setup dependent resources like zone, cluster, host and so on. zstack-woodpecker leverages &lt;code&gt;zstack-cli&lt;/code&gt;,
which is the command line tool of ZStack to deploy testing environment from an XML configuration file; for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zstack-cli -d zstack-env.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the format of XML configuration file is similar to what integration testing uses; a snippet of the configuration is like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;zones&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;zone&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$zoneName&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;clusters&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;cluster&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$clusterName&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;hypervisorType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$clusterHypervisorType&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;hosts&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;host&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$hostName&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;managementIp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$hostIp&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;username=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$hostUsername&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$hostPassword&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/hosts&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;primaryStorageRef&amp;gt;&lt;/span&gt;$nfsPrimaryStorageName&lt;span class=&quot;nt&quot;&gt;&amp;lt;/primaryStorageRef&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;l2NetworkRef&amp;gt;&lt;/span&gt;$l2PublicNetworkName&lt;span class=&quot;nt&quot;&gt;&amp;lt;/l2NetworkRef&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;l2NetworkRef&amp;gt;&lt;/span&gt;$l2ManagementNetworkName&lt;span class=&quot;nt&quot;&gt;&amp;lt;/l2NetworkRef&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;l2NetworkRef&amp;gt;&lt;/span&gt;$l2NoVlanNetworkName1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/l2NetworkRef&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;l2NetworkRef&amp;gt;&lt;/span&gt;$l2NoVlanNetworkName2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/l2NetworkRef&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;l2NetworkRef&amp;gt;&lt;/span&gt;$l2VlanNetworkName1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/l2NetworkRef&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;l2NetworkRef&amp;gt;&lt;/span&gt;$l2VlanNetworkName2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/l2NetworkRef&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/cluster&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/clusters&amp;gt;&lt;/span&gt;
...
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;l2Networks&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;l2VlanNetwork&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$l2VlanNetworkName1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;guest l2 vlan network&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;physicalInterface=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$l2NetworkPhysicalInterface&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;vlan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$l2Vlan1&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;l3Networks&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;l3BasicNetwork&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$l3VlanNetworkName1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;guest test vlan network with DHCP DNS SNAT PortForwarding EIP and SecurityGroup&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;domain_name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$L3VlanNetworkDomainName1&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;ipRange&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$vlanIpRangeName1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;startIp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$vlanIpRangeStart1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;endIp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$vlanIpRangeEnd1&amp;quot;&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;gateway=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$vlanIpRangeGateway1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;netmask=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$vlanIpRangeNetmask1&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;dns&amp;gt;&lt;/span&gt;$DNSServer&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dns&amp;gt;&lt;/span&gt; 
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;networkService&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;provider=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;VirtualRouter&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;serviceType&amp;gt;&lt;/span&gt;DHCP&lt;span class=&quot;nt&quot;&gt;&amp;lt;/serviceType&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;serviceType&amp;gt;&lt;/span&gt;DNS&lt;span class=&quot;nt&quot;&gt;&amp;lt;/serviceType&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;serviceType&amp;gt;&lt;/span&gt;SNAT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/serviceType&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;serviceType&amp;gt;&lt;/span&gt;PortForwarding&lt;span class=&quot;nt&quot;&gt;&amp;lt;/serviceType&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;serviceType&amp;gt;&lt;/span&gt;Eip&lt;span class=&quot;nt&quot;&gt;&amp;lt;/serviceType&amp;gt;&lt;/span&gt; 
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;/networkService&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;networkService&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;provider=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SecurityGroup&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;serviceType&amp;gt;&lt;/span&gt;SecurityGroup&lt;span class=&quot;nt&quot;&gt;&amp;lt;/serviceType&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;/networkService&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/l3BasicNetwork&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/l3Networks&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/l2VlanNetwork&amp;gt;&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the deploying tool is usually invoked by &lt;code&gt;suite setup&lt;/code&gt; before running any case. Testers can define variables starting '$' in the XML
configuration and resolve variables in a separate property file; by this way, the XML configuration works as a template that can produce
different environments; an example of property file looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;TEST_ROOT=/usr/local/zstack/root/
zstackPath = $TEST_ROOT/sanitytest/zstack.war
apachePath = $TEST_ROOT/apache-tomcat
zstackPropertiesPath = $TEST_ROOT/sanitytest/conf/zstack.properties
zstackTestAgentPkgPath = $TEST_ROOT/sanitytest/zstacktestagent.tar.gz
masterName = 192.168.0.201
DBUserName = root

node2Name = centos5
node2Ip = 192.168.0.209
node2UserName = root
node2Password = password

node1Name = 192.168.0.201
node1Ip = 192.168.0.201
node1UserName = root
node1Password = password


instanceOfferingName_s = small-vm
instanceOfferingMemory_s = 128M
instanceOfferingCpuNum_s = 1
instanceOfferingCpuSpeed_s = 512

virtualRouterOfferingName_s = virtual-router-vm
virtualRouterOfferingMemory_s = 512M
virtualRouterOfferingCpuNum_s = 2
virtualRouterOfferingCpuSpeed_s = 512

sftpBackupStorageName = sftp
sftpBackupStorageUrl = /export/backupStorage/sftp/
sftpBackupStorageUsername = root
sftpBackupStoragePassword = password
sftpBackupStorageHostname = 192.168.0.220&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: As you may have guessed, the tool can be used for administrators to deploy a cloud from the XML configuration; and what's more,
administrators can do the reverse that dumps a cloud into XML file by &lt;code&gt;zstack-cli -D xml-file-name&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For performance and stress test, the environment usually needs a large number of resources, for example, 100 zones, 1000 clusters.
In order to avoid for example manually repeating 1000 lines of cluster definition in the XML configuration, we introduce a property &lt;code&gt;duplication&lt;/code&gt;
that can help create duplicated resources; for example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;zones&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;zone&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$zoneName&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10 same zones&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;duplication=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;clusters&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;cluster&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$clusterName_sim&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10 same Simulator Clusters&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;duplication=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;hypervisorType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$clusterSimHypervisorType&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;hosts&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;host&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$hostName_sim&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;100 same simulator Test Host&amp;quot;&lt;/span&gt; 
                &lt;span class=&quot;na&quot;&gt;managementIp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$hostIp_sim&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;cpuCapacity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$cpuCapacity&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;memoryCapacity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$memoryCapacity&amp;quot;&lt;/span&gt; 
                &lt;span class=&quot;na&quot;&gt;duplication=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/hosts&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;primaryStorageRef&amp;gt;&lt;/span&gt;$simulatorPrimaryStorageName&lt;span class=&quot;nt&quot;&gt;&amp;lt;/primaryStorageRef&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;l2NetworkRef&amp;gt;&lt;/span&gt;$l2PublicNetworkName&lt;span class=&quot;nt&quot;&gt;&amp;lt;/l2NetworkRef&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;l2NetworkRef&amp;gt;&lt;/span&gt;$l2ManagementNetworkName&lt;span class=&quot;nt&quot;&gt;&amp;lt;/l2NetworkRef&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;l2NetworkRef&amp;gt;&lt;/span&gt;$l2VlanNetworkName1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/l2NetworkRef&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/cluster&amp;gt;&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above example, 100 zones, 1000 cluster (100 zones with 10 clusters in each), and 100,000 hosts (1000 cluster with 100 hosts in each) will be created.
It saves testers a lot of efforts in preparing an environment for complex performance and stress test.&lt;/p&gt;

&lt;h3&gt;Modularized Test Cases&lt;/h3&gt;

&lt;p&gt;Test cases in system testing are highly modularized. Every case essentially performs three steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;creating resources to be tested&lt;/li&gt;
&lt;li&gt;validating result&lt;/li&gt;
&lt;li&gt;cleanup&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;zstack-woodpecker itself provides a comprehensive library helping testers conduct those activities; APIs are well wrapped in
a library automatically generated from ZStack source code; testers don't need to write any raw API call. Checkers, which
validate test results, are also created for every resource; for example, VM checker, volume checker; testers can easily call
those checkers to validate resources they have created without writing tons of lines code; if current checkers cannot satisfy
certain situation, testers can also create their own checkers and plug them into the testing framework.&lt;/p&gt;

&lt;p&gt;A sample of test case is like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;test_util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Create test vm and check&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_stub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_vlan_vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;test_util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Create volume and check&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;disk_offering&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib_get_disk_offering_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;rootDiskOfferingName&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;volume_creation_option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VolumeOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;volume_creation_option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_disk_offering_uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disk_offering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_stub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume_creation_option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;test_util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Attach volume and check&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;test_util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Detach volume and check&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;test_util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_dsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Delete volume and check&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;test_util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Create Data Volume for VM Test Success&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Like the integration testing, testers can work out a case with only tens of lines code. The modularity not only helps simplify
writing test cases, but also develops a solid base for Model-based testing that we will elaborate in the next article.&lt;/p&gt;

&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we introduced our system testing system. By doing more complex tests than real world use cases, the system testing
gives us much confidence that how ZStack will perform in real hardware environment, which lets us be able to evolve quickly to
a mature product.&lt;/p&gt;
</description>
        <pubDate>Fri, 01 May 2015 14:15:28 -0700</pubDate>
        <link>http://zstack.org/blog/system-testing.html</link>
        <guid isPermaLink="true">http://zstack.org/blog/system-testing.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>The Automation Testing System 1: Integration Testing</title>
        <description>&lt;p&gt;&lt;em&gt;Testing is an important factor contributing to reliability, maturity, and maintainability of an IaaS software. Testing in ZStack
is fully automated. The automation testing system consists of three parts: integration testing, system testing, and model-based
testing. The integration testing system is built based on JUnit using simulators. With various utilities the integration testing
system supplies, developers can quickly write test cases to validate a new feature or a bug fix.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;p&gt;The crucial factor in making a reliable, mature, and maintainable software product is the architecture; this is the design principle&lt;br/&gt;
we believe in throughout. ZStack has made a lot of efforts in conceiving an architecture that can keep the software stable from
adding new features, routine operational mistakes, and tailoring for special needs; our former articles &lt;a href=&quot;microservices.html&quot;&gt;The In-Process Microservices Architecture&lt;/a&gt;,
&lt;a href=&quot;plugin.html&quot;&gt;The Versatile Plugin System&lt;/a&gt;, &lt;a href=&quot;workflow.html&quot;&gt;The Workflow Engine&lt;/a&gt;, and &lt;a href=&quot;tag.html&quot;&gt;The Tag System&lt;/a&gt; have revealed some
of our attempts. However, we also fully understand the importance of testing in the software development. ZStack, at the day one,
set the goal that every feature must be guarded by test cases, testing must be entirely automated, and writing test cases should
be the only way to validate a new feature or any code change.&lt;/p&gt;

&lt;p&gt;To achieve the goal, we split our testing system into three components: integration testing, system testing, and model-based testing,
by their focus and functionality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Integration Testing System&lt;/strong&gt; is constructed based on &lt;a href=&quot;http://en.wikipedia.org/wiki/JUnit&quot;&gt;JUnit&lt;/a&gt; all using simulators; test cases reside
in ZStack Java source code; developers can easily use regular JUnit commands to start testing suites.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;System Testing System&lt;/strong&gt; is an individual Python project called &lt;em&gt;zstack-woodpecker&lt;/em&gt;, which is built based on ZStack APIs, and which tests everything
in a real hardware environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Model-based Testing system&lt;/strong&gt; is based on the theory of &lt;a href=&quot;http://en.wikipedia.org/wiki/Model-based_testing&quot;&gt;Model-based Testing&lt;/a&gt; and is a sub-project
in &lt;em&gt;zstack-woodpecker&lt;/em&gt;. Test cases in this system will continuously executing APIs in a random manner until some predefined conditions meet.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Beginning this one, we will have a series of three articles elaborating our testing architecture, to show you the way we guard every
ZStack feature.&lt;/p&gt;

&lt;h3&gt;A little words for unit testing&lt;/h3&gt;

&lt;p&gt;Curious people may have asked in the heart that why we don't mention &lt;a href=&quot;http://en.wikipedia.org/wiki/Unit_testing&quot;&gt;Unit Testing&lt;/a&gt;, which may be
the most famous testing concept every sober testing driven developer will emphasize. We do have unit testing, if you look at the later section
&lt;em&gt;Testing Framework&lt;/em&gt;, you may get puzzled that why names used in commands are called &lt;em&gt;UnitTest&lt;/em&gt; something but this article is named as integration testing.&lt;/p&gt;

&lt;p&gt;Initially we thought our testing is unit testing, because every case is to verify a unique component instead of the whole software; for example,
the case &lt;code&gt;TestCreateZone&lt;/code&gt; only tests the zone service, other components like VM service, storage service will not even get loaded. However, our way
doing the testing does differentiate from the traditional unit testing concept that is to test a small piece of code, that is normally
white box testing that aims to internal structures, and that is using methodology of mocking and stubbing; current ZStack has about 120 cases that match
this definition while the rest 500+ cases don't. Most test cases, even focusing on individual services or components, are more like integration
testing cases that will load multiple dependent services/components in order to conduct a testing activity; for example, to test the VM service, the storage
and network related services must be loaded. On the other side, many our test cases based on simulators are actually testing at the API level, which in
unit testing definition is a black-box testing apt to integration testing. Given those facts, we finally change our mind that
we are doing the integration testing while leaving many old names stay to UnitTest-wise.&lt;/p&gt;

&lt;h3&gt;Integration Testing&lt;/h3&gt;

&lt;p&gt;From our prior experience, we deeply understand that a main reason developers keep ignoring testing is &lt;strong&gt;&lt;em&gt;writing test cases is too hard, sometimes
even harder than implementing a feature&lt;/em&gt;&lt;/strong&gt;. When we design the integration testing system, a deliberate consideration is taking the burden
off developers as much as possible, and letting the system itself do most boring, cumbersome work.&lt;/p&gt;

&lt;p&gt;There are two kind of repeated work for almost every test case. The one is preparing a minimal but workable software; for example, to test creating a zone, you
only need core libraries and the zone service loaded, it's not necessary to load other services as we don't need them. The another is preparing environment; for example,
a case of testing VM creation will need an environment that has a zone, a cluster, a host, storage, networks and all other necessary resources ready;
developers won't want to repeat boring things like creating a zone, adding a host before they can really test their stuff; ideally they can get a ready environment
with minor effort to concentrate on things they want to test.&lt;/p&gt;

&lt;h4&gt;Component Loader&lt;/h4&gt;

&lt;p&gt;We solve all these problems by a framework built upon JUnit. First of all, as ZStack manages all components using &lt;a href=&quot;https://spring.io/&quot;&gt;Spring&lt;/a&gt;,
we create a &lt;code&gt;BeanConstructor&lt;/code&gt; that testers can on demand specify components they want to load:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestCreateZone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Api&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ComponentLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DatabaseFacade&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DBUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reDeployDB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BeanConstructor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;con&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeanConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addXml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;PortalForUnitTest.xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addXml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ZoneManager.xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addXml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;AccountManager.xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dbf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DatabaseFacade&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In above example, we add three Spring configuration files to &lt;code&gt;BeanConstructor&lt;/code&gt;, which implied by their names will load components for
the account service, the zone service, and other necessary libraries included in &lt;code&gt;PortalForUnitTest.xml&lt;/code&gt;. By this way, testers can tailor
the software to a minimal size that only contains needed components, in order to fast the testing process and make things easy to debug.&lt;/p&gt;

&lt;h4&gt;Environment Deployer&lt;/h4&gt;

&lt;p&gt;To help testers prepare an environment that has all necessary dependencies for activities to be tested, we create a &lt;code&gt;Deployer&lt;/code&gt; that
can read an XML configuration file to deploy a complete simulator environment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestCreateVm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Deployer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deployer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Api&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ComponentLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CloudBus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DatabaseFacade&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DBUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reDeployDB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;deployer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Deployer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;deployerXml/vm/TestCreateVm.xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;deployer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deployer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deployer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getComponentLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CloudBus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dbf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DatabaseFacade&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiSenderException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;InstanceOfferingInventory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioinv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listInstanceOffering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ImageInventory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iminv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;VmInstanceInventory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listVmInstances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstanceOfferingUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioinv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getImageUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iminv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VmInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Running&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getVmNics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;VmInstanceVO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VmInstanceVO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VmInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Running&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VmNicInventory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getVmNics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;VmNicVO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nvo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VmNicVO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nvo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;VolumeVO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRootVolumeUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VolumeVO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VolumeInventory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAllVolumes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VolumeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;VolumeVO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VolumeVO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In above TestCreateVm case, the deployer read a configuration file at &lt;em&gt;deployerXml/vm/TestCreateVm.xml&lt;/em&gt; and deploy a full environment
that is ready to create a new VM; what is more, we actually let the deployer create the VM, as you don't see any code in
method &lt;code&gt;test&lt;/code&gt; calling &lt;code&gt;api.createVmByFullConfig()&lt;/code&gt;; what the tester really does is verifying the VM is correctly created with
conditions we specify in &lt;em&gt;deployerXml/vm/TestCreateVm.xml&lt;/em&gt;. Now you see how easy it is, the tester only writes ~60 lines code and
have the most important part of IaaS software -- creating VM tested.&lt;/p&gt;

&lt;p&gt;The configuration file TestCreateVm.xml in above example is like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;deployerConfig&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://zstack.org/schema/zstack&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;instanceOfferings&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;instanceOffering&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestInstanceOffering&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;memoryCapacity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;3G&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cpuNum=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cpuSpeed=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;3000&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/instanceOfferings&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;backupStorages&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;simulatorBackupStorage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestBackupStorage&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nfs://test&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/backupStorages&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;images&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;image&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestImage&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;simulator&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;backupStorageRef&amp;gt;&lt;/span&gt;TestBackupStorage&lt;span class=&quot;nt&quot;&gt;&amp;lt;/backupStorageRef&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/image&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/images&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;diskOffering&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestRootDiskOffering&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;diskSize=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;50G&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;diskOffering&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestDataDiskOffering&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;diskSize=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;120G&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;vm&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;userVm&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestVm&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;rootDiskOfferingRef&amp;gt;&lt;/span&gt;TestRootDiskOffering&lt;span class=&quot;nt&quot;&gt;&amp;lt;/rootDiskOfferingRef&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;imageRef&amp;gt;&lt;/span&gt;TestImage&lt;span class=&quot;nt&quot;&gt;&amp;lt;/imageRef&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;instanceOfferingRef&amp;gt;&lt;/span&gt;TestInstanceOffering&lt;span class=&quot;nt&quot;&gt;&amp;lt;/instanceOfferingRef&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;l3NetworkRef&amp;gt;&lt;/span&gt;TestL3Network1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/l3NetworkRef&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;l3NetworkRef&amp;gt;&lt;/span&gt;TestL3Network2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/l3NetworkRef&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;l3NetworkRef&amp;gt;&lt;/span&gt;TestL3Network3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/l3NetworkRef&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;defaultL3NetworkRef&amp;gt;&lt;/span&gt;TestL3Network1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/defaultL3NetworkRef&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;diskOfferingRef&amp;gt;&lt;/span&gt;TestDataDiskOffering&lt;span class=&quot;nt&quot;&gt;&amp;lt;/diskOfferingRef&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/userVm&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/vm&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;zones&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;zone&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestZone&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;clusters&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;cluster&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestCluster&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;hosts&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;simulatorHost&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestHost1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;managementIp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10.0.0.11&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;memoryCapacity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;8G&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cpuNum=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;4&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cpuSpeed=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2600&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;simulatorHost&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestHost2&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;managementIp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10.0.0.12&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;memoryCapacity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;4G&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cpuNum=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;4&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cpuSpeed=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2600&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/hosts&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;primaryStorageRef&amp;gt;&lt;/span&gt;TestPrimaryStorage&lt;span class=&quot;nt&quot;&gt;&amp;lt;/primaryStorageRef&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;l2NetworkRef&amp;gt;&lt;/span&gt;TestL2Network&lt;span class=&quot;nt&quot;&gt;&amp;lt;/l2NetworkRef&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/cluster&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/clusters&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;l2Networks&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;l2NoVlanNetwork&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestL2Network&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;physicalInterface=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;eth0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;l3Networks&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;l3BasicNetwork&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestL3Network1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ipRange&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestIpRange1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;startIp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10.0.0.100&amp;quot;&lt;/span&gt;
                                &lt;span class=&quot;na&quot;&gt;endIp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10.10.1.200&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;gateway=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10.0.0.1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;netmask=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;255.0.0.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/l3BasicNetwork&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;l3BasicNetwork&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestL3Network2&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ipRange&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestIpRange2&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;startIp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10.10.2.100&amp;quot;&lt;/span&gt;
                                &lt;span class=&quot;na&quot;&gt;endIp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10.20.2.200&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;gateway=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10.10.2.1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;netmask=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;255.0.0.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/l3BasicNetwork&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;l3BasicNetwork&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestL3Network3&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ipRange&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestIpRange3&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;startIp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10.20.3.100&amp;quot;&lt;/span&gt;
                                &lt;span class=&quot;na&quot;&gt;endIp=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10.30.3.200&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;gateway=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;10.20.3.1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;netmask=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;255.0.0.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/l3BasicNetwork&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/l3Networks&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/l2NoVlanNetwork&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/l2Networks&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;primaryStorages&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;simulatorPrimaryStorage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestPrimaryStorage&amp;quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;totalCapacity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1T&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nfs://test&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/primaryStorages&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;backupStorageRef&amp;gt;&lt;/span&gt;TestBackupStorage&lt;span class=&quot;nt&quot;&gt;&amp;lt;/backupStorageRef&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/zone&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/zones&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/deployerConfig&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Simulator&lt;/h4&gt;

&lt;p&gt;Most integration testing cases are built on simulators; every resource that needs to communicate with backend devices has a simulator implementation;
for example, KVM simulator, virtual router VM simulator, NFS primary storage simulator. Because current resource backend are all Python based
HTTP servers, most simulators are constructed using Apache Tomcat embedded HTTP server. A snippet of KVM simulator is like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KVMConstant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;KVM_MERGE_SNAPSHOT_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mergeSnapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HttpEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;httpServletRequestToHttpEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MergeSnapshotCmd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSONObjectUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MergeSnapshotCmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MergeSnapshotRsp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MergeSnapshotRsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mergeSnapshotSuccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;on purpose&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSuccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;snapshotKvmSimulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSrcPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDestPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFullRebase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mergeSnapshotCmds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;replyer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KVMConstant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;KVM_TAKE_VOLUME_SNAPSHOT_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;takeSnapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HttpEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;httpServletRequestToHttpEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TakeSnapshotCmd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSONObjectUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TakeSnapshotCmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TakeSnapshotResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TakeSnapshotResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;snapshotSuccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;snapshotCmds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshotKvmSimulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;takeSnapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;on purpose&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSuccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;replyer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Every simulator has a configuration object like &lt;code&gt;KVMSimulatorConfig&lt;/code&gt; that testers can use to control simulator behaviors.&lt;/p&gt;

&lt;h4&gt;Testing Framework&lt;/h4&gt;

&lt;p&gt;As all test cases are actually JUnit test cases, testers can run each case individually using normal JUnit commands, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost test]# mvn test -Dtest=TestAddImage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And all cases in a test suite can be executed in one command, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost test]# mvn test -Dtest=UnitTestSuite 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/testing1.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;Cases can also be executed in a group, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost test]# mvn test -Dtest=UnitTestSuite -Dconfig=unitTestSuiteXml/eip.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An XML configuration file lists cases in the group, for example, the above eip.xml is like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;UnitTestSuiteConfig&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://zstack.org/schema/zstack&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;timeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;120&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip1&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip2&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip3&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip4&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip5&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip6&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip7&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip8&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip9&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip10&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip11&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip12&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip13&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip14&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip15&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip16&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip17&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip18&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip19&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip20&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip21&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip22&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip23&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip24&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestVirtualRouterEip25&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestQueryEip1&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TestCase&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.test.eip.TestEipPortForwardingAttachableNic&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/UnitTestSuiteConfig&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Multiple cases can also be executed in one command by feeding their names, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost test]# mvn test -Dtest=UnitTestSuite -Dcases=TestAddImage,TestCreateTemplateFromRootVolume,TestCreateDataVolume
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we introduced the first part of ZStack automation testing system -- integration testing. With it, developers
can write code with 100% confidence. And writing test cases is no longer a daunting and boring task; developers can finish most
cases with less than 100 lines code, which is easy and efficient;&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Apr 2015 14:14:07 -0700</pubDate>
        <link>http://zstack.org/blog/integration-testing.html</link>
        <guid isPermaLink="true">http://zstack.org/blog/integration-testing.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Storage Model: Primary Storage and Backup Storage</title>
        <description>&lt;p&gt;&lt;em&gt;ZStack abstracts storage systems, by their logical functionality, into primary storage and backup storage. A primary storage is a storage
pool on which VM volumes locate; a backup storage is the storage that users store image templates and backup volumes and
snapshots. Primary storage and backup storage can be physically separate storage systems or the same storage system playing both roles, storage
vendors can easily plug in their products by implementing corresponding storage plugins.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;p&gt;Storage systems in a cloud can be divided into two categories by their logical functionality. One class works as storage pools
that store volumes of VMs and will be accessed by running VMs; this kind of storage can be filesystem based that
volumes are stored as files, or block storage based that volumes are block devices. In ZStack terms,
this sort of storage is called as &lt;strong&gt;Primary Storage&lt;/strong&gt; which can be either network shared storage such as NFS, ISCSI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/storage1.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;or local storage such as hard drives of physical hosts:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/storage2.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;Another class of storage system works as warehouses that store image templates containing operating systems, and that backup
volumes and snapshots; this kind of storage can be filesystem based that entities are stored as files,
or object-store based that entities are stored as objects. In ZStack terms, this sort of storage is called as &lt;strong&gt;Backup Storage&lt;/strong&gt; that
is not directly accessible to VMs, and that can be only network shared storage:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/storage3.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;Both primary storage and backup storage are logical concepts, in reality, they can be individual storage systems using totally
different protocols, for example, ISCSI primary storage and NFS backup storage, or the same storage system that can play pair roles,
for example, &lt;a href=&quot;http://ceph.com/&quot;&gt;ceph&lt;/a&gt;, whose block part is competent for primary storage while object part can take the role of backup storage.
Storage vendors can easily plug in their storage systems in ZStack by implementing storage plugins, for both primary storage and backup storage.&lt;/p&gt;

&lt;h3&gt;Implementation inside&lt;/h3&gt;

&lt;p&gt;Primary storage and backup storage are not working separately; they need to cooperate with each other in order to conduct storage
relevant activities. The most important activity is for creating a new VM; when a VM is the first time created on a primary storage, its
image template will be downloaded from a backup storage to the image cache of the primary storage; as most hypervisors use a technology
called &lt;a href=&quot;https://www.vmware.com/support/ws55/doc/ws_clone_overview.html&quot;&gt;linked clone&lt;/a&gt;, once the image template has been downloaded,
it works as a base volume for all VMs using the same image template and having the root volume in the same primary storage;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/storage4.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;Besides downloading template, primary storage can also upload entities like volumes, snapshots to backup storage; those
uploading activities are all backup related; for example, when users backup a data volume, a copy of the data volume will be uploaded
to a backup storage as an image template, which can be downloaded to a primary storage later for creating new data volumes.&lt;/p&gt;

&lt;p&gt;In the source code, primary storage and backup storage are implemented in different plugins. In terms of complexity, backup storage
is more straightforward because they only deal with own business. The major activities of backup storage are downloading, uploading, and deleting.
A backup storage needs to define protocols that how primary storage download and upload entities, but it doesn't need to know details of
primary storage, because it's responsibility of primary storage to use these protocols to conduct these activities. Besides, backup storage must
implement protocols allowing the image service to register and delete image templates. Similar to all other resources, the backup storage has an abstract base
class &lt;code&gt;BackupStorageBase&lt;/code&gt; that has already implemented most generic business logic, vendors only need to implement operations that directly relates to
their backend storage systems, usually by invoking SDK or calling agents.&lt;/p&gt;

&lt;p&gt;Primary storage is more complex. The complexity stems from the fact that its business logic is not only backup storage dependent but also hypervisor
specific. A primary storage, first of all, must understand protocols of backup storage to download and upload entities; for instance, a NfsPrimaryStorage
must know the protocols of SftpBackupStorage, AmazonS3BackupStorage, and SwiftBackupStorage if it plans to support all of them. On the other side, the usages
of protocols to the same backup storage vary for different hypervisors; for example, NfsPrimaryStorage can call the KVM agent to download an image
template from AmazonS3BackupStorage using &lt;a href=&quot;http://s3tools.org/s3cmd&quot;&gt;s3tool&lt;/a&gt;; however, as VMWare has a closed ecosystem, the only way NfsPrimaryStorage does
the same thing may have to go through VMWare's SDK. Given those facts, the complexity of primary storage is &lt;em&gt;M x N&lt;/em&gt; where M is the number of backup storage
and N is the number of hypervisors it supports.&lt;/p&gt;

&lt;p&gt;As stated in &lt;a href=&quot;plugin.html&quot;&gt;The Versatile Plugin System&lt;/a&gt;, ZStack is a plugin system that every feature is made as a small plugin; a primary storage
needs to define two interfaces to crack the complexity. The first one is a hypervisor backend that deals with activities only related to hypervisors;
for example, NfsPrimaryStorage has an interface &lt;code&gt;NfsPrimaryStorageBackend&lt;/code&gt; defined, for each supported hypervisor there will be a concrete class like
&lt;code&gt;NfsPrimaryStorageKVMBackend&lt;/code&gt; for KVM. The second one, called &lt;code&gt;PrimaryToBackupStorageMediator&lt;/code&gt;, is a hypervisor-to-backup-storage backend that handles activities
involving both hypervisors and backup storage; for example, NfsPrimaryStorage has an implementation &lt;code&gt;NfsPrimaryToSftpBackupKVMBackend&lt;/code&gt; supporting SftpBackupStorage for KVM.&lt;/p&gt;

&lt;p&gt;It sounds terrible that a primary storage has to implement so many things; however, in reality, a primary storage may not need
to support all backup storage for all hypervisors; for example, it is worth nothing supporting SftpBackupStorage for VMWare as VMWare SDK
has a fat chance allowing scp a file to its datastore (though it may be doable by bypassing SDK, we don't view it as a reliable way). And the
prevailing protocols of network shared storage are not too many, most use cases can be handled once we have NfsPrimaryStorage and IscsiPrimaryStorage
in place.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: In current ZStack version(0.6), only NfsPrimaryStorage and SftpBackupStorage are implemented.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we demonstrated ZStack's storage model. By dividing the storage functionality logically into primary storage and
backup storage, ZStack provides a great flexibility that storage vendors can selectively plug in their storage system with different intentions.
And with more and more common storage protocols such as NFS, ISCSI, S3, Swift being added as default plugins, users will not worry
about they cannot find a proper combination for their existing storage systems.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Apr 2015 14:14:07 -0700</pubDate>
        <link>http://zstack.org/blog/storage.html</link>
        <guid isPermaLink="true">http://zstack.org/blog/storage.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Networking Model 2: Virtual Router Network Service Provider</title>
        <description>&lt;p&gt;&lt;em&gt;In ZStack's networking model, OSI layer 4 ~ 7 network services are implemented as small plugins from different service providers.
The default provider, called virtual router provider, uses a customized Linux VM as a virtual appliance to provide
network services including DHCP, DNS, SNAT, EIP, and Port Forwarding for every L3 network. The way of using virtual router VMs has advantages
of no single failure point, and no special requirements for physical infrastructure so that users can realize various network services
on commodity hardware without purchasing expensive equipments.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;p&gt;As mentioned in &lt;a href=&quot;network-l2.html&quot;&gt;Networking Model 1: L2 and L3 Network&lt;/a&gt;, ZStack designs network services as small plugins
that vendors can selectively implement network services supported by their hardware or software by creating network service providers.
By default, ZStack comes with a provider called virtual router provider that implements all network services using an appliance
VM -- Virtual Router VM.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: In fact ZStack has another provider called security group provider that provides a distributed firewall. We call
the virtual router provider as the default provider because it provides most common network services a cloud needs.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There are a few ways to implement network services in IaaS software. One way is using central, powerful networking nodes that are usually
physical servers; by congregating traffics from different tenants, networking nodes are responsible for traffic isolation
and providing network services using technologies like Linux network namespace. Another way is using dedicated networking hardware, for
example, programmable physical switch, physical firewall, and physical load balancer, which will require users to purchase
specific hardware. The last way is using &lt;a href=&quot;http://en.wikipedia.org/wiki/Network_Functions_Virtualization&quot;&gt;Network Functions Virtualization(NFV)&lt;/a&gt;,
like ZStack's virtual router VMs, to virtualize network services on commodity x86 servers.&lt;/p&gt;

&lt;p&gt;Each way has strengths and weaknesses; we choose the NFV as our solution with below considerations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Minimal infrastructure requirements&lt;/strong&gt;: the solution should have small or zero requirements for user's physical infrastructure;
that is to say, users should not have to change existing infrastructure or plan special infrastructure to cater to the networking model
of IaaS software. We don't want to force users to buy specific hardware or require them to put special functional servers in front
of a group of hosts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;No single failure point&lt;/strong&gt;: the solution should provide a distributed way having no single failure point. A networking node
crash should only affect its owner tenant and should not impact any other tenants.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stateless&lt;/strong&gt;: networking nodes should be stateless, so the IaaS software can easily destroy and re-create them after unexpected errors
happened.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Easy for high availability(HA)&lt;/strong&gt;: the solution should be easy for HA that tenants can require deploying redundant networking nodes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hypervisor ignorant&lt;/strong&gt;: the solution should not depend on hypervisors and should seamlessly work for major hypervisors including KVM,
Xen, VMWare, and Hyper-V.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reasonable performance&lt;/strong&gt;: the solution should provide reasonable networking performance for most use cases.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The NFV solution backed by virtual router VMs fulfills all above considerations. We choose it as the default implementation while providing
developers possibilities of adopting other solutions.&lt;/p&gt;

&lt;h3&gt;Virtual Router VM&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Appliance VMs&lt;/em&gt; are special VMs that run customized Linux operating systems with special agents to help manage a cloud. The &lt;em&gt;Virtual
Router VM&lt;/em&gt; is the first implementation of the concept of appliance VM. The idea, in simple words, is to create a virtual router VM that provides all network services
on an L3 network at the first time a user VM is being created, as long as the L3 network has enabled network services from the virtual router provider. Every virtual router VM
contains a Python agent receiving commands from ZStack management nodes through HTTP protocol, and offers network services including DHCP, DNS, SNAT, EIP, and Port
Forwarding to user VMs on the same L3 network.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/vr1.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;The above picture shows a network topology with all network services enabled on the guest L3 network. A virtual router VM typically has three L3 networks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A management L3 network&lt;/strong&gt; is the network that ZStack management nodes communicate to the Python agent inside the virtual router VM through HTTP protocol, which is the mandatory network
every virtual router will have.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A public L3 network&lt;/strong&gt; is an optional network that can reach internet and that provides the default routing inside the virtual router VM. If omitted, the management
L3 network is used as both management network and public network.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;The public network doesn't need to be publicly accessible&lt;/strong&gt;: a public network that bridges user VMs and the outside world(the internet or other networks
of the datacenter) does NOT need to be publicly accessible. For example, a network 10.0.1.0/24 can be a public network when bridging a
guest L3 network(192.168.1.0/24) isolated by a VLAN and rest networks (10.x.x.x/x) in the datacenter, though it cannot be reached by the internet.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;A guest L3 network&lt;/strong&gt; is the network to which user VMs connect; traffics related to network services flow amid user VMs and the virtual router VM
through this network.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Up to different network service combinations, the number of L3 networks is variable. For example, if only DHCP and DNS are enabled, the network topology
becomes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/vr2.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;because without NAT related services(e.g. SNAT, EIP), user VMs don't need a separate, isolated guest L3 network but directly connect to the public network.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: you can, of course, create an isolated guest L3 network with only DHCP and DNS services, VMs on the guest network can get IPs but cannot reach
outside world due to lack of SNAT.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If we omit the public L3 network in above picture, the network topology becomes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/vr3.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;Users can use a &lt;code&gt;virtual router offering&lt;/code&gt; to configure the management L3 network, the public L3 network, CPU speed, and memory size of a virtual router VM.
When creating a virtual router VM, ZStack will try to find an appropriate virtual router offering; a system tag &lt;code&gt;guestL3Network::{l3NetworkUuid}&lt;/code&gt; can be used to
specify a virtual router offering for a guest L3 network, if no designated offering found, a default offering will be used.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: For system tag, read more in &lt;a href=&quot;tag.html&quot;&gt;The Tag System&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In this ZStack version(0.6), a guest L3 network can have one and only one virtual router VM; for a multi-tired network environment, several virtual router
VMs will serve different tiers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/vr4.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;ZStack management nodes will send commands to the Python agent inside a virtual router VM when user VMs start or stop, to realize network services using
dnsmasq and ipatbles. A snippet of iptables rules is like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/vr5.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: In future ZStack version, network services: load balancing, VPN, and GRE tunnel will be implemented using virtual router VMs
as well. And the virtual router VM will also be the core element of the Virtual Private Cloud(VPC) implementation.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;How the virtual router VM meets the considerations&lt;/h3&gt;

&lt;p&gt;Let's review our aforementioned considerations and see how virtual router VMs can fulfill them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Minimal infrastructure requirements&lt;/strong&gt;: virtual router VMs has zero requirement to datacenter's physical infrastructure. They are
just VMs similar to user VMs that can be created on physical hosts. Administrators don't have to plan for complex hardware interlinking
for using them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;No single failure point&lt;/strong&gt;: a virtual router VM is per an L3 network; if it crashes for some reason, only user VMs on that L3 network
will be affected, without any impact on other L3 networks. In most use cases, an L3 network will belong to a single tenant, that is to say,
only one tenant will suffer the failure of a virtual router VM. It is particular useful when the L3 network is under malicious attack, for
example, DDOS; attackers cannot bring down the entire network in a cloud by attacking a single tenant.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stateless&lt;/strong&gt;: virtual router VMs are stateless, all configurations, which can be rebuilt anytime, are from ZStack management nodes.
Users have various choices to rebuild configurations in virtual router VMs, for example, stopping/starting them, destroying/re-creating
them, or calling the ReconnectVirtualRouter API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Easy for high availability(HA)&lt;/strong&gt;: two virtual router VMs that work as master-slave using &lt;a href=&quot;http://en.wikipedia.org/wiki/Virtual_Router_Redundancy_Protocol&quot;&gt;Virtual Router Redundancy Protocol&lt;/a&gt;
can be deployed to achieve HA. Once the master fails the slave will automatically take over, which makes downtime of the network negligible.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: This feature of redundant virtual router VMs is not supported in the current version(0.6).&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hypervisor ignorant&lt;/strong&gt;: virtual router VMs don't depend on hypervisors. ZStack has a script that can build templates
of virtual router VMs for major hypervisors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reasonable performance&lt;/strong&gt;: as using Linux, virtual router VMs can achieve reasonable network performance that the Linux
can give. Users can configure a &lt;code&gt;virtual router offering&lt;/code&gt; with more CPUs and big memory size, to assign enough computing capacity
to virtual router VMs for heavy network traffics. The main performance concern is about traffics
between the public nic of a virtual router VM and user VMs behind, when the virtual router VM provides NAT related services including SNAT, EIP, and Port Forwarding.
In most cases, as a public IP normally has tens of megabytes bandwidth, the virtual router VM is competent for decent performance.&lt;/p&gt;

&lt;p&gt; However, when traffics through the virtual router VM requires extremely high bandwidth, the significant network performance downgrade
 caused by virtualization is inevitable; nevertheless, two technologies can relieve the problem:&lt;/p&gt;

&lt;ol type=&quot;a&quot;&gt;
&lt;li&gt;&lt;p&gt;LXC/Docker: as ZStack can support multiple hypervisors once LXC or Docker is supported, as lightweight virtualization technology,
virtual router VMs run as containers can achieve native approximate performance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SR-IOV: virtual router VMs can be assigned with physical nics using SR-IOV, to get the native network performance.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: LXC/Docker and SR-IOV are not supported in the current version(0.6).&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt; Besides, users can utilize &lt;code&gt;system tags&lt;/code&gt; and &lt;code&gt;virtual router offering&lt;/code&gt; to control host allocation for virtual router VMs; what's more,
 users can even dedicate a physical server to one virtual router VM; accompanying with LXC/Docker or SR-IOV, the virtual router VM can get
 close to native network performance a Linux server can give.&lt;/p&gt;

&lt;p&gt; Regardless, software solution has natural weaknesses of performance; users may choose a mixed solution for high-performance networks;
 for example, using virtual router VMs for only DHCP and DNS, and leaving performance-sensitive services to providers that use
 physical hardware.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we demonstrated ZStack's default network service provider: virtual router provider, explaining how it works
and elaborating how it meets our considerations about network services. With virtual router VMs, ZStack takes an ideal balance
between flexibility and performance, we believe 90% users can easily and precisely construct their network services on commodity
hardware.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2015 14:14:07 -0700</pubDate>
        <link>http://zstack.org/blog/virtual-router.html</link>
        <guid isPermaLink="true">http://zstack.org/blog/virtual-router.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Networking Model 1: L2 and L3 Network</title>
        <description>&lt;p&gt;&lt;em&gt;ZStack abstracts the networking model into L2 and L3 networks. An L2 network provides a type of L2 isolation method, while an L3 network
basically represents a subnet associated with OSI layer 4 ~ layer 7 network services. The idea is to use terms and
concepts with which administrators have been familiar to describe ZStack's networking model, allowing administrators to
create networking topologies easily and precisely.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: We will not involve any details about network implementation at hypervisor side; for example, we will not discuss
how ZStack creates bridges or VLAN devices in the Linux operating system. The purpose of this article is to give you a brief idea
of ZStack's networking model. We strongly recommend you to read &lt;a href=&quot;plugin.html&quot;&gt;The Versatile Plugin System&lt;/a&gt;
if you haven't, as many terms related to plugins(especially the extension point) will be mentioned in following contents.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;p&gt;The most exciting and difficult part of a cloud must be the networking model. The biggest revolution the cloud technology brings to traditional
datacenters is that administrators won't have to spend days or weeks in creating or changing networking topologies, instead, they
can finish the former daunting task in a few minutes by clicking some buttons in the UI of IaaS software.&lt;/p&gt;

&lt;p&gt;In order to achieve that simplicity, an IaaS software must have a clear and flexible networking model that can help administrators
build the majority of classic networking topologies of traditional datacenter in the cloud. And, what's more, it must allow administrators
to change the well-built network whenever necessary without redeploying the entire cloud.&lt;/p&gt;

&lt;p&gt;The overall picture of ZStack's networking model is like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/network-model1.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;An L2 network, which represents exactly an L2 broadcast domain, is the base of all network elements. Upon an L2 network there are
L3 networks and network service providers; an L3 network is a subnet with network services associated; despite an L2 network usually
contains only one L3 network, multiple L3 networks can co-exist on the same L2 network as long as their IP ranges won't
conflict. An L3 network may have one or more IP ranges belonging to the same subnet, the purpose of having separated IP ranges is
to allow users to reserve a part of IPs from a subnet. Network services like DHCP, DNS are provided by providers bound to
an L2 network to upon L3 networks.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: As Virtual Private Cloud(VPC) has not been supported in this ZStack version(0.6), the above networking model doesn't show
how VPC will work. However, the concept is similar, the VPC is just a coordination of multiple L3 networks with programmatic routing. We will
introduce VPC in future ZStack version, which is coming soon.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;L2 Network&lt;/h3&gt;

&lt;p&gt;An L2 network is responsible for providing an L2 isolation method that can be a pure L2 technology(e.g. &lt;a href=&quot;http://en.wikipedia.org/wiki/Virtual_LAN&quot;&gt;VLAN&lt;/a&gt;),
or an overlay technology(e.g. &lt;a href=&quot;http://en.wikipedia.org/wiki/Generic_Routing_Encapsulation&quot;&gt;GRE tunnel&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Virtual_Extensible_LAN&quot;&gt;VXLAN&lt;/a&gt;).
ZStack doesn't care about the details an L2 network uses in the backend, so the data structure -- L2NetworkInventory --
which encompasses necessary L2 information is highly abstracted:&lt;/p&gt;

&lt;table class=&quot;table table-striped table-bordered black-table&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;b&gt;FIELD&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;&lt;b&gt;DESCRIPTION&lt;/b&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;uuid&lt;/td&gt;
    &lt;td&gt;L2 network UUID&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;name&lt;/td&gt;
    &lt;td&gt;a short name&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;description&lt;/td&gt;
    &lt;td&gt;a long description&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;zoneUuid&lt;/td&gt;
    &lt;td&gt;uuid of zone the L2 network belongs to&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;physicalInterface&lt;/td&gt;
    &lt;td&gt;a string containing information necessary to implement the L2 network at the backend. for example, 'eth0'&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;type&lt;/td&gt;
    &lt;td&gt;L2 network type&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;attachedClusterUuids&lt;/td&gt;
    &lt;td&gt;a list of cluster uuid the L2 network has attached to&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;


&lt;p&gt;A sub-typed L2 network may have extra properties, for example, the L2VlanNetwork has an extra field &lt;code&gt;vlan&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;Attaching Strategy&lt;/h4&gt;

&lt;p&gt;In real datacenters, an L2 network usually represents the connectivity of a physical network between hosts, for example, hosts
under the same L2 switch may be on the same L2 network. The network connectivity is not unchangeable, it may change whenever
the physical infrastructure of a datacenter changes, for example, administrators re-wire an L2 switch. To provide a flexible way describing
relationships between hosts and L2 networks, ZStack uses a so-called &lt;em&gt;attaching strategy&lt;/em&gt; that allows an L2
network to be attached/detached to/from multiple clusters that are groups of hosts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/network-model2.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;In above picture, hosts in the cluster1 and the cluster2 are all wired to the L2 network1 while hosts in the cluster2 are also wired to the L2 network2,
administrators can attach the L2 network1 to both clusters but attach the L2 network2 to only cluster2. Some time later, if administrators
re-wire hosts in the cluster2 to remove connections off the L2 network1, they can detach the L2 network1 from the cluster2 to reflect
current network connectivity.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/network-model3.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;The attachment between clusters and L2 networks shows the behavior of establishing L2 broadcast domains among hosts within
those clusters, which doesn't always involve physical connection changes. For example, hosts connecting
to tagged switch ports can create bridges on ethernet devices with the same VLAN in their operating systems, to build an L2 broadcast domain
for VMs connecting to the bridges; in this case, attaching or detaching an L2 network doesn't imply any physical infrastructure
change but the behavior of creating or deleting an L2 broadcast domain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/network-model4.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;In the above picture, once administrators create an L2VlanNetwork with VLAN 10 and attach it to the cluster1 and the cluster2, a broadcast
domain is created among hosts within these clusters. Hypervisors may take various ways to implement the L2 broadcast domain, for
example, KVM hosts will create bridges with VLAN devices(VLAN 10) in their Linux operating systems; if the L2VlanNetwork is detached
from the cluster2 later, the hosts in the detached cluster will be removed from the broadcast domain by deleting their VLAN(10) bridges.
This concept of creating/destroying broadcast domains applies to all types of L2 networks; for example, attaching an OvsGreL2Network
to KVM clusters may lead GRE tunnels to be created amid hosts, while detaching an OvsGreL2Network may cause GRE tunnels to be deleted.&lt;/p&gt;

&lt;p&gt;The attaching strategy has an extra bonus in with respect to restricting hosts that VMs can run. Because a VM is always created
with L3 networks belonging to some L2 networks, the VM will only be allocated to a host in the cluster that has been attached to
those L2 networks. By this way, administrators can divide hosts into different pools by L2 networks, for example, clusters attached
with a high bandwidth L2 network, clusters attached to a public L2 network. If administrators want to put all hosts into a
single pool, they can attach all L2 networks to all clusters.&lt;/p&gt;

&lt;h4&gt;Backend Implementation&lt;/h4&gt;

&lt;p&gt;With virtualization technology, the backend implementation of an L2 network is highly hypervisor dependent. For example,
the implementation of the L2VlanNetwork on a KVM host is creating a bridge with a VLAN device but configuring a vSwitch on a VMWare ESXi host.
To decouple the implementation of L2 network from hypervisors, ZStack delegates the responsibility of implementing a type of L2 network
to hypervisor plugins. Two extension points are defined for realizing an L2 network. The first one is &lt;code&gt;L2NetworkRealizationExtensionPoint&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;L2NetworkRealizationExtensionPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;realize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L2NetworkInventory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l2Network&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Completion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L2NetworkInventory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l2Network&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostUuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Completion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;L2NetworkType&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSupportedL2NetworkType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;HypervisorType&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSupportedHypervisorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When an L2 network is being attached to a cluster, this extension point is called for every host in the cluster, the hypervisor plugin
can take this chance to implement the network on the back-end host; for example, the KVM plugin has both &lt;code&gt;KVMRealizeL2NoVlanNetworkBackend&lt;/code&gt;
and &lt;code&gt;KVMRealizeL2VlanNetworkBackend&lt;/code&gt; that extend &lt;code&gt;L2NetworkRealizationExtensionPoint&lt;/code&gt; to create bridges on Linux operating systems.
This extension point is useful for L2 networks that don't need to know information of VMs, both L2NoVlanNetwork and L2VlanNetwork
fall into this category. However, some L2 networks may only be able to be implemented when VMs are being created, for example, an L2VxlanNetwork may
need to look up the VID of a VM's owner account in order to establish an L2 broadcast domain; in this case, the hypervisor plugin can implement another extension point &lt;code&gt;PreVmInstantiateResourceExtensionPoint&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PreVmInstantiateResourceExtensionPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preBeforeInstantiateVmResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VmInstanceSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VmInstantiateResourceException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preInstantiateVmResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VmInstanceSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Completion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preReleaseVmResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VmInstanceSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Completion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Plugins can retrieve information of the destination host and the VM from &lt;code&gt;VmInstanceSpec&lt;/code&gt; then realize an L2 network before the VM being created
on the destination host.&lt;/p&gt;

&lt;h3&gt;L3 Network&lt;/h3&gt;

&lt;p&gt;An L3 network is a subnet created on an L2 network, associated with network services; it can have multiple IP ranges as long as
they belong to the same L3 network and won't conflict with each other.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/network-model5.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;In the above picture there are two IP ranges (192.168.0.10 - 192.168.0.50) and (192.168.0.60 - 192.168.0.100), IPs from 192.168.0.51
to 192.168.0.59 are reserved so administrators can assign them to devices not managed by ZStack.&lt;/p&gt;

&lt;p&gt;An L3 network is nothing if without network services that are provided by network service providers associated with the underlying L2 network. A network service
provider may provide one or more network services, for example, ZStack's default &lt;em&gt;virtual router provider&lt;/em&gt; is able to provide almost
all common network services like DHCP, DNS, SNAT and so on, while &lt;a href=&quot;https://f5.com/glossary/load-balancer&quot;&gt;F5&lt;/a&gt; provider may only provide load balancing. In this ZStack version(0.6),
a network service provider can only associate with an L2 network at the time the L2 network is being created; for example, the virtual router provider
implementing &lt;code&gt;L2NetworkCreateExtensionPoint&lt;/code&gt; will create associations with all L2 networks after they are created.&lt;/p&gt;

&lt;p&gt;Administrators can attach network services to an L3 network; for one type of service, only one service of one network
service provider can be attached to the L3 network; for example, you cannot attach two DHCP services from different providers to the same L3 network.
In this ZStack version(0.6), six types of network services: DHCP, DNS, SNAT, EIP, Port Forwarding, and Security Group are defined, providers
only need to implement corresponding backends: &lt;code&gt;NetworkServiceDhcpBackend&lt;/code&gt;, &lt;code&gt;NetworkServiceDnsBackend&lt;/code&gt;, &lt;code&gt;NetworkServiceSnatBackend&lt;/code&gt;,
&lt;code&gt;EipBackend&lt;/code&gt;, &lt;code&gt;PortForwardingBackend&lt;/code&gt;, and &lt;code&gt;SecurityGroupHypervisorBackend&lt;/code&gt; to provide those services. We will discuss
our reference provider &lt;em&gt;virtual router provider&lt;/em&gt; in &lt;a href=&quot;virtual-router.html&quot;&gt;Networking Model 2: Virtual Router Network Service Provider&lt;/a&gt;, you can explore more
details then.&lt;/p&gt;

&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we briefly explained ZStack's networking model. Without digging into backend hypervisor details, we demonstrated
how ZStack abstracts the OSI model into L2 network(layer 2), L3 network(layer 3), and network services(layer 4 ~ 7). In next article,
we will elaborate our reference implementation of the network service provider: virtual router provider, about how it implements DHCP,
DNS, SNAT, EIP, and Port Forwarding in an appliance VM.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Apr 2015 14:14:07 -0700</pubDate>
        <link>http://zstack.org/blog/network-l2.html</link>
        <guid isPermaLink="true">http://zstack.org/blog/network-l2.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Full Automation By Ansible</title>
        <description>&lt;p&gt;&lt;em&gt;Agent is a common way that IaaS software manage devices; for example, ZStack uses Python agents to manage KVM hosts.
With massive devices, installing and upgrading agents become huge challenges, so most IaaS software leave this problem
to customers or distribution vendors, which leads to fragile solutions because of lacking support from IaaS software themselves.
ZStack took this problem into account in the very beginning, tried out Puppet, Salt, and Ansible successively,
and finally integrated with Ansible seamlessly and transparently. All ZStack agents are automatically deployed, configured,
and upgraded by Ansible; users may not even notice their existences.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;The Motivation&lt;/h3&gt;

&lt;p&gt;An IaaS software is normally a united software consisting of many small pieces of programs. Ideally an IaaS software can be written
as a central management software that talks to devices through devices' SDK; but in reality, devices either provide no SDK or incomplete
SDK, imposing IaaS software have to deploy a small program called agent to control them. Even ZStack packages all services
in a single process(see &lt;a href=&quot;microservices.html&quot;&gt;The In-Process Microservices Architecture&lt;/a&gt;), a few agents still need to be deployed to separate devices to control them.
The process of deploying agents, which not only installs agents and dependent software but also configures the target devices, is not straightforward,
and usually need to involve users doing a lot of manual work. This problem becomes prominent when the IaaS software manages
tons of devices and can even restrict the scale of the data center.&lt;/p&gt;

&lt;h3&gt;The Problem&lt;/h3&gt;

&lt;p&gt;The problem of deploying, upgrading agents and configuring target devices is
the configuration management problem that many software like &lt;a href=&quot;http://puppetlabs.com/solutions/configuration-management&quot;&gt;Puppet&lt;/a&gt;,
&lt;a href=&quot;https://www.chef.io/chef/&quot;&gt;Chef&lt;/a&gt;, &lt;a href=&quot;http://saltstack.com/&quot;&gt;Salt&lt;/a&gt;, and &lt;a href=&quot;http://www.ansible.com/home&quot;&gt;Ansible&lt;/a&gt; aim to solve.
Many developers have started using those tools to wrap IaaS software in an easy to deploy way; for example, to install the &lt;a href=&quot;https://www.openstack.org/&quot;&gt;OpenStack&lt;/a&gt;,
you will likely try to find some puppet module instead of manually doing every step following its documentation.
Those thirdparty wrappers relieve the problem somehow, but they are also fragile, any changes in the
software wrapped may break them. On the other side, when users want to configure a certain part of the software wrapped, they may have
to dive into those thirdparty wrappers to make an ad-hoc change. Finally, the thirdparty wrappers cannot handle the situation
of upgrading the software wrapped, turning users back to daunting details they try to hide.&lt;/p&gt;

&lt;p&gt;With seamless and transparent integration with the configuration management software &lt;a href=&quot;http://www.ansible.com/home&quot;&gt;Ansible&lt;/a&gt;,
ZStack solves this problem in a way of hiding details from users and taking the responsibility of managing agents, presenting
users a software that can be simply downloaded and run(or upgraded), fulfilling the goal of automating everything in the data
center, and helping administrators overcome the fear of installing, configuring, and upgrading their clouds.&lt;/p&gt;

&lt;h3&gt;Integration with Ansible&lt;/h3&gt;

&lt;p&gt;ZStack has a typical server-agent architecture that the server side contains all orchestration services driving business logic,
and the agent side executes commands from the orchestration services by small Python agents(e.g. KVM agents, virtual router VM agents)
running on separate devices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/ansible1.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Services and agents&lt;/strong&gt;: ZStack has clear definitions for services and agents. A service is responsible for driving a part
of business in the cloud, for example, storage service. A service is typically running in the process of ZStack management node,
having own APIs and configurations, and cooperating with other services to run the business of the cloud. An agent is a small minion
program ordered by a service to manipulate an external device that doesn't provide a decent SDK; for example, the SFTP backup storage agent
builds a backup storage on a Linux machine using SFTP protocol. The design principal of services and agents is &lt;strong&gt;to put all complex business logic in services and
make agents as dead simple as possible&lt;/strong&gt;. We hope this explanation gives you an idea of what we call services and agents in ZStack because
other IaaS software may have different ideas, we have seen some IaaS software handles business logic in agent code.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;All ZStack agents contain three files: a Python package(xxx.tar.gz), an init.d service file, and an Ansible &lt;a href=&quot;http://en.wikipedia.org/wiki/YAML&quot;&gt;YAML&lt;/a&gt;
configuration, located in their own directories under &lt;code&gt;$web_container_root/webapps/zstack/WEB-INF/classes/ansible&lt;/code&gt;, so a service can find
its agent through Java classpath. The Ansible YAML configuration wires all things together; it tells how to install the agent, dependencies of the
agent, and how to configure the target device. Citing KVM as an example, a part of its Ansible YAML configuration is like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;install kvm related packages on RedHat based OS&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ansible_os_family == &amp;#39;RedHat&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;yum&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name=&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;with_items&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;qemu-kvm&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bridge-utils&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;wget&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;qemu-img&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;libvirt-python&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;libvirt&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;nfs-utils&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;vconfig&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;libvirt-client&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;net-tools&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;install kvm related packages on Debian based OS&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ansible_os_family == &amp;#39;Debian&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg=&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;with_items&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;qemu-kvm&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bridge-utils&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;wget&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;qemu-utils&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;python-libvirt&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;libvirt-bin&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;vlan&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;nfs-common&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;disable firewalld in RHEL7 and CentOS7&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ansible_os_family == &amp;#39;RedHat&amp;#39; and ansible_distribution_version &amp;gt;= &amp;#39;7&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name=firewalld state=stopped enabled=no&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;copy iptables initial rules in RedHat&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;src=&amp;quot;/iptables&amp;quot; dest=/etc/sysconfig/iptables&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ansible_os_family == &amp;quot;RedHat&amp;quot; and is_init == &amp;#39;true&amp;#39;&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;restart iptables&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name=iptables state=restarted enabled=yes&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;chroot_env == &amp;#39;false&amp;#39; and ansible_os_family == &amp;#39;RedHat&amp;#39; and is_init == &amp;#39;true&amp;#39;&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;remove libvirt default bridge&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;(ifconfig&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;virbr0&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/dev/null&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;virsh&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;net-destroy&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/dev/null&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;virsh&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;net-undefine&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/dev/null)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As showed above, the YAML configuration takes care of all settings about a KVM host. You don't need to worry about ZStack will ask
you to install a lot of dependent software manually, and will not suffer any weird errors caused by lacking dependencies or by
misconfiguration. It's ZStack's responsibility to make everything work on your Linux machines no matter they are Ubuntu or CentOS,
even if you only install a minimal installation, ZStack knows how to get them ready.&lt;/p&gt;

&lt;p&gt;Services in Java code can use an &lt;code&gt;AnsibleRunner&lt;/code&gt; to call Ansible to deploy or upgrade agents at an opportune time. The
&lt;code&gt;AnsibleRunner&lt;/code&gt; of KVM looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;AnsibleRunner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AnsibleRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;installChecker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAgentPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KVMGlobalProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AGENT_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTargetIp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSelf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getManagementIp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPlayBookName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KVMConstant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ANSIBLE_PLAYBOOK_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSelf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSelf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNewAdded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putArgument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;init&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFullDeploy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putArgument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pkg_kvmagent&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agentPackageName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putArgument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hostname&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%s.zstack.org&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getManagementIp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorCode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;AnsibleRunner&lt;/code&gt; is very smart. It will track the MD5 sum of each agent file and test port connectivity of the agent on the remote device,
ensuring the Ansible will be only called when necessary. Normally, the process of deploying or upgrading an agent is transparent,
happening at trigger points defined by services; for example, a KVM agent will automatically get deployed when adding a new KVM host.
However, services also provide APIs called &lt;code&gt;Reconnect API&lt;/code&gt; for users to trigger an agent deployment imperatively; for example,
users can call &lt;code&gt;APIReconnectHostMsg&lt;/code&gt; to trigger a re-deployment of the KVM agent on a host in order to apply a critical security
fix for the Linux operating system, after they make corresponding changes in the KVM's YAML configuration. In future, ZStack will provide
a framework allowing users to execute their customized Ansible YAML configurations without modifying the default one in ZStack.&lt;/p&gt;

&lt;p&gt;In the software upgrade, after users install a new version of ZStack and reboot all management nodes, the &lt;code&gt;AnsibleRunner&lt;/code&gt; will detect
the MD5 sum of agents have changed and automatically upgrade them to external devices. This process is transparent and well-designed;
for example, the host service will upgrade 1000 KVM hosts each time if it detects there are totally 10,000 hosts, to
avoid exhaust resources of management nodes; of course, global configurations are provided to users for tuning the behavior (e.g. upgrade
100 hosts every time).&lt;/p&gt;

&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we demonstrated ZStack's seamless and transparent integration with Ansible. By this way, the process of
agent installation, configuration, and upgrade is fully automated, keeping daunting details away from users but leaving them to
ZStack itself.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Apr 2015 14:14:07 -0700</pubDate>
        <link>http://zstack.org/blog/ansible.html</link>
        <guid isPermaLink="true">http://zstack.org/blog/ansible.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>The Query API</title>
        <description>&lt;p&gt;&lt;em&gt;A common challenge for users of IaaS software is how to find a wanted resource quickly and precisely; for example,
finding the VM that has EIP(16.16.16.16) from 10,000 VMs. Most IaaS software solves this problem by ad-hoc query logic in APIs.
ZStack, instead of ad-hoc, equips with a framework that can automatically generate queries for every field of every resource,
and join queries that span multiple resources, helping users to manage enormous resources in the cloud.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;The motivation&lt;/h3&gt;

&lt;p&gt;A moderate cloud may manage several hundreds of physical hosts and tens of thousands of VMs, leading to a challenge of finding
wanted resources because IaaS software rarely have comprehensive query APIs. Most IaaS software
allows users to query a resource with a handful of conditions(e.g. name, UUID) that are
hard coded in query APIs. If users want to do a query with conditions exceeding those hard coded, for example, query a VM with the created date,
they may have to end up listing all VMs then filtering the result in a &lt;code&gt;for..loop&lt;/code&gt;. Querying a resource with arbitrary fields
have not been fully supported in most IaaS software, let alone join queries; for example, if users want to find a VM whose nic is
applied with a specific security group rule, they may have to list both resources(VM, security group) and do twice of &lt;code&gt;for..loop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On the other side, compared to software like &lt;a href=&quot;https://www.atlassian.com/software/jira&quot;&gt;JIRA&lt;/a&gt;, most UI of IaaS software are coarse and crude.
Many developers may not realize that the root of the poor UI is not because UI developers lack skills of CSS/HTML/JavaScript, but
the software itself could not provide robust APIs supporting a sophisticated UI; for example, to implement a feature
like JIRA filter that shows only resources meeting specified conditions, UI may have to do a lot of post-processing work of &lt;code&gt;listing all then
filtering by for..loop&lt;/code&gt;, which will screw up with a large number of resources.&lt;/p&gt;

&lt;p&gt;IaaS software has been suffering this for a while; the antidote is to provide a mechanism that can automatically generate
queries for every field of every resource and can handle join queries.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Ashamed&lt;/strong&gt;: It's a little embarrassing that we claim the UI of IaaS software as poor user experience while, so ours is.
However, &lt;strong&gt;that's all because our UI is made by a Java/Python developer who is not good at CSS/HTML/JavaScript&lt;/strong&gt;.
ZStack has comprehensive query APIs that can help build JIRA like UI; we are sure our next version of UI
will get much better.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;The problem&lt;/h3&gt;

&lt;p&gt;Most IaaS software use a rational database(e.g. MySQL) as backend database that resources are normally arranged in individual tables;
such as virtual machine table, host table, volume table. For every resource, there is an API, which may be differently named
as &lt;code&gt;describe API&lt;/code&gt;, &lt;code&gt;list API&lt;/code&gt; or &lt;code&gt;query API&lt;/code&gt;, to get a single of a list of that resource; those APIs typically have hard coded parameters
that expose a part of columns of database tables, allowing users to query a resource with a small number of conditions; these parameters are selected
elaborately, usually are columns that matter to API designers themselves, for example, name, uuid. However, as not all columns are exposed,
users often run into situations that they have to retrieve all resources then do post-processing in one or more &lt;code&gt;for..loop&lt;/code&gt;,
because the column they want to query is absent from the API.&lt;/p&gt;

&lt;p&gt;A complex query scenario may need to use join queries that often span multiple database tables; for example,
to find a VM with EIP 16.16.16.16, it may involve VM table, nic table, and EIP table. Some IaaS software
solves this problem using database views, which is another kind of hard coding that can only join selected tables in fixed forms,
while tables in reality can be joined in very complex manners. In the software upgrade, views also require database migration
if any tables a view refers to have changed.&lt;/p&gt;

&lt;h3&gt;Query APIs&lt;/h3&gt;

&lt;p&gt;To avoid hand-coded query logic in APIs and provide users the flexibility of querying everything everywhere, ZStack creates a
framework that can automatically generate queries for all resources and doesn't require developers to write code to implement
query logic; what's more, the framework can also generate various join queries as long as tables are connected by foreign keys.&lt;/p&gt;

&lt;p&gt;In following contents, we will cite zone as an example to elaborate this awesome framework. A zone has following columns in database:&lt;/p&gt;

&lt;table class=&quot;table table-bordered black-table&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;b&gt;FIELD&lt;/b&gt;&lt;/td&gt;
    &lt;td&gt;&lt;b&gt;DESCRIPTION&lt;/b&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;uuid&lt;/td&gt;
    &lt;td&gt;zone UUID&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;name&lt;/td&gt;
    &lt;td&gt;zone name&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;description&lt;/td&gt;
    &lt;td&gt;zone description&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;state&lt;/td&gt;
    &lt;td&gt;zone state&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;type&lt;/td&gt;
    &lt;td&gt;zone type&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;createDate&lt;/td&gt;
    &lt;td&gt;the time the zone was created&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;lastOpDate&lt;/td&gt;
    &lt;td&gt;the last time the zone was operated&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;


&lt;p&gt;Users can query a zone by any single field or combinations of fields, using regular SQL comparison operators such as
'=', '!=', '&gt;', '&gt;=', '&amp;lt;', '&amp;lt;=', 'in', 'not in', 'is null', 'is not null', 'like', 'not like'.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: In the command line tool, some operators have different forms: 'in'(?=), 'not in'(!?=), 'is null'(=null),
'is not null'(!=null), 'like'(~=), 'not like'(!~=).&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;QueryZone name=west-coast-zone

QueryZone name=west-coast-zone state=Enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a zone is the ancestor of major ZStack resources, many resources more or less have relationships to it; for example, a running
VM is always in some zone. Such kind of relationship can produce the join query like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;QueryZone vmInstance.name=web-vm1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As showed in the prior table, a zone doesn't expose any field called &lt;code&gt;vmInstance&lt;/code&gt;, but there is a condition starting with 'vmInstance' in above query.
This kind of query is called &lt;em&gt;expanded query&lt;/em&gt; in ZStack. Here &lt;code&gt;vmInstance&lt;/code&gt; represents the VM table that has a
field &lt;code&gt;zoneUuid&lt;/code&gt; (foreign key) referring to the zone table, so the query framework can understand their relationship and generate the join query.
The above example is interpreted as &lt;em&gt;&quot;find zones that run VMs of name web-vm1&quot;&lt;/em&gt;. Expanding the example further, as the VM nic table has
foreign key to the VM table, and the EIP table has foreign key to the VM nic table, a query of zone can also use an EIP as condition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;QueryZone vmInstance.vmNics.eip.vipIp=16.16.16.16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The query is interpreted as &lt;em&gt;&quot;find zones that run VMs whose nics associated with EIP 16.16.16.16&quot;&lt;/em&gt;. Now you see the power of the query APIs!
We can even create some very complex query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;QueryVolumeSnapshot volume.vmInstance.vmNics.l3Network.l2Network.attachedClusterUuids=13238c8e0591444e9160df4d3636be82
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This complex query is to find volume snapshots created from volumes of VMs that have nics on L3 networks
whose parent L2 networks are attached to a cluster of uuid equal to 13238c8e0591444e9160df4d3636be82. Don't panic, you rarely
need that complex query, but it does prove the competency. Besides those, SQL features like selecting
fields, sort, count, and pagination are also supported:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;QueryL3Network name=L3-SYSTEM-PUBLIC count=true

QueryL3Network l2NetworkUuid=33107835aee84c449ac04c9622892dec limit=10

QueryL3Network l2NetworkUuid=33107835aee84c449ac04c9622892dec start=10 limit=100

QueryL3Network fields=name,uuid l2NetworkUuid=33107835aee84c449ac04c9622892dec

QueryL3Network l2NetworkUuid=33107835aee84c449ac04c9622892dec sortBy=createDate sortDirection=desc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;The implementation&lt;/h3&gt;

&lt;p&gt;Despite query APIs are so powerful, the magic under the cover is very concise. When adding a new resource,
developers do not need to write any code about query logic, but define the query API and the resource itself.
To implement the query API for zone, a developer needs to:&lt;/p&gt;

&lt;h5&gt;1. annotate zone inventory with query metadata&lt;/h5&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mappingVOClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZoneVO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@PythonClassInventory&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ExpandedQueries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@ExpandedQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expandedField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;vmInstance&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventoryClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VmInstanceInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;foreignKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;uuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expandedInventoryKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;zoneUuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@ExpandedQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expandedField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cluster&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventoryClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClusterInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;foreignKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;uuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expandedInventoryKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;zoneUuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@ExpandedQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expandedField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventoryClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HostInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;foreignKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;uuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expandedInventoryKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;zoneUuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@ExpandedQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expandedField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;primaryStorage&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventoryClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrimaryStorageInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;foreignKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;uuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expandedInventoryKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;zoneUuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@ExpandedQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expandedField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l2Network&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventoryClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L2NetworkInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;foreignKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;uuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expandedInventoryKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;zoneUuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@ExpandedQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expandedField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l3Network&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventoryClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L3NetworkInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;foreignKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;uuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expandedInventoryKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;zoneUuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@ExpandedQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expandedField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;backupStorageRef&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventoryClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackupStorageZoneRefInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;foreignKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;uuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expandedInventoryKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;zoneUuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ExpandedQueryAliases&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@ExpandedQueryAlias&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;backupStorage&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expandedField&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;backupStorageRef.backupStorage&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZoneInventory&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timestamp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastOpDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Annotations above declare relationships among zone and other resources, which are bases of zone's
expanded queries.&lt;/p&gt;

&lt;h5&gt;2. define a query API&lt;/h5&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@AutoQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replyClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APIQueryZoneReply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventoryClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZoneInventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;APIQueryZoneMsg&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APIQueryMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;3. declare the query API in zone's API configuration file&lt;/h5&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;service&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://zstack.org/schema/zstack&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;zone&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;interceptor&amp;gt;&lt;/span&gt;ZoneApiInterceptor&lt;span class=&quot;nt&quot;&gt;&amp;lt;/interceptor&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;message&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;org.zstack.header.zone.APIQueryZoneMsg&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;serviceId&amp;gt;&lt;/span&gt;query&lt;span class=&quot;nt&quot;&gt;&amp;lt;/serviceId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/message&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The API &lt;code&gt;APIQueryZoneMsg&lt;/code&gt; is routed to the query service by specifying the service id &lt;code&gt;query&lt;/code&gt;. That's it,
zero line of code about query logic; the query service takes care of all the rest. All ZStack query APIs are defined like this,
adding query API for a new resource is extremely easy.&lt;/p&gt;

&lt;h3&gt;Current limitation&lt;/h3&gt;

&lt;p&gt;The main limitation is only logic &lt;code&gt;AND&lt;/code&gt; is supported amid query conditions, no &lt;code&gt;OR&lt;/code&gt;. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;QueryZone name=west-coast-zone state=Enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is saying &quot;find zones of name west-coast and state Enabled&quot;. We do this because we found 99% combinations
of query conditions are based on logic &lt;code&gt;AND&lt;/code&gt;, from the SQL usage in ZStack source code. On the other hide, it's very hard to
keep query APIs concise if logic &lt;code&gt;OR&lt;/code&gt; is introduced without creating a DSL. However, for many cases, comparison operation
&lt;code&gt;in(?=)&lt;/code&gt; can be used to achieve &lt;code&gt;OR&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;QueryZone name=west-coast-zone state?=Enabled,Disabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above example is saying &quot;find zones of name west-coast and state of Enabled OR Disabled&quot;. In future, we will
introduce a query language in DSL style, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;QueryZone name=west-coast-zone AND (state=Enabled OR state=Disabled)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we demonstrated ZStack's query APIs. With the powerful tool, users can query any resources in the way
similar to the rational database. In future, ZStack will build a sophisticated UI that can create various views(filters)
leveraging query APIs, for example, showing all VMs running on the same L3 network, bringing a revolutionary
change to user experience of IaaS UI.&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Apr 2015 14:14:07 -0700</pubDate>
        <link>http://zstack.org/blog/query.html</link>
        <guid isPermaLink="true">http://zstack.org/blog/query.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>The Cascade Framework</title>
        <description>&lt;p&gt;&lt;em&gt;Resources in a cloud have relations to each other. An operation to one resource may usually set off a chain
effect to others; for example, when deleting a cluster, it makes sense to delete all hosts belonging to that
cluster and to stop all VMs running on those hosts. Traditional IaaS software either hard code chain effects
or simply deny those operations, for example, prohibiting users from deleting a cluster that has VM running. ZStack offers
a cascade framework that can spread an operation from one resource to all related resources. Resources can choose to join
the cascade framework by implementing a simple extension point, which decouples the framework from resources' business logic.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;The motivation&lt;/h3&gt;

&lt;p&gt;Resources in a cloud depend to each other more or less; for example, a host is a child resource
of a cluster, a primary storage is a sibling resource to a cluster, and an L3 network is a descendant resource of a zone. Relationships
among resources can be described as a directed graph:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/cascade1.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;We show major ZStack resources in the above graph; though different IaaS software may use different terms, it aims to give you
a rough idea. As implied by the graph, when an operation is taken to a resource, not only the target resource but also the relevant
resources will be affected; for example, when deleting a zone, it would be ideal that resources belonging to the zone such as
clusters, hosts, primary storage, L2 networks and so on will be deleted as well. In order to handle this, the IaaS software must
cater to the need of cascading operations.&lt;/p&gt;

&lt;h3&gt;The problem&lt;/h3&gt;

&lt;p&gt;Most IaaS software take little account of cascading operations; they either hard code business logic, for example,
explicitly deleting all resources belonging to an account that is going to be deleted, or simply deny this kind of operations,
for example, greeting you an error message &lt;em&gt;&quot;there is still a VM using an IP in this IP range&quot;&lt;/em&gt; when you are trying to delete
an IP range. Both ways can bring a lot of troubles. For hard coding, it makes the software inflexible for adding new resources,
because you have to modify existing code to add cascade operations, for instance, modifying the code of deleting account to
delete the new resources when an account is being deleted. For the error message which is totally lack of responsibility, users
either have to do boring work, for example, deleting 100 VMs manually before deleting an IP range, or have to ruin everything
then start from scratch, for example, re-deploying the entire cloud.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Avoiding misoperation is not an excuse&lt;/strong&gt;: Someone may claim that denying cascade deletion is deliberate, because users
may make misoperation that can bring disaster consequences; for example, mistakenly deleting a zone and causing a loss of all VMs.
However, such claim is a false excuse and is making the decision for users. Could you imagine you have to delete 10,000 VMs manually
just in order to delete a zone, because the software think you may do something wrong, so it forces you to show confirmation by
repeating a boring task 10,000 times? A good software should provide choices to users, and let them make the decision. In our example,
the IaaS software should warn users that there are still 10,000 VMs running before proceeding to the final deleting; but once users acknowledge
that's what they want, the software should just do it.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;Cascade Framework&lt;/h3&gt;

&lt;p&gt;ZStack solves this problem by a cascade framework; as the name implies, the cascade framework allows an operation to be cascaded
from one resource to others. In order to decouple the architecture, the cascade framework is made as an individual component
that resources can join the framework at will. To join the framework, all a resource needs to do is implementing an extension point
&lt;code&gt;CascadeExtensionPoint&lt;/code&gt; (in our example &lt;code&gt;AbstractAsyncCascadeExtension&lt;/code&gt; is a class implementing &lt;code&gt;CascadeExtensionPoint&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VmCascadeExtension&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbstractAsyncCascadeExtension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asyncCascade&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CascadeAction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Completion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* this is from deleting Primary Storage*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* delete VMs that have root volumes on the primary storage*/&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*this is from deleting L3 Network*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* stop VMs that have nics on the L3 network, and remove those nics */&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* this is from deleting IP range*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* stop VMs that have nics whose IP is in the IP range */&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* this is from deleting host*/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* stop VMs that run on the host */&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getEdgeNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;PrimaryStorageVO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;L3NetworkVO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;IpRangeVO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;HostVO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCascadeResourceName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VmInstanceVO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CascadeAction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createActionForChildResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CascadeAction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convertContextToVmRelatedContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;getCascadeResourceName()&lt;/code&gt; returns the name of the resource(VmInstance); &lt;code&gt;getEdgeNames()&lt;/code&gt; returns a list of resource names that are directly
related to the resource, PrimaryStorage, L3Network, IpRange, and Host in our example; so if and when a deleting operation is taken to
those &lt;code&gt;edge resources&lt;/code&gt; or their upstream resources(e.g. zone), the operation will be cascaded to extensions that declare them in &lt;code&gt;getEdgeNames()&lt;/code&gt;
method. The cascade extension could take actions in &lt;code&gt;asyncCascade()&lt;/code&gt;, and retrieve necessary information such as the operation code(e.g. delete),
the root issuer(e.g. zone, will explain soon) and the parent issuer(e.g host, will explain soon) from which the operation stems,
and the operation context(e.g. which host is being deleted). As the relationship of resources is a directed graph that may have circular paths, the
cascade framework will flatten the graph to a tree, and break circular paths into branches. For example, the operation of deleting zone will
result in below tree (a part):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/cascade2.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: As you can see, the operation of deleting zone will be cascaded multiple times to the VM's cascade extension; that is deliberate
because cascade extension usually relies on the parent issuer to decide what actions to take; in this example, the parent issuers
of VM are Primary Storage, Host, L3Network and IP range; however, for different parent issuers, the extension may take different actions; for example,
if the parent issuer is primary storage and the operation code is &lt;code&gt;delete&lt;/code&gt;, the extension will destroy all VMs that have root volume on that primary storage;
but if the parent issuer is host, the extension will only stop VMs on that host, because those VMs can be started on other hosts later. Given
ZStack doesn't have conflicting cascade operations, for example, there won't be an operation that causes VM to start from a path A but
stop from a path B, it's not a problem to cascade an operation to an extension multiple times from different paths.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When cascading an operation, the framework starts with a &lt;code&gt;root issuer&lt;/code&gt; on which the operation is applied; in our above example of deleting
zone, &lt;code&gt;zone&lt;/code&gt; is the root issuer; then the framework will traverse the tree from the &lt;code&gt;root issuer&lt;/code&gt; and call extensions' &lt;code&gt;createActionForChildResource()&lt;/code&gt; method
to create contexts for each extension on each path; once all contexts are created, the framework will traverse the tree again but
from leaf nodes to the root and call &lt;code&gt;asyncCascade()&lt;/code&gt; of each extension; an extension can rely on the &lt;code&gt;parent issuer&lt;/code&gt; which are resource names declared in
the &lt;code&gt;getEdgeNames()&lt;/code&gt; method to decide what actions to take; for example, stopping VMs if the &lt;code&gt;parent issuer&lt;/code&gt; is host, and deleting VMs if the &lt;code&gt;parent issuer&lt;/code&gt; is primary storage.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/cascade3.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;Guaranteed by the two stages traverse, an operation(e.g. deleting) will be only applied on the &lt;code&gt;root issuer&lt;/code&gt; after all downstream resources have
done some proper actions; for example, a zone will be deleted only after all descendant resources being deleted.&lt;/p&gt;

&lt;p&gt;As not all operations need to be cascaded, a resource can call &lt;code&gt;CascadeFacade.asyncCascade()&lt;/code&gt; when it needs.&lt;/p&gt;

&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we demonstrated ZStack's cascade framework, which is a powerful tool to spread operations without hard coding. ZStack uses it in
many ways, except the example we cited in the text, operations like detaching primary storage(which will stop all VMs in the cluster to
be detached), detaching L2 network(which will stop all VMs in the cluster to be detached) are all implemented in this manner. With its help,
administrators can quickly try out different cloud deployments without worrying about inconveniences; you can just delete a part of your deployment
and re-create a new one, without redeploying the entire cloud just because you have created many VMs on an incorrectly designed L2 network (for example).&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Apr 2015 14:14:07 -0700</pubDate>
        <link>http://zstack.org/blog/cascade.html</link>
        <guid isPermaLink="true">http://zstack.org/blog/cascade.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>The Workflow Engine</title>
        <description>&lt;p&gt;&lt;em&gt;Tasks in IaaS software normally have long execution paths; an error may happen at any given step. In order to keep the integrity of the system,
an IaaS software must provide a mechanism that can roll back prior executed steps. With a workflow engine, every step in ZStack
wrapped in individual flow can be rolled back on error. Besides, key execution paths can be configured by assembling workflows
in configuration files, which decouples the architecture further.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;The motivation&lt;/h3&gt;

&lt;p&gt;A datacenter is made up of massive, various resources that can be both physical(e.g. storage, servers) and virtual(e.g. virtual machines).
The IaaS software is essentially managing states of different resources; for example, creating a VM will normally change state of storage(a
new volume is created on the storage), state of network(DHCP/DNS/SNAT related information are set on the network), and state of
hypervisor(a new VM is created on the hypervisor). Unlike ordinary applications which largely manage own states stored in memory
or database, IaaS software have to manage states scattered on every device in order to reflect the overall state of the datacenter, leading
to long execution paths. A task of IaaS software will typically involve changing states on multiple devices, an error may happen at
any step then leave the system in an intermediate stage where some devices have changed states while some have not. For example, when creating
a VM, an IaaS software usually configures VM's network in order of DHCP --&gt; DNS --&gt; SNAT, if an error happens when creating
SNAT, DHCP and DNS configured before will most likely remain in the system because they have been successfully applied, even
the VM fails to be created at last. This kind of state inconsistent problem usually entails an unstable cloud.&lt;/p&gt;

&lt;p&gt;On the other side, the hard-coded business logic in traditional IaaS software is inflexible for changes; developers often have to
rewrite or modify existing code in order to change some established behaviors, which hurts the stability of the software.&lt;/p&gt;

&lt;p&gt;The cure for those issues is to introduce the concept of workflow that can break monolithic business logic into fine-grained, rollbackable steps,
allowing the software to clean up applied states on error and making the software configurable.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: In ZStack, we call each step in the workflow as a 'flow'; in following context, steps and flows are used interchangeable.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;The problem&lt;/h3&gt;

&lt;p&gt;Error handling is always a headache in software design. Though nearly every software engineer knows the importance of error handling, but in reality,
they keep finding excuses for ignoring it. Elegant error handling is hard, especially in a system that a task may span separate components. Even if
skilled engineers may take care of errors in their own code, they are not able to spread the effort to components not written by themselves if the architecture
doesn't enforce a unified mechanism that can consolidate error handling globally. Ignoring error handling is particularly
harmful in an IaaS software; unlike consuming applications that can be rebooted to recover all states, an IaaS software typically
has no way to recover states itself, and will need administrators to manually correct states both in database and external devices. A solo
state inconsistency may not cause any big problem and may not even be observed, but accumulated state inconsistencies will finally bring down the cloud
at some point.&lt;/p&gt;

&lt;h3&gt;Workflow engine&lt;/h3&gt;

&lt;p&gt;Workflow is a way that breaks cumbersome method calls into small granularity steps that each step only focuses on one thing,
and that are driven by either sequence or state-machine to complete a whole task. With rollback handlers installed,
a workflow can rollback all prior executed steps and abort the execution when an error or a unhandled exception happens
in a step. Cite creating VM as an example, the major workflow looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/blogs/scalability/workflow1.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;Sequential workflow, which is originated from &lt;a href=&quot;http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern&quot;&gt;Chain pattern&lt;/a&gt; and
has predictable execution order, is the basis of ZStack workflow. A flow, essentially a Java interface, can contain sub-workflow
and can execute only after all ahead flows finish.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlowTrigger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlowTrigger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the &lt;code&gt;Flow&lt;/code&gt; interface, the &lt;code&gt;run(FlowTrigger trigger, Map data)&lt;/code&gt; method is called when the workflow has proceeded to this flow;
the parameter &lt;code&gt;Map data&lt;/code&gt; can be used to retrieve data from previous flows and pass data to later flows. When finishing, a flow calls &lt;code&gt;trigger.next()&lt;/code&gt; to instruct
the workflow to move to the next; if an error happens, the flow should call &lt;code&gt;trigger.fail(ErrorCode error)&lt;/code&gt; to abort the
execution, notifying the workflow to rollback accomplished flows(including the failure flow itself) invoking &lt;code&gt;rollback()&lt;/code&gt; method of them.&lt;/p&gt;

&lt;p&gt;Flows are organized in &lt;code&gt;FlowChain&lt;/code&gt; interface that represents an entire workflow. There are two ways to create a &lt;code&gt;FlowChain&lt;/code&gt;:&lt;/p&gt;

&lt;h4&gt;1. Declarative way&lt;/h4&gt;

&lt;p&gt;Flows can be configured in a component's Spring configuration file, a &lt;code&gt;FlowChain&lt;/code&gt; can be created by feeding a list of flow class names
to &lt;code&gt;FlowChainBuilder&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;VmInstanceManager&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.compute.vm.VmInstanceManagerImpl&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;createVmWorkFlowElements&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;list&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.compute.vm.VmAllocateHostFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.compute.vm.VmImageSelectBackupStorageFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.compute.vm.VmAllocatePrimaryStorageFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.compute.vm.VmAllocateVolumeFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.compute.vm.VmAllocateNicFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.compute.vm.VmInstantiateResourcePreFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.compute.vm.VmCreateOnHypervisorFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.compute.vm.VmInstantiateResourcePostFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/list&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!--only a part of configuration is showed --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;FlowChainBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createVmFlowBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FlowChainBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFlowClassNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createVmWorkFlowElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;construct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FlowChain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createVmFlowBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a typical way to create serious, configurable workflow containing reusable flows. In above example, the workflow is for creating user VM;
a so-called appliance VM has basically the same flows except the one allocating VM nics, so a separate flow configuration for appliance VM
can have most flows mutual to user VM's:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ApplianceVmFacade&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.appliancevm.ApplianceVmFacadeImpl&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;createApplianceVmWorkFlow&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;list&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.compute.vm.VmAllocateHostFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.compute.vm.VmImageSelectBackupStorageFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.compute.vm.VmAllocatePrimaryStorageFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.compute.vm.VmAllocateVolumeFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.appliancevm.ApplianceVmAllocateNicFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.compute.vm.VmInstantiateResourcePreFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.compute.vm.VmCreateOnHypervisorFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;org.zstack.compute.vm.VmInstantiateResourcePostFlow&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/list&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;zstack:plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;zstack:extension&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;interface=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.header.Component&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;zstack:extension&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;interface=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.zstack.header.Service&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/zstack:plugin&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: In the former picture, we have highlighted the flow &lt;code&gt;ApplianceVmAllocateNicFlow&lt;/code&gt; in green; that is the only flow that differentiates
creational workflow of user VM and appliance VM.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4&gt;2. Programmatic way&lt;/h4&gt;

&lt;p&gt;A &lt;code&gt;FlowChain&lt;/code&gt; can also be created in a programmatic way. Usually when a workflow is trivial, and flows are nonreusable.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;FlowChain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FlowChainBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newSimpleFlowChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Flow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;flow1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlowTrigger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* do some business */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlowTrigger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* rollback something */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Flow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;flow2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlowTrigger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* do some business */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlowTrigger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* rollback something */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FlowDoneHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* the workflow has successfully done */&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FlowErrorHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorCode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* the workflow has failed with error */&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above form is not handy because the data interchange amid flows is through a map &lt;code&gt;data&lt;/code&gt;, every flow has to call
&lt;code&gt;data.get()&lt;/code&gt; and &lt;code&gt;data.put()&lt;/code&gt;, which is very verbose. With a way &lt;a href=&quot;http://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL&lt;/a&gt;
alike, flows can share data through variables:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;FlowChain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FlowChainBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newShareFlowChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ShareFlow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;data can be defined as class variables&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;data can be iintialized in object initializer&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;data can also be defined in method scope, but it has to be final&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Flow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;flow1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlowTrigger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;data1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;we can change data here&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useData2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;cm&quot;&gt;/* do something */&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlowTrigger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cm&quot;&gt;/* do some rollback */&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NoRollbackFlow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;flow2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlowTrigger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cm&quot;&gt;/* data1 is the value of what we have changed in flow1 */&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useData1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;cm&quot;&gt;/* do something */&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FlowDoneHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cm&quot;&gt;/* the workflow has successfully done */&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FlowErrorHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorCode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cm&quot;&gt;/*the workflow has failed with error */&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we demonstrated ZStack's workflow engine. With it, ZStack can elegantly keep states of the system consistent when errors happen, in 99%
time. Note we say 99% time; though workflow is a great tool to handle most errors, there are still some cases it can't handle, for example,
failures in rollback handlers. ZStack is also equipped with a garbage collection system that we will introduce in another article in future.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Apr 2015 14:14:07 -0700</pubDate>
        <link>http://zstack.org/blog/workflow.html</link>
        <guid isPermaLink="true">http://zstack.org/blog/workflow.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
