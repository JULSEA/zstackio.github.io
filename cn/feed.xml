<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ZStack</title>
    <description>ZStack is open source IaaS software managing resources of compute, storage, networking throughout a datacenter all by APIs.</description>
    <link>http://zstack.org/</link>
    <atom:link href="http://zstack.org/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 24 Feb 2016 23:56:16 +0800</pubDate>
    <lastBuildDate>Wed, 24 Feb 2016 23:56:16 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>ZStack v1.0.1发布</title>
        <description>&lt;h2&gt;ZStack 1.0.1 版本今天发布&lt;/h2&gt;

&lt;p&gt;ZStack 1.0.1 版本今天发布，欢迎大家下载试用。该版本主要是修复了ZStack v1.0上一些小问题:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flat Mode Provider 模式下,如果不提供云主机Hostname,Linux云主机的DHCP Hostname将会为云主机的IP地址(用户手动设置过hostname的除外)&lt;/li&gt;
&lt;li&gt;Flat Mode Provider 模式下,如果之前安装过ZStack,在重装前没有通过ZStack 删除云主机,可能会导致新的云主机IP地址与老的云主机分配冲突.&lt;/li&gt;
&lt;li&gt;v1.0 引入的UI汉化库没有集成到dashboard中,导致内网用户可能会大不开dashboard的UI界面.&lt;/li&gt;
&lt;li&gt;来自用户tolbkni@gmail.com 修复的两个dashboard显示的问题.&lt;/li&gt;
&lt;li&gt;当计算节点重启后,mangement-l2的网卡获得IP地址,但是public-l2网卡没有获得IP地址,ZStack重联Host会导致一些异常问题&lt;/li&gt;
&lt;li&gt;使用安装参数&#39;-i&#39;,单独安装zstack节点的时候,不需要检查mysql root用户的登陆密码.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3 id=&quot;install&quot;&gt; 安装 &lt;/h3&gt;


&lt;p&gt;你可以通过下面方式安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.0/1.0.1/224/zstack-installer-1.0.1-0224.bin -O zstack-installer-1.0.1.bin
    bash zstack-installer-1.0.1.bin -R aliyun
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;这里&lt;code&gt;-R aliyun&lt;/code&gt;参数指定使用阿里云的源进行安装，你也可以使用&lt;code&gt;-R 163&lt;/code&gt;使用网易的源。我们推荐使用阿里云的源&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;upgrade&quot;&gt; 升级 &lt;/h3&gt;


&lt;p&gt;一如既往的，我们支持一键无缝升级：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.0/1.0.1/224/zstack-installer-1.0.1-0224.bin -O zstack-installer-1.0.1.bin
    bash zstack-installer-1.0.1.bin -u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;升级多节点的用户,可以参考zstack v0.9的release notes 来升级.zstack.war 文件放置在 http://download.zstack.org/releases/1.0/1.0.1/224/zstack.war&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;获取更多帮助,请添加ZStack QQ群:410185063&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 24 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/v1.0.1.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/v1.0.1.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
      <item>
        <title>ZStack HTTP API使用</title>
        <description>&lt;h2&gt;1. 介绍&lt;/h2&gt;

&lt;p&gt;ZStack的API原语是JSON格式的消息，可以在各种消息总线上调用，目前ZStack使用的默认消息总线是RabbitMQ。由于这个特性，ZStack的API可以被封装成各种格式。为了方便大家使用，ZStack自带一个HTTP server，用户可以通过HTTP POST发送API JSON文本，该HTTP Server会自动将其转换成API消息实现调用。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;我们未来会将ZStack API封装成Restful格式，但当前HTTP POST发送API JSON原语的方式将一直保留。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ZStack的命令行工具(zstack-cli)是完全使用HTTP POST方法调用API的，为了方便用户阅读，我们用户手册对所有API的解释都是以zstack-cli为示例，每个cli命令都对应一个API。用户可以在&lt;a href=&quot;http://zstack-cn.readthedocs.org/zh/latest/userManual/introduction.html&quot;&gt;中文用户手册&lt;/a&gt;获得每个API的详细解释。&lt;/p&gt;

&lt;p&gt;通过zstack-cli的log，用户可以查看所有API调用和返回的具体格式（即HTTP POST的BODY）。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Log路径： /var/log/zstack/zstack-cli&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;我们建议用户通过&lt;code&gt;tail -f /var/log/zstack/zstack-cli&lt;/code&gt;实时查看log，这样你可以在zstack-cli中执行API时实时观测到具体调用和输出。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;LogInByAccount accountName=admin password=password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行了登录操作后，你会看到LOG中输出类似如下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    2016-02-16 16:29:48,664 DEBUG [apibinding.api] async call[url: http://localhost:8080/zstack/api/, request: {&quot;org.zstack.header.identity.APILogInByAccountMsg&quot;: {&quot;password&quot;: &quot;b109f3bbbc244eb82441917ed06d618b9008dd09b3befd1b5e07394c706a8bb980b1d7785e5976ec049b46df5f1326af5a2ea6d103fd07c95385ffab0cacbc86&quot;, &quot;session&quot;: {}, &quot;accountName&quot;: &quot;admin&quot;}}]
    2016-02-16 16:29:48,741 DEBUG [apibinding.api] async call[url: http://localhost:8080/zstack/api/, response: {&quot;org.zstack.header.identity.APILogInReply&quot;:{&quot;inventory&quot;:{&quot;uuid&quot;:&quot;083f3518d1bd469fa0ff789fc1a25382&quot;,&quot;accountUuid&quot;:&quot;36c27e8ff05c4780bf6d2fa65700f22e&quot;,&quot;userUuid&quot;:&quot;36c27e8ff05c4780bf6d2fa65700f22e&quot;,&quot;expiredDate&quot;:&quot;Feb 17, 2016 12:29:48 PM&quot;,&quot;createDate&quot;:&quot;Feb 16, 2016 4:29:48 PM&quot;},&quot;success&quot;:true}}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里&lt;code&gt;http://localhost:8080/zstack/api/&lt;/code&gt;是HTTP调用的URL，request后的内容是API调用时HTTP POST的BODY，例如这里LogInByAccount这个API的HTTP POST BODY就是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {
        &quot;org.zstack.header.identity.APILogInByAccountMsg&quot;: {
        &quot;password&quot;: &quot;b109f3bbbc244eb82441917ed06d618b9008dd09b3befd1b5e07394c706a8bb980b1d7785e5976ec049b46df5f1326af5a2ea6d103fd07c95385ffab0cacbc86&quot;,
        &quot;session&quot;: {},
        &quot;accountName&quot;: &quot;admin&quot;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;response后的内容是API返回的HTTP response的BODY，例如这里LogInByAccount的返回是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {
        &quot;org.zstack.header.identity.APILogInReply&quot;: {
            &quot;inventory&quot;: {
                &quot;uuid&quot;: &quot;083f3518d1bd469fa0ff789fc1a25382&quot;,
                &quot;accountUuid&quot;: &quot;36c27e8ff05c4780bf6d2fa65700f22e&quot;,
                &quot;userUuid&quot;: &quot;36c27e8ff05c4780bf6d2fa65700f22e&quot;,
                &quot;expiredDate&quot;: &quot;Feb 17, 2016 12:29:48 PM&quot;,
                &quot;createDate&quot;: &quot;Feb 16, 2016 4:29:48 PM&quot;
            },
            &quot;success&quot;: true
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;2. API的格式&lt;/h2&gt;

&lt;p&gt;ZStack API的调用和返回都是以JSON原语描述的，格式统一为：&lt;code&gt;只有一个entry的JSON map，该entry的key是API描述符，value是承载具体内容的一个map&lt;/code&gt;。API描述符用来唯一标示一个API调用或返回，用户可以把它看做API的名称。在上一节的例子中，API调用的描述符是&lt;code&gt;org.zstack.header.identity.APILogInByAccountMsg&lt;/code&gt;，API返回的描述符是&lt;code&gt;org.zstack.header.identity.APILogInReply&lt;/code&gt;。&lt;/p&gt;

&lt;h2&gt;3. HTTP返回码&lt;/h2&gt;

&lt;table class=&quot;table table-striped table-bordered black-table&quot;&gt;
&lt;tr&gt;
&lt;th&gt;
返回码
&lt;/th&gt;
&lt;th&gt;
描述
&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
200
&lt;/td&gt;
&lt;td&gt;
HTTP调用成功。但并不代表API执行成功，API的执行结果由API返回中的success字段决定，true表示成功；false表示失败
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
其他
&lt;/td&gt;
&lt;td&gt;
含义跟标准的HTTP返回码相同，例如500代表Internal Server Error；404代表No such page
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;


&lt;h2&gt;4. HTTP Response Body&lt;/h2&gt;

&lt;p&gt;API的HTTP response返回的是一个Job结构，调用者需要用该Job的uuid去轮询查询API是否已经完成。API Job的格式如下：&lt;/p&gt;

&lt;table class=&quot;table table-striped table-bordered black-table&quot;&gt;
&lt;tr&gt;
&lt;th&gt;
字段
&lt;/th&gt;
&lt;th&gt;
类型
&lt;/th&gt;
&lt;th&gt;
描述
&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
uuid
&lt;/td&gt;
&lt;td&gt;
字符串
&lt;/td&gt;
&lt;td&gt;
 JOB UUID，用户可以用该UUID去查询一个API JOB当前的执行状态。当state == Done时，该字段可能为NULL。
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
state
&lt;/td&gt;
&lt;td&gt;
字符串
&lt;/td&gt;
&lt;td&gt;
JOB状态。包括两种状态：Processing，该JOB还在执行；Done，JOB已经完成
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
result
&lt;/td&gt;
&lt;td&gt;
字符串
&lt;/td&gt;
&lt;td&gt;
API结果，JSON字符串。当state = Processing时，该字段为NULL
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
createdDate
&lt;/td&gt;
&lt;td&gt;
字符串
&lt;/td&gt;
&lt;td&gt;
JOB创建时间
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
finishedDate
&lt;/td&gt;
&lt;td&gt;
字符串
&lt;/td&gt;
&lt;td&gt;
JOB完成时间
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;


&lt;h4&gt;state == Processing的Job例子：&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    {
        &quot;uuid&quot;: &quot;fee83ed8529340cd8528b3b408dc16b0&quot;,
        &quot;state&quot;: &quot;Processing&quot;,
        &quot;createdDate&quot;: &quot;Feb 16, 2016 5:01:11 PM&quot;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;state == Done的Job例子：&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    {
        &quot;uuid&quot;: &quot;fee83ed8529340cd8528b3b408dc16b0&quot;,
        &quot;state&quot;: &quot;Done&quot;,
        &quot;createdDate&quot;: &quot;Feb 16, 2016 5:01:11 PM&quot;,
        &quot;finishedDate&quot;: &quot;Feb 16, 2016 5:01:12 PM&quot;,
        &quot;result&quot;: &quot;{\&quot;org.zstack.header.zone.APICreateZoneEvent\&quot;:{\&quot;inventory\&quot;:{\&quot;uuid\&quot;:\&quot;f1ed8f95163c4b6c88a8c0673b7913b7\&quot;,\&quot;name\&quot;:\&quot;xx\&quot;,\&quot;state\&quot;:\&quot;Enabled\&quot;,\&quot;type\&quot;:\&quot;zstack\&quot;,\&quot;createDate\&quot;:\&quot;Feb 16, 2016 5:01:12 PM\&quot;,\&quot;lastOpDate\&quot;:\&quot;Feb 16, 2016 5:01:12 PM\&quot;},\&quot;success\&quot;:true}}&quot;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4.1 查询API JOB的状态&lt;/h3&gt;

&lt;p&gt;当调用一个API后，HTTP response返回一个Job结构，其中包含有该Job的uuid，用户需要通过该uuid去查询该Job的状态。查询的方法是向&lt;code&gt;http://locahost:8080/api/result/{job uuid}&lt;/code&gt;发送一个HTTP Get请求，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    curl  http://localhost:8080/zstack/api/result/fee83ed8529340cd8528b3b408dc16b0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其HTTP response返回一个Job结构，用户可以通过判断Job的state字段来判断Job是否完成，从而决定是否需要继续轮询Job的状态。&lt;/p&gt;

&lt;h2&gt;5. API的调用流程&lt;/h2&gt;

&lt;p&gt;ZStack API的调用的标准流程是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;调用LogInByAccount，获得一个Session UUID，作为后续API调用的token&lt;/li&gt;
&lt;li&gt;调用API 1&lt;/li&gt;
&lt;li&gt;调用API 2&lt;/li&gt;
&lt;li&gt;... ...&lt;/li&gt;
&lt;li&gt;调用API N&lt;/li&gt;
&lt;li&gt;调用LogOut&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;5.1 登录&lt;/h3&gt;

&lt;p&gt;在调用其他API前，用户需要首先调用LogInByAccount以获得一个session UUID，以此作为后续API调用的token。该API的描述符为：&lt;code&gt;org.zstack.header.identity.APILogInByAccountMsg&lt;/code&gt;，包含以下字段：&lt;/p&gt;

&lt;table class=&quot;table table-striped table-bordered black-table&quot;&gt;
&lt;tr&gt;
&lt;th&gt;
字段
&lt;/th&gt;
&lt;th&gt;
描述
&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
accountName
&lt;/td&gt;
&lt;td&gt;
用户名。例如admin|
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
password
&lt;/td&gt;
&lt;td&gt;
密码。zstack不对密码进行任何处理，只是单纯将其与数据库中存储的密码数据进行字符串比对。我们建议在调用CreateAccount这样的API时，密码使用sha512加密。
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;


&lt;blockquote&gt;&lt;p&gt;默认用户名密码：ZStack默认的用户名是admin，其密码明文为password，sha512哈希后的结果为b109f3bbbc244eb82441917ed06d618b9008dd09b3befd1b5e07394c706a8bb980b1d7785e5976ec049b46df5f1326af5a2ea6d103fd07c95385ffab0cacbc86&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;所以该API的JSON描述类似于：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {
        &quot;org.zstack.header.identity.APILogInByAccountMsg&quot;: {
            &quot;password&quot;: &quot;b109f3bbbc244eb82441917ed06d618b9008dd09b3befd1b5e07394c706a8bb980b1d7785e5976ec049b46df5f1326af5a2ea6d103fd07c95385ffab0cacbc86&quot;,
            &quot;accountName&quot;: &quot;admin&quot;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用curl调用该API：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    curl -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;org.zstack.header.identity.APILogInByAccountMsg&quot;: {&quot;password&quot;: &quot;b109f3bbbc244eb82441917ed06d618b9008dd09b3befd1b5e07394c706a8bb980b1d7785e5976ec049b46df5f1326af5a2ea6d103fd07c95385ffab0cacbc86&quot;, &quot;accountName&quot;: &quot;admin&quot;}}&#39; http://localhost:8080/zstack/api
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返回的Job结构为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {
        &quot;state&quot;: &quot;Done&quot;,
        &quot;createdDate&quot;: &quot;Feb 16, 2016 7:15:01 PM&quot;,
        &quot;finishedDate&quot;: &quot;Feb 16, 2016 7:15:01 PM&quot;,
        &quot;result&quot;: &quot;{\&quot;org.zstack.header.identity.APILogInReply\&quot;:{\&quot;inventory\&quot;:{\&quot;uuid\&quot;:\&quot;9eba9754f8c2470cbb377088e61c4da2\&quot;,\&quot;accountUuid\&quot;:\&quot;36c27e8ff05c4780bf6d2fa65700f22e\&quot;,\&quot;userUuid\&quot;:\&quot;36c27e8ff05c4780bf6d2fa65700f22e\&quot;,\&quot;expiredDate\&quot;:\&quot;Feb 17, 2016 3:15:01 PM\&quot;,\&quot;createDate\&quot;:\&quot;Feb 16, 2016 7:15:01 PM\&quot;},\&quot;success\&quot;:true}}&quot;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其result字段包含的是API的结果，JSON表达为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {
        &quot;org.zstack.header.identity.APILogInReply&quot;: {
            &quot;inventory&quot;: {
                &quot;uuid&quot;: &quot;9eba9754f8c2470cbb377088e61c4da2&quot;,
                &quot;accountUuid&quot;: &quot;36c27e8ff05c4780bf6d2fa65700f22e&quot;,
                &quot;userUuid&quot;: &quot;36c27e8ff05c4780bf6d2fa65700f22e&quot;,
                &quot;expiredDate&quot;: &quot;Feb 17, 2016 3:15:01 PM&quot;,
                &quot;createDate&quot;: &quot;Feb 16, 2016 7:15:01 PM&quot;
            },
            &quot;success&quot;: true
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;code&gt;uuid&lt;/code&gt;字段即是我们需要的Session UUID。&lt;/p&gt;

&lt;h3&gt;5.2 普通API调用&lt;/h3&gt;

&lt;p&gt;除登录(LogInByAccount)、登出(LogOut)等少数API外，剩下的都是普通API，在调用时需要传入LogIn拿到的Session UUID，其JSON原语为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {
        &quot;API描述符&quot;: {
           &quot;session&quot;: {
                &quot;uuid&quot;: &quot;LogIn时拿到的session UUID&quot;
           }，
           &quot;API字段名1&quot;： ...，
           &quot;API字段名2”： ...
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;再次提醒：你可以通过查看/var/log/zstack/zstack-cli得到你在zstack-cli执行的每个API的描述符、request和response。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;5.3 登出&lt;/h3&gt;

&lt;p&gt;当你执行完需要的API后，应该调用LogOut API退出当前session。该API的描述符是&lt;code&gt;org.zstack.header.identity.APILogOutMsg&lt;/code&gt;，其JSON原语是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {
        &quot;org.zstack.header.identity.APILogOutMsg&quot;: {
            &quot;sessionUuid&quot;: &quot;你要LogOut的Session UUID&quot;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用curl调用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    curl -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;org.zstack.header.identity.APILogOutMsg&quot;: {&quot;sessionUuid&quot;: &quot;083f3518d1bd469fa0ff789fc1a25382&quot;}}&#39; http://localhost:8080/zstack/api
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;6. 创建一个Zone的Curl示例&lt;/h2&gt;

&lt;p&gt;这里我们将用创建Zone这个例子，展示如何用Curl手动调用ZStack的API。&lt;/p&gt;

&lt;h4&gt;6.1 登录&lt;/h4&gt;

&lt;p&gt;调用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        curl -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;org.zstack.header.identity.APILogInByAccountMsg&quot;: {&quot;password&quot;: &quot;b109f3bbbc244eb82441917ed06d618b9008dd09b3befd1b5e07394c706a8bb980b1d7785e5976ec049b46df5f1326af5a2ea6d103fd07c95385ffab0cacbc86&quot;, &quot;accountName&quot;: &quot;admin&quot;}}&#39; http://localhost:8080/zstack/api
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返回：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        {&quot;state&quot;:&quot;Done&quot;,&quot;createdDate&quot;:&quot;Feb 16, 2016 7:53:14 PM&quot;,&quot;finishedDate&quot;:&quot;Feb 16, 2016 7:53:14 PM&quot;,&quot;result&quot;:&quot;{\&quot;org.zstack.header.identity.APILogInReply\&quot;:{\&quot;inventory\&quot;:{\&quot;uuid\&quot;:\&quot;2f68cf0a5783400694bd8efdd536a2a8\&quot;,\&quot;accountUuid\&quot;:\&quot;36c27e8ff05c4780bf6d2fa65700f22e\&quot;,\&quot;userUuid\&quot;:\&quot;36c27e8ff05c4780bf6d2fa65700f22e\&quot;,\&quot;expiredDate\&quot;:\&quot;Feb 17, 2016 3:53:14 PM\&quot;,\&quot;createDate\&quot;:\&quot;Feb 16, 2016 7:53:14 PM\&quot;},\&quot;success\&quot;:true}}&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从返回结果中我们得到Session UUID为&lt;code&gt;2f68cf0a5783400694bd8efdd536a2a8&lt;/code&gt;。&lt;/p&gt;

&lt;h4&gt;6.2 创建一个Zone&lt;/h4&gt;

&lt;p&gt;调用:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    curl -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;org.zstack.header.zone.APICreateZoneMsg&quot;: {&quot;session&quot;: {&quot;uuid&quot;: &quot;2f68cf0a5783400694bd8efdd536a2a8&quot;}, &quot;name&quot;: &quot;zone1&quot;}}&#39; http://localhost:8080/zstack/api
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返回：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {&quot;uuid&quot;:&quot;2252332b14fb42599558577cb24fa168&quot;,&quot;state&quot;:&quot;Processing&quot;,&quot;createdDate&quot;:&quot;Feb 16, 2016 7:55:34 PM&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们得到了一个Job UUID &lt;code&gt;2252332b14fb42599558577cb24fa168&lt;/code&gt;，通过它我们可以轮询创建Zone这个API的结果。&lt;/p&gt;

&lt;p&gt;轮询结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl  http://localhost:8080/zstack/api/result/2252332b14fb42599558577cb24fa168
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返回：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {&quot;uuid&quot;:&quot;2252332b14fb42599558577cb24fa168&quot;,&quot;state&quot;:&quot;Done&quot;,&quot;createdDate&quot;:&quot;Feb 16, 2016 7:55:34 PM&quot;,&quot;finishedDate&quot;:&quot;Feb 16, 2016 7:55:34 PM&quot;,&quot;result&quot;:&quot;{\&quot;org.zstack.header.zone.APICreateZoneEvent\&quot;:{\&quot;inventory\&quot;:{\&quot;uuid\&quot;:\&quot;dd625f8fb2074f4fa1c0870ef76bb24a\&quot;,\&quot;name\&quot;:\&quot;zone1\&quot;,\&quot;state\&quot;:\&quot;Enabled\&quot;,\&quot;type\&quot;:\&quot;zstack\&quot;,\&quot;createDate\&quot;:\&quot;Feb 16, 2016 7:55:34 PM\&quot;,\&quot;lastOpDate\&quot;:\&quot;Feb 16, 2016 7:55:34 PM\&quot;},\&quot;success\&quot;:true}}&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们看到该API已经完成了，state == Done。API的结果以一个JSON字符串的形式保存在&lt;code&gt;result&lt;/code&gt;字段中。可以看到该API调用成功，因为&lt;code&gt;success&lt;/code&gt;字段为&lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;

&lt;h4&gt;6.3 登出&lt;/h4&gt;

&lt;p&gt;调用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    curl -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;org.zstack.header.identity.APILogOutMsg&quot;: {&quot;sessionUuid&quot;: &quot;2252332b14fb42599558577cb24fa168&quot;}}&#39; http://localhost:8080/zstack/api
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返回：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {&quot;state&quot;:&quot;Done&quot;,&quot;createdDate&quot;:&quot;Feb 16, 2016 8:04:36 PM&quot;,&quot;finishedDate&quot;:&quot;Feb 16, 2016 8:04:37 PM&quot;,&quot;result&quot;:&quot;{\&quot;org.zstack.header.identity.APILogOutReply\&quot;:{\&quot;success\&quot;:true}}&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;7. 创建一个Zone的Python示例&lt;/h2&gt;

&lt;p&gt;你可以&lt;a href=&quot;https://github.com/zstackorg/zstack-utility/blob/master/apibinding/examples/example.py&quot;&gt;点击这里&lt;/a&gt;获得完整代码。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import httplib
import json
import time

# return a dict containing API return value
def api_call(session_uuid, api_id, api_content):
    conn = httplib.HTTPConnection(&quot;localhost&quot;, 8080)
    headers = {&quot;Content-Type&quot;: &quot;application/json&quot;}

    if session_uuid:
        api_content[&quot;session&quot;] = {&quot;uuid&quot;: session_uuid}

    api_body = {api_id: api_content}

    conn.request(&quot;POST&quot;, &quot;/zstack/api&quot;, json.dumps(api_body))
    response = conn.getresponse()

    if response.status != 200:
        raise Exception(&quot;failed to make an API call, %s, %s&quot; % (response.status, response.reason))

    rsp_body = response.read()

    rsp = json.loads(rsp_body)

    if rsp[&quot;state&quot;] == &quot;Done&quot;:
        return json.loads(rsp[&quot;result&quot;])

    job_uuid = rsp[&quot;uuid&quot;]
    def query_until_done():
        conn.request(&quot;GET&quot;, &quot;/zstack/api/result/%s&quot; % job_uuid)
        response = conn.getresponse()
        if response.status != 200:
            raise Exception(&quot;failed to query API result, %s, %s&quot; % (response.status, response.reason))

        rsp_body = response.read()
        rsp = json.loads(rsp_body)
        if rsp[&quot;state&quot;] == &quot;Done&quot;:
            return json.loads(rsp[&quot;result&quot;])

        time.sleep(1)
        print &quot;Job[uuid:%s] is still in processing&quot; % job_uuid
        return query_until_done()

    return query_until_done()



def error_if_fail(rsp):
    success = rsp.values()[0][&quot;success&quot;]
    if not success:    
        error = rsp.values()[0][&quot;error&quot;]
        raise Exception(&quot;failed to login, %s&quot; % json.dumps(error))

def login():
    content = {
            &quot;accountName&quot;: &quot;admin&quot;,
            &quot;password&quot;: &quot;b109f3bbbc244eb82441917ed06d618b9008dd09b3befd1b5e07394c706a8bb980b1d7785e5976ec049b46df5f1326af5a2ea6d103fd07c95385ffab0cacbc86&quot;
    }
    rsp = api_call(None, &quot;org.zstack.header.identity.APILogInByAccountMsg&quot;, content)
    error_if_fail(rsp)

    session_uuid = rsp.values()[0][&quot;inventory&quot;][&quot;uuid&quot;]

    print &quot;successfully login, session uuid is: %s&quot; % session_uuid
    return session_uuid


def create_zone(session_uuid):
    content = {&quot;name&quot;: &quot;zone1&quot;}

    rsp = api_call(session_uuid, &quot;org.zstack.header.zone.APICreateZoneMsg&quot;, content)
    error_if_fail(rsp)

    print &quot;successfully created zone1&quot;


def logout(session_uuid):
    content = {&quot;sessionUuid&quot;: session_uuid}
    rsp = api_call(None, &quot;org.zstack.header.identity.APILogOutMsg&quot;, content)
    error_if_fail(rsp)

    print &quot;successfully logout&quot;


session_uuid = login()
create_zone(session_uuid)
logout(session_uuid)
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Tue, 16 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/http-api.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/http-api.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
      <item>
        <title>云计算实战：浅谈私有云环境该如何进行网络规划</title>
        <description>&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;随着私有云管理软件（如ZStack）的普及，越来越多的用户可以利用这些软件快速地搭建私有云平台。
不过在搭建私有云之前，大家都会想：该如何在私有云环境中进行网络规划？
是不是把所有的物理机都连接到交换机，给它们分配一个IP地址就好了呢?&lt;/p&gt;

&lt;p&gt;目前，用户可以利用现有的网络环境快速地搭建一套私有云环境，然而在考虑私有云的隔离性、稳定性、可用性等需求时，应对网络有更好的规划。
今天我们就来谈谈，私有云环境里如何进行网络规划，希望能为计划构建私有云的企业提供一套有效的方案。&lt;/p&gt;

&lt;h2&gt;基本要求：管理网络和数据网络分离&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/cloud-network-model/management-l2-public-l2-merged-local-stroage.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;通常很多企业的服务器都配有超过一块网卡，但是只连接和使用了其中一块。在搭建私有云的过程中，
很容易把网络的数据流量和私有云的管理流量全部使用相同的网卡上。
虽然这样的配置可以工作，但是会存在两个显著的问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ZStack会把需要控制安全访问的连接限制在管理网络，例如Virtual Router的网络控制，云主机的VNC连接。
合并管理网络和数据网络后，就会把限制在管理网络上的安全访问暴露到公网上。&lt;/li&gt;
&lt;li&gt;云主机的网络流量占满网卡的带宽时，ZStack 管理节点无法控制和操作云资源。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;如果只解决第一个问题，我们可以采用给网络划分Vlan的方式，把管理网络和数据网络划分到相同网卡不同的Vlan上。
但是Vlan的方式无法解决第二个问题。所以我们建议用户可以在演示环境中使用单网卡模型快速熟悉私有云的部署。
但是在生产环境中，至少需要把管理网络和数据网络分离。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/cloud-network-model/management-l2-public-l2-seperated.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;在ZStack实际部署过程中，如何将管理网络和数据网络分离呢？
首先，我们需要保证管理节点和物理机上都至少配置了两块网卡，连接到了不同的网络，并且设置了对应的IP 地址。&lt;/p&gt;

&lt;p&gt;其次如果用户使用的是带虚拟路由器（Virtual Router）的网络模型，例如EIP、
&lt;a href=&quot;../tutorials/flat-network-ui.html&quot;&gt;带虚拟路由的扁平网络&lt;/a&gt;，
那么就在创建二层网络（L2 Network）的时候，除了添加一个名为Public-L2、
IP地址空间为172.16.0.0/16的网络外，还需要添加另外一个名为Management-L2，
IP地址范围为192.168.0.0/24的管理网络
（需要将服务器已经占用的IP地址剔除。例如管理节点，物理服务器的IP地址是从192.168.0.1～192.168.0.20，
那么设置的可以用IP地址范围可以为192.168.0.21～192.168.0.254）。
在设置虚拟路由器规格（Virtual Router Offering）的时候，分别把Public-L3 和Management-L3设置到正确的L3位置。
另外在添加物理主机的时候，物理机主机的管理IP需要指定使用物理主机上在192.168.0.0/24网段中对应的IP地址。&lt;/p&gt;

&lt;p&gt;如果用户使用的是&lt;a href=&quot;../tutorials/flat-network-ui-no-vr.html&quot;&gt;不带虚拟路由的扁平网络&lt;/a&gt;。
那么无需特别添加名称为Management-L2的管理网络，只需要添加一个Public-L2的网络。
指定ZStack管理节点通过管理网络控制物理服务器的方法是，在添加物理服务器的时候，
特别指定使用物理主机上在192.168.0.0/24网段中的那个IP地址。&lt;/p&gt;

&lt;p&gt;另外，如果数据网络和管理网络均为千兆网络的时候，
我们还可以让镜像服务器和物理服务器之间的云主机镜像传输的通道与管理网络共享，以节省数据网络的网络流量。
用户只需要在添加镜像服务器（备份存储服务器）的时候，使用镜像服务器上网段在192.168.0.0/24上对应的IP地址。&lt;/p&gt;

&lt;p&gt;在生产环境中，为了保证交换机以及网络的高可用性，往往还会对数据网络构建bond模式。这个时候可能会使用双网卡。&lt;/p&gt;

&lt;p&gt;下面我们来介绍几种典型的网络规划场景：&lt;/p&gt;

&lt;h2&gt;场景一：企业内部小型数据中心（如100台服务器）&lt;/h2&gt;

&lt;p&gt;市场调查表明，目前国内大部分企业的数据中心规模都在100台服务器以下。网络以千兆网络为主，少量万兆网络，
少量依然是百兆网络。存储多以RAID模式的本地存储为主，辅以商业存储（网络共享存储）作为数据备份。
对于这类企业来说，将现有的数据中心迁移到私有云的架构，其实是非常容易的。在充分的利用现有资源的情况下，
可以快速地提高企业的生产效率。&lt;/p&gt;

&lt;p&gt;由于主要采用本地存储和千兆网络环境。我们推荐使用：私有云中的扁平网络模型+本地存储。
这种模式的好处是，最大化地利用现有资源。既提升性能和安全性，又能快速实施。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/cloud-network-model/management-l2-public-l2-seperated-local-stroage.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;在上一幅图中，我们可以看到两个网络，分别连接了ZStack管理节点，物理服务器，镜像服务器。
ZStack管理节点通过192.168.0.0/24的网络连接并控制物理服务器和镜像服务器。
物理服务器上的云主机则通过172.16.0.0/16的网络进行数据交换，透过企业的防火墙访问Internet。&lt;/p&gt;

&lt;h2&gt;场景二：使用NAS的企业数据中心&lt;/h2&gt;

&lt;p&gt;与场景一的环境不同，企业网络可能已经升级到万兆网络，并且购买了提供了NFS的网络访问的商业存储。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/cloud-network-model/management-l2-public-l2-seperated-nas.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;这种场景过渡到私有云也非常的容易！只需在选择主存储的时候，选择NFS的方式。
另外由于使用了网络共享存储，云主机的磁盘IO访问都会通过网络访问NFS主存储。
因此单一的数据网络很可能无法满足大量的磁盘读写请求。我们需要新划分一个存储网络（万兆）。
为什么需要万兆呢？因为云主机的云盘都是放在NFS存储中，如果只是千兆的网络环境，
即使仅有一个云主机在进行磁盘操作，最多也只能使用到1gbps的带宽，理论磁盘读写的上限为125MB/s。
考虑到多云主机以及网络传输效率，千兆网络将会极大的限制云主机的磁盘IO性能。&lt;/p&gt;

&lt;p&gt;在使用存储网络的时候，我们需要先将物理服务器，NFS主存储，镜像服务器，管理节点上空闲的网卡连接到新的存储网络，
并且配置存储网络的IP地址（例如192.168.100.0/24网段）。在添加NFS主存储和镜像服务器的时候，使用这些IP地址即可。&lt;/p&gt;

&lt;p&gt;场景二的优势是，计算和存储分离！云主机可以在线迁移，一旦计算节点失效，云主机可以快速恢复。
商业NFS主存储在数据的高可靠、高可用、性能方面都有较好的表现。
当然采购商业NFS主存储的价格会是一笔不小的费用！再考虑到HA模式需要对万兆存储网络进行双网络的配置，
整个网络的投资也将提高不少。&lt;/p&gt;

&lt;h2&gt;场景三：使用分布式主存储的企业数据中心&lt;/h2&gt;

&lt;p&gt;由于场景二中描述的商业NFS主存储可能会有额外的较大开销，以及考虑到目前流行的软件定义存储和分布式存储，
一些有较强运维能力的公司开始尝试使用Ceph来搭建存储中心。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/cloud-network-model/management-l2-public-l2-seperated-ceph.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;这种模式也需要用户拥有万兆的网络环境，而在ZStack中搭建分布式存储网络模型，则和NAS架构相比，
仅需在添加主存储时，选择使用Ceph，并且指定192.168.100.0/24网段Ceph的MonURLs。&lt;/p&gt;

&lt;p&gt;使用Ceph的好处有：成本相对低廉（完全使用免费开源软件搭建，且不考虑聘请额外的Ceph运维人员），
数据“没有”单点故障（要求运维良好），数据相对安全（多副本存储于不同的机器）。
注意到当前市场上以有一部分公司都已经在生产环境中使用了Ceph。
不过考虑到目前的市场反馈，保证Ceph稳定性，如果中小公司打算采用Ceph方案，
建议请联系提供专业Ceph解决方案的厂商，如XSKY。&lt;/p&gt;

&lt;p&gt;另外，细心的读者可能会问，我们为什么图中使用计算和存储分离的Ceph架构，而不是计算和存储融合的架构。
这个地方主要也是考虑到Ceph在大IO（例如计算节点上云主机较多，且IO操作比较频繁）的时候，会消耗大量的物理机CPU。
如果采用融合的架构，如果不进行有效的隔离，可能会导致云主机的效率降低。当然，具体采用何种分布式架构，
还需要客户根据自己的场景来进行规划，也可以咨询专业的Ceph厂商来提供建议。&lt;/p&gt;

&lt;h2&gt;总结&lt;/h2&gt;

&lt;p&gt;至此，我们介绍了三种网络架构，分别适用于本地存储、NAS存储、以及分布式存储。
希望这篇文章可以帮助使用ZStack的用户快速的构建稳定可靠的私有云环境！&lt;/p&gt;

&lt;p&gt;对ZStack和相关私有云部署感兴趣的用户，还可以加入ZStack QQ群（410185063）获取更多的帮助。&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/zstack-cloud-network-model.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/zstack-cloud-network-model.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
      <item>
        <title>ZStack v1.0发布</title>
        <description>&lt;h2&gt;ZStack 1.0 版本今天发布&lt;/h2&gt;

&lt;p&gt;ZStack 1.0版本今天发布，欢迎大家下载试用。在该版本中，我们加入了以下新功能。&lt;/p&gt;

&lt;h2&gt;新增功能&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#flatnetworkprovider&quot;&gt;Flat Network Provider，分布式DHCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#userdata&quot;&gt;User Data，支持cloud-init&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#localstoragemigration&quot;&gt;本地存储的磁盘迁移&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#isoapi&quot;&gt;ISO API，支持加载/卸载ISO，调整VM启动顺序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#spice&quot;&gt;Spice支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#i18n&quot;&gt;i18n，支持中文、繁体中文、英文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vmstate&quot;&gt;VM状态实时捕获&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#deletionpolicy&quot;&gt;资源删除策略控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cpumodel&quot;&gt;CPU型号Passthrough，支持嵌套虚拟化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zstackimage&quot;&gt;22M超小试用镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#chineseusermanual&quot;&gt;中文用户手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;安装升级&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#install&quot;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgrade&quot;&gt;升级&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgradenetwork&quot;&gt;Virtual Router Provider升级到Flat Network Porvider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3 id=&quot;flatnetworkprovider&quot;&gt;1. Flat Network Provider&lt;/h3&gt;


&lt;p&gt;Flat Network Provider是一种新的网络服务提供模式，它提供DHCP和Userdata服务。相对于已有的Virtual Router Provider，Flat Network Provider最大的优势在于不需要启动一个Virtual Router虚拟机就可以为VM提供DHCP服务，这大大简化了部署一个扁平网络的复杂度。此外，由于采用了分布式DHCP系统，Flat Network Provider不存在传统DHCP系统的单点失败情况，因为每个物理机上都会有一个DHCP服务器服务运行在该物理机上的VM。在高并发创建或启动VM的时候，DHCP的负载会被分发到不同物理机上去，大大提供了系统整体的并发性。下图是分布式DHCP系统的一个总体架构图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1.0/1.PNG&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;h3&gt;1.1 使用Flat Network Provider&lt;/h3&gt;

&lt;p&gt;当你在创建一个L3网络的时候，在最后一步选择网络服务时做如下操作：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1.0/2.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;选择“Flat Network Service Provider&quot;做为网络服务提供商&lt;/li&gt;
&lt;li&gt;选择DHCP服务&lt;/li&gt;
&lt;li&gt;点击“添加”按钮&lt;/li&gt;
&lt;li&gt;重复步骤2和3添加user data服务&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;bs-callout bs-callout-info&quot;&gt;
&lt;h4&gt;你可以将Flat Network Provider和Virtual Router Provider混合使用&lt;/h4&gt;
尽管Flat Network Provider的主要目的是为扁平网络情况提供DHCP服务器，你也可以讲它跟已有的Virtual Router Provider混合使用。
例如使用Flat Network Provider提供DHCP，用Virtual Router Provider提供DNS/SNAT等其他服务。
&lt;/div&gt;




&lt;h3 id=&quot;userdata&quot;&gt; 2. User Data &lt;/h3&gt;


&lt;p&gt;标准的&lt;a href=&quot;https://cloudinit.readthedocs.org/en/latest/&quot;&gt;Cloud-init&lt;/a&gt;在该版本中得到支持。要使用user data，你需要在VM的操作系统中安装cloud-init包。User data使用了ZStack的系统标签（System Tags）机制实现，其格式为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    userdata::{the content}
    例如：
    userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你应该已经注意到了上面的user data中包含了一个非常长的字符串，它其实是cloud-init的YAML配置文件minify后的结果。因为ZStack的CLI工具只能接受单行字符串，在传递cloud-init YAML配置的时候你需要先把它变成一个单行的字符串。你可以使用下面脚本：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sed &#39;:a;N;$!ba;s/\n/\\n/g&#39; YAML文件路径
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出的长字符串会打印到屏幕，你可以复制黏贴。&lt;/p&gt;

&lt;h3&gt;2.1 使用User Data&lt;/h3&gt;

&lt;p&gt;当你在VM的操作系统中安装完cloud-init包后，我们强烈建议你把它保存成一个模板，这样从该模板新建的VM都会有cloud-init的包。使用下面步骤安装cloud-init包：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;yum install cloud-init 或 apt-get install cloud-init&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在/etc/cloud/cloud.cfg文件中添加如下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; datasource_list:
   - CloudStack
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;cloud-init支持AWS，CloudStack，OpenStack多种获取user data的方式，ZStack使用的是CloudStack方式，即用DHCP服务器提供user data。&lt;/p&gt;

&lt;h4&gt;2.1.1 添加User Data&lt;/h4&gt;

&lt;p&gt;你可以在新建VM的时候指定user data：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateVmInstance name=vm imageUuid=d720ff0c60ee48d3a2e6263dd3e12c33 instanceOfferingUuid=76789b62aeb542a5b4b8b8488fbaced2 l3NetworkUuids=37d3c4a1e2f14a1c8316a23531e62988,05266285f96245f096f3b7dce671991d defaultL3NetworkUuid=05266285f96245f096f3b7dce671991d systemTags=&#39;userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者对一个已经创建的VM指定user data：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateSystemTag resourceUuid=303bf80af28c4e23b9b8c20d4267356b resourceType=VmInstanceVO tag=&#39;userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;resourceUuid&lt;/code&gt;是VM的UUID。&lt;/p&gt;

&lt;h4&gt;2.1.2 获得user data&lt;/h4&gt;

&lt;p&gt;你可以用&lt;code&gt;QuerySystemTag&lt;/code&gt;获取一个VM的user data，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    QuerySystemTag resourceUuid=303bf80af28c4e23b9b8c20d4267356b tag~=userdata%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;resourceUuid&lt;/code&gt;是VM的UUID。&lt;/p&gt;

&lt;h4&gt;2.1.3 删除user data&lt;/h4&gt;

&lt;p&gt;你可以用&lt;code&gt;DeleteTag&lt;/code&gt;从一个VM上删除user data，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    DeleteTag uuid=user_data_tag_uuid
    例如：
    DeleteTag uuid=7813d03bb85840c489789f8df3a5915b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的UUID是system tag的UUID，你可以用获取user data一节的方法拿到。&lt;/p&gt;

&lt;h4&gt;2.1.4 更新user data&lt;/h4&gt;

&lt;p&gt;你可以用&lt;code&gt;UpdateSystemTag&lt;/code&gt;更新一个VM上已有的user data，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateSystemTag uuid=762c3047e05f471ea3fce13f808a50be tag=&#39;userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的UUID是system tag的UUID，你可以用获取user data一节的方法拿到。&lt;/p&gt;

&lt;h4&gt;2.2 注入SSH公钥&lt;/h4&gt;

&lt;p&gt;SSH公钥是用户使用user data最常见的用法，为此我们特别提供了一个专门的system tag，格式为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sshkey::{content}
    例如：
    sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5x3AoWuiZawxXoBxEcOhhdVAST4kJA/cQ2zGnh3yZ/KBU+VILQHTkbNWAaRw3q0UtfpLfVj/KoPFr43qjGF+ud8B/rD7stsAvbNVdms81aBDAFZyiN7dhlwTK+XvCMhl4RxHUItm7+Y7gzb8jTHPoqlPzAw4r8enqhNf9ABG+kaXIDa0FPhVaMPoLzHWjTe34ONIBlxsY/y1Zle49vPVYS7oAHQTc7ly7bnGXffNJ18uF5M7HPUgsIDum8KICa2LmnXJeB2M9XZtXtJUdR1ZKXeQpRtikAm3G3CwFkDxWnx31dGr0lLa2aZ88LQ2iP8nb2NK58aKb4I9Aq19k44Rl root@yyy
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;2.2.1 注入SSH公钥&lt;/h5&gt;

&lt;p&gt;你可以在创建VM的时候指定公钥，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateVmInstance name=vm imageUuid=d720ff0c60ee48d3a2e6263dd3e12c33 instanceOfferingUuid=76789b62aeb542a5b4b8b8488fbaced2 l3NetworkUuids=37d3c4a1e2f14a1c8316a23531e62988,05266285f96245f096f3b7dce671991d defaultL3NetworkUuid=05266285f96245f096f3b7dce671991d systemTags=&#39;sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5x3AoWuiZawxXoBxEcOhhdVAST4kJA/cQ2zGnh3yZ/KBU+VILQHTkbNWAaRw3q0UtfpLfVj/KoPFr43qjGF+ud8B/rD7stsAvbNVdms81aBDAFZyiN7dhlwTK+XvCMhl4RxHUItm7+Y7gzb8jTHPoqlPzAw4r8enqhNf9ABG+kaXIDa0FPhVaMPoLzHWjTe34ONIBlxsY/y1Zle49vPVYS7oAHQTc7ly7bnGXffNJ18uF5M7HPUgsIDum8KICa2LmnXJeB2M9XZtXtJUdR1ZKXeQpRtikAm3G3CwFkDxWnx31dGr0lLa2aZ88LQ2iP8nb2NK58aKb4I9Aq19k44Rl root@yyy&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以给一个已有的VM指定公钥，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateSystemTag resourceType=VmInstanceVO resourceUuid=606d9a2fa723407c93438789eaf72cea tag=&quot;sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdlfgEu4SmgAXaEhLtNljm4cqowdFSyOH7NtheqzZROaRNRJOYKCABUZLmsLv1pl3Av+m1vUUILPWNymxdCnhuaxl/vFtvyWrLChKR8s2Cpl24uFpvHaWO6JLd/RnSwj8LCsCreJ3Twq77T9MCwDVl15WNjn3WKuPfFKxmW7gQTDyDK1XX35n7RYSadurdVNmJTAsQWmszmGeBDVO6U7spRtH7nNrNAMVjaOHrPp5NbMRBVCyHfj1UY71bnIdVCa2mY/RtjIkcj4JNBaQ0JPnP1jw4Ig8WVkjn74T7U4chUHmu8jzwhv+++F7EGLSNdb85RKmY5IdHDd+dRuK3Rx67 root@bji-bm-node3&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;2.2.2 获得公钥&lt;/h5&gt;

&lt;p&gt;你可以用&lt;code&gt;QuerySystemTag&lt;/code&gt;获得一个VM的公钥，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    QuerySystemTag resourceUuid=303bf80af28c4e23b9b8c20d4267356b tag~=sshkey%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;resourceUuid&lt;/code&gt;是VM的UUID&lt;/p&gt;

&lt;h5&gt;2.2.3 删除公钥&lt;/h5&gt;

&lt;p&gt;你可以用&lt;code&gt;DeleteTag&lt;/code&gt;从VM上删除一个公钥：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    DeleteTag uuid=user_data_tag_uuid
    例如：
    DeleteTag uuid=7813d03bb85840c489789f8df3a5915b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的UUID是system tag的UUID，你可以用获取公钥一节的方法拿到。&lt;/p&gt;

&lt;h5&gt;2.2.4 更新公钥&lt;/h5&gt;

&lt;p&gt;你可以使用&lt;code&gt;UpdateSystemTag&lt;/code&gt;更新一个VM的公钥，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateSystemTag uuid=762c3047e05f471ea3fce13f808a50be tag=&#39;sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdlfgEu4SmgAXaEhLtNljm4cqowdFSyOH7Nthe    qzZROaRNRJOYKCABUZLmsLv1pl3Av+m1vUUILPWNymxdCnhuaxl/vFtvyWrLChKR8s2Cpl24uFpvHaWO6JLd/RnSwj8LCsCreJ3Twq77T9MCwDVl15WNjn3WKuPfFKxmW7gQTDyDK1XX35n7RYSadurdVNmJTAsQWmszmGeBDVO6U7spRtH7nNrNA    MVjaOHrPp5NbMRBVCyHfj1UY71bnIdVCa2mY/RtjIkcj4JNBaQ0JPnP1jw4Ig8WVkjn74T7U4chUHmu8jzwhv+++F7EGLSNdb85RKmY5IdHDd+dRuK3Rx67 root@bji-bm-node3&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的UUID是system tag的UUID，你可以用获取公钥一节的方法拿到。&lt;/p&gt;

&lt;div class=&quot;bs-callout bs-callout-warning&quot;&gt;
&lt;h4&gt;你或许需要重启VM让公钥生效&lt;/h4&gt;

如果你是给一个已有的VM创建公钥或者更新公钥，你需要做如下步骤：&lt;br&gt;
1. 删除在VM中删除已有的cloud-init数据，rm -rf /var/lib/cloud&lt;br&gt;
2. 重启VM&lt;br&gt;

对于给新建的VM指定公钥，你无需做这些步骤。
&lt;/div&gt;




&lt;h3 id=&quot;localstoragemigration&quot;&gt; 3. 本地存储的磁盘迁移 &lt;/h3&gt;


&lt;p&gt;在本版本中，你可以在本地存储的不同物理机间迁移虚拟机的磁盘(volume)，解决使用本地存储虚拟机不能迁移的的问题。&lt;/p&gt;

&lt;h3&gt;3.1 迁移磁盘&lt;/h3&gt;

&lt;p&gt;你可以用&lt;code&gt;LocalStorageMigrateVolume&lt;/code&gt;迁移VM的root volume和data volume。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    LocalStorageMigrateVolume volumeUuid=cdbda88fef1a42f386ff111b729159d9 destHostUuid=252d484d93e64fea946148097162b60f
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;3.2 迁移规则&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;如果迁移的是root volume，需要先关闭虚拟机&lt;/li&gt;
&lt;li&gt;如果迁移的是data volume，需要先将data volume从虚拟机卸载（detach)&lt;/li&gt;
&lt;li&gt;如果volume上有快照（snapshots），快照会被一并迁移&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;3.3 使用磁盘迁移迁移VM&lt;/h3&gt;

&lt;p&gt;你可以使用磁盘迁移功能在不同物理机上冷迁移虚拟机：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;关闭虚拟机&lt;/li&gt;
&lt;li&gt;将虚拟机的root volume迁移到目的物理机&lt;/li&gt;
&lt;li&gt;启动虚拟机&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;ZStack实际是支持本地存储的虚拟机热迁移的。但在我们的压力测试中，我们发现KVM的带存储热迁移不稳定。我们在一个虚拟机中做一次Linux内核编译，并在这个过程中做带存储热迁移，迁移完成后重启虚拟机，发现虚拟机磁盘损坏。为了保护用户数据，我们在API层面关闭了虚拟机带存储热迁移的功能。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;isoapi&quot;&gt; 4. ISO API &lt;/h3&gt;


&lt;p&gt;在该版本中，你可以使用API向一个VM加载或卸载一个ISO，并且改变VM的启动设备顺序。&lt;/p&gt;

&lt;h3&gt;4.1 添加ISO&lt;/h3&gt;

&lt;p&gt;你可以用&lt;code&gt;AttachIsoToVmInstance&lt;/code&gt;向一个VM添加一个ISO，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    AttachIsoToVmInstance vmInstanceUuid=d4a83b0394b44482bbcb964b4dbe991c isoUuid=815dcd3d83dd429298ba2c9b1685c1ad
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4.2 卸载ISO&lt;/h3&gt;

&lt;p&gt;你可以用&lt;code&gt;DetachIsoFromVmInstance&lt;/code&gt;从一个VM上卸载一个ISO，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    DetachIsoFromVmInstance vmInstanceUuid=d4a83b0394b44482bbcb964b4dbe991c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;uuid&lt;/code&gt;是VM的UUID。&lt;/p&gt;

&lt;h3&gt;4.3 设置启动设备顺序&lt;/h3&gt;

&lt;p&gt;你可以用&lt;code&gt;SetVmBootOrder&lt;/code&gt;设置VM的启动设备顺序，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    SetVmBootOrder uuid=303bf80af28c4e23b9b8c20d4267356b bootOrder=HardDisk,CdRom
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;uuid&lt;/code&gt;是VM的UUID。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;合法的启动顺序包括：HardDisk和CdRom&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;4.4 获得启动设备顺序&lt;/h3&gt;

&lt;p&gt;你可以用&lt;code&gt;GetVmBootOrder&lt;/code&gt;获得VM的启动设备顺序，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    GetVmBootOrder uuid=303bf80af28c4e23b9b8c20d4267356b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;uuid&lt;/code&gt;是VM的UUID。&lt;/p&gt;

&lt;h3&gt;4.5 设备启动顺序规则&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如果使用ISO创建一个VM，则该VM的启动设备自动被设置为CdRom。当操作系统安装完成并重启后，启动顺序自动改成HardDisk&lt;/li&gt;
&lt;li&gt;如果使用template创建一个VM，改VM的启动设备自动被设置为HardDisk&lt;/li&gt;
&lt;li&gt;加载一个ISO到一个VM不改变其启动顺序。如果需要，你可以用&lt;code&gt;SetVmBootOrder&lt;/code&gt;更改&lt;/li&gt;
&lt;/ul&gt;


&lt;h3 id=&quot;spice&quot;&gt; 5. Spice支持 &lt;/h3&gt;


&lt;p&gt;在该版本中，我们支持Spice协议作为VM图形终端协议。你可以通过更改全局选项进行设置，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=kvm name=vm.consoleMode value=spice
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;合法的协议包括：vnc和spice&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;目前ZStack还没有针对spice的console proxy，你需要下载一个spice客户端直接连接VM在物理机上的spice端口。你可以用下面的API来获得物理机的IP和VM的spice端口号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt;GetVmConsoleAddress uuid=9cd68155905e47b5b0698ecba9126242
    {
        &quot;hostIp&quot;: &quot;192.168.199.136&quot;,
        &quot;port&quot;: 5902,
        &quot;protocol&quot;: &quot;spice&quot;,
        &quot;success&quot;: true
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;uuid&lt;/code&gt;是VM的UUID。感谢来至武汉纺织大学的Nan Su(fengcai_ji@163.com)同学贡献了这个功能。&lt;/p&gt;

&lt;h3 id=&quot;i18n&quot;&gt; 6. I18N支持 &lt;/h3&gt;


&lt;p&gt;在该版本中，我们支持多语言版本，目前支持英文和中文，你可以通过点击语言图标进行切换。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1.0/3.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;感谢来自武汉纺织大学的Nan Su(fengcai_ji@163.com), Zhiqiang Hu(1063751150@qq.com)u Qi Wei(804470533@qq.com), Yu Chen(ppak@sohu.com), Wanling Xue(1962670706@qq.com)贡献了该功能！&lt;/p&gt;

&lt;p&gt;感谢台湾&lt;a href=&quot;http://www.baiyuan.com.tw/&quot;&gt;百原科技&lt;/a&gt;提供繁体版UI翻译！&lt;/p&gt;

&lt;h3 id=&quot;vmstate&quot;&gt; 7. VM状态的实时捕获 &lt;/h3&gt;


&lt;p&gt;在该版本中，我们支持VM状态的实时捕获。如果用户绕过ZStack对VM进行了操作，其状态会实时的发送回管理节点进行更新。也就是说你可以在VM内部
通过halt命令来关闭虚拟机，而不用通过ZStack UI。虽然不推荐，但如果你用virsh关闭或者启动了一个VM，其在ZStack中的状态也会被实时更新。&lt;/p&gt;

&lt;h3 id=&quot;deletionpolicy&quot;&gt; 8. 资源删除策略控制 &lt;/h3&gt;


&lt;p&gt;从该版本开始，我们对一些关键资源实现了删除策略控制，用户可以控制资源的删除方式，以防误删除。目前支持删除策略控制的资源包括：虚拟机、磁盘(volume)、镜像（image）。目前支持的删除策略包括：&lt;strong&gt;Direct（直接删除）&lt;/strong&gt;, &lt;strong&gt;Delay（延时删除）&lt;/strong&gt;, &lt;strong&gt;Never（从不删除）&lt;/strong&gt;三种。默认的策略是Delay。&lt;/p&gt;

&lt;h3&gt;8.1 策略规则&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Direct: 资源会直接被物理删除，并在数据库中删除，无法恢复。&lt;/li&gt;
&lt;li&gt;Delay：资源会首先在数据库中被标记成删除，但不会物理删除。在一定的时间内，用户可以使用API对资源进行恢复，在此期间资源仍然物理存在，所以它还会占用物理空间（例如磁盘空间）。在超过一定时间后，资源会被物理删除，无法再恢复。&lt;/li&gt;
&lt;li&gt;Never：资源数据库中标记成删除，永远不会被物理删除，一直占用物理空间。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;8.2 虚拟机删除策略&lt;/h3&gt;

&lt;p&gt;你可以更改虚拟机的删除策略，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=vm name=deletionPolicy value=Direct
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果删除策略是Delay，你可以指定延时删除的时间，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=vm name=expungePeriod value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;单位为秒。在上面的例子中，虚拟机在被标记成删除后的1个小时后被测地删除。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;如果删除策略是Delay，ZStack会周期性的去检查资源是否应该被物理删除，你可以控制周期性轮询的时间：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=vm name=expungeInterval value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;单位为秒&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;你也可以恢复一个处于删除状态的虚拟机：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    RecoverVmInstance vmInstanceUuid=8c4c4c0bbac7441fb056d0d6e2168996
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;8.3 镜像删除策略&lt;/h3&gt;

&lt;p&gt;跟虚拟机一样，你可以改变相应的设置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=image name=deletionPolicy value=Direct
    UpdateGlobalConfig category=image name=expungePeriod value=3600
    UpdateGlobalConfig category=image name=expungeInterval value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以恢复一个处于删除状态的镜像：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    RecoverImage imageUuid=8c4c4c0bbac7441fb056d0d6e2168996
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果镜像存在于多个备份存储，你只想恢复在某些备份存储上的镜像，可以通过额外参数指定：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    RecoverImage imageUuid=8c4c4c0bbac7441fb056d0d6e2168996 backupStorageUuids=36c27e8ff05c4780bf6d2fa65700f22e
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;8.4 磁盘删除策略&lt;/h3&gt;

&lt;p&gt;跟虚拟机一样，你可以通过改变相应的设置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=volume name=deletionPolicy value=Direct
    UpdateGlobalConfig category=volume name=expungePeriod value=3600
    UpdateGlobalConfig category=volume name=expungeInterval value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以恢复一个处于删除状态数据磁盘(data volume)：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    RecoverDataVolume uuid=36c27e8ff05c4780bf6d2fa65700f22e
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;根磁盘(root volume)的恢复是在恢复虚拟机的时候自动恢复。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;cpumodel&quot;&gt; 9. CPU型号Paasthrough(支持嵌套虚拟化) &lt;/h3&gt;


&lt;p&gt;你可以通过改变全局配置让虚拟机获得跟物理机CPU相同的型号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=kvm name=vm.cpuMode value=host-model
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;支持三种模式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;none: CPU型号为QEMU模拟器&lt;/li&gt;
&lt;li&gt;host-model：CPU类型为物理机CPU类型&lt;/li&gt;
&lt;li&gt;host-passthrough：CPU型号跟物理机CPU完全一样&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;当模式为&lt;code&gt;host-model&lt;/code&gt;和&lt;code&gt;host-passthrough&lt;/code&gt;时，虚拟机可以获得嵌套虚拟化功能。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;使用该功能可能会影响虚拟机热迁移。因为热迁移时会检查虚拟机CPU型号，如果两台物理机的CPU型号不同，会导致虚拟机热迁移失败。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;zstackimage&quot;&gt; 10. 超小试用镜像 &lt;/h3&gt;


&lt;p&gt;在1.0我们为ZStack专门构建了一个只有22M的测试镜像，支持网络、SSHD，用户可以用它来做一些基本测试。相比于之前的ttylinux，该镜像支持了ACPID，支持优雅关机。下载链接：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     http://download.zstack.org/templates/zstack-image-0.0.7.qcow2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;感谢Robert Yang(@linuxer)提供该镜像!&lt;/p&gt;

&lt;h3 id=&quot;chineseusermanual&quot;&gt;11. 中文用户手册&lt;/h3&gt;


&lt;p&gt;用户手册已经完全汉化，可以访问&lt;a href=&quot;http://zstack-cn.readthedocs.org/zh/latest/&quot;&gt;ZStack中文用户手册&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;install&quot;&gt; 12. 安装 &lt;/h3&gt;


&lt;p&gt;你可以通过下面方式安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.0/1.0.0/zstack-installer-1.0.0-0201.bin -O zstack-installer-1.0.0-0201.bin
    bash zstack-installer-1.0.0-0201.bin -R aliyun
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;这里&lt;code&gt;-R aliyun&lt;/code&gt;参数指定使用阿里云的源进行安装，你也可以使用&lt;code&gt;-R 163&lt;/code&gt;使用网易的源。我们推荐使用阿里云的源&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id=&quot;upgrade&quot;&gt; 13. 升级 &lt;/h3&gt;


&lt;p&gt;一如既往的，我们支持一键无缝升级：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.0/1.0.0/zstack-installer-1.0.0-0201.bin -O zstack-installer-1.0.0-0201.bin
    bash zstack-installer-1.0.0-0201.bin -u
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;upgradenetwork&quot;&gt; 14. 用Flat Network Provider替换Virtual Router Provider &lt;/h3&gt;


&lt;p&gt;如果你的网络模式是扁平网络，并且使用的是Virtual Rotuer Provider作为网络提供商，你可以使用1.0的Flat Network Provider替换它，这样你就不再需要virtual router VM来充当DHCP服务器了。假定你要替换网络提供商的L3网络的UUID是1a82c2691978476fa6cefa36bb9d4bfd，参考以下步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获得当前L3网络的网络提供商UUID&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceL3NetworkRef l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd
 {
     &quot;inventories&quot;: [
         {
             &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
             &quot;networkServiceType&quot;: &quot;DNS&quot;
         },
         {
             &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
             &quot;networkServiceType&quot;: &quot;DHCP&quot;
         }
     ],
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从L3网络上卸载Virtual Router Provider&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;DetachNetworkServiceFromL3Network  l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;:[&quot;DHCP&quot;,&quot;DNS&quot;]}&#39;
 {
     &quot;inventory&quot;: {
         &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;dns&quot;: [
             &quot;8.8.8.8&quot;
         ],
         &quot;ipRanges&quot;: [
             {
                 &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                 &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;name&quot;: &quot;ipr-dk7p&quot;,
                 &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                 &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                 &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
             }
         ],
         &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;name&quot;: &quot;l3-etpz&quot;,
         &quot;networkServices&quot;: [],
         &quot;state&quot;: &quot;Enabled&quot;,
         &quot;system&quot;: false,
         &quot;type&quot;: &quot;L3BasicNetwork&quot;,
         &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
         &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
     },
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;注意这里的参数networkServices是一个map， key是第一步里返回的networkServiceProviderUuid，value是第一步里返回的networkServiceType&lt;/p&gt;&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获得Flat Network Provider的UUID&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceProvider type=Flat
 {
     &quot;inventories&quot;: [
         {
             &quot;attachedL2NetworkUuids&quot;: [
                 &quot;9ec8cad681d1424fa7eda2447edae142&quot;
             ],
             &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
             &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
             &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
             &quot;networkServiceTypes&quot;: [
                 &quot;DHCP&quot;,
                 &quot;Userdata&quot;
             ],
             &quot;type&quot;: &quot;Flat&quot;,
             &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
         }
     ],
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获得承载L3网络的L2网络的UUID&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryL3Network fields=l2NetworkUuid, uuid=1a82c2691978476fa6cefa36bb9d4bfd
 {
     &quot;inventories&quot;: [
         {
             &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;
         }
     ],
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加载Flat Network Provider到L2网络&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceProviderToL2Network l2NetworkUuid=9ec8cad681d1424fa7eda2447edae142 networkServiceProviderUuid=17864f985e584a9ba4cd81de215212ce
 {
     &quot;inventory&quot;: {
         &quot;attachedL2NetworkUuids&quot;: [
             &quot;9ec8cad681d1424fa7eda2447edae142&quot;
         ],
         &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
         &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
         &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
         &quot;networkServiceTypes&quot;: [
             &quot;DHCP&quot;,
             &quot;Userdata&quot;
         ],
         &quot;type&quot;: &quot;Flat&quot;,
         &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
     },
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加载Flat Network Provider的服务到三层网络&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceToL3Network l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;17864f985e584a9ba4cd81de215212ce&quot;:[&quot;DHCP&quot;,&quot;Userdata&quot;]}&#39;
 {
     &quot;inventory&quot;: {
         &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;dns&quot;: [
             &quot;8.8.8.8&quot;
         ],
         &quot;ipRanges&quot;: [
             {
                 &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                 &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;name&quot;: &quot;ipr-dk7p&quot;,
                 &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                 &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                 &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
             }
         ],
         &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;name&quot;: &quot;l3-etpz&quot;,
         &quot;networkServices&quot;: [
             {
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                 &quot;networkServiceType&quot;: &quot;DHCP&quot;
             },
             {
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                 &quot;networkServiceType&quot;: &quot;Userdata&quot;
             }
         ],
         &quot;state&quot;: &quot;Enabled&quot;,
         &quot;system&quot;: false,
         &quot;type&quot;: &quot;L3BasicNetwork&quot;,
         &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
         &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
     },
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除virtualrouter ,删除virtual router offering&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryVirtualRouterVm
 {
     &quot;inventories&quot;: [
         {
             &quot;allVolumes&quot;: [
                 {
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;description&quot;: &quot;Root volume for VM[uuid:c5a966cb87d644649952daf683f89e26]&quot;,
                     &quot;deviceId&quot;: 0,
                     &quot;format&quot;: &quot;qcow2&quot;,
                     &quot;installPath&quot;: &quot;/zstack_ps/rootVolumes/acct-36c27e8ff05c4780bf6d2fa65700f22e/vol-8eeaa9cb4c1045a2825f8815fed69d72/8eeaa9cb4c1045a2825f8815fed69d72.qcow2&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:59 PM&quot;,
                     &quot;name&quot;: &quot;ROOT-for-virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;primaryStorageUuid&quot;: &quot;4bff4e2d266f480ead596752d14ff3b5&quot;,
                     &quot;rootImageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
                     &quot;size&quot;: 467206656,
                     &quot;state&quot;: &quot;Enabled&quot;,
                     &quot;status&quot;: &quot;Ready&quot;,
                     &quot;type&quot;: &quot;Root&quot;,
                     &quot;uuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
                     &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                 }
             ],
             &quot;allocatorStrategy&quot;: &quot;LeastVmPreferredHostAllocatorStrategy&quot;,
             &quot;applianceVmType&quot;: &quot;VirtualRouter&quot;,
             &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
             &quot;cpuNum&quot;: 1,
             &quot;cpuSpeed&quot;: 2,
             &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
             &quot;defaultRouteL3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;hostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
             &quot;hypervisorType&quot;: &quot;KVM&quot;,
             &quot;imageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
             &quot;instanceOfferingUuid&quot;: &quot;9cec7bd6324445a184351ffb7d32f970&quot;,
             &quot;lastHostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:07:20 PM&quot;,
             &quot;managementNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;memorySize&quot;: 536870912,
             &quot;name&quot;: &quot;virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;platform&quot;: &quot;Linux&quot;,
             &quot;publicNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;rootVolumeUuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
             &quot;state&quot;: &quot;Running&quot;,
             &quot;status&quot;: &quot;Connected&quot;,
             &quot;type&quot;: &quot;ApplianceVm&quot;,
             &quot;uuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;,
             &quot;vmNics&quot;: [
                 {
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;deviceId&quot;: 0,
                     &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                     &quot;ip&quot;: &quot;192.168.201.195&quot;,
                     &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;mac&quot;: &quot;fa:4c:01:68:77:00&quot;,
                     &quot;metaData&quot;: &quot;7&quot;,
                     &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                     &quot;uuid&quot;: &quot;c44e856aa88a42bc85ec30ce8c334c6c&quot;,
                     &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                 }
             ],
             &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
         }
     ],
     &quot;success&quot;: true
 }

 &amp;gt;&amp;gt;&amp;gt;DestroyVmInstance uuid=c5a966cb87d644649952daf683f89e26
 {
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重连所有有VM运行的host&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryHost
 {
     &quot;inventories&quot;: [
         {
             &quot;availableCpuCapacity&quot;: 7180,
             &quot;availableMemoryCapacity&quot;: 1997570048,
             &quot;clusterUuid&quot;: &quot;4282fb61aa55458ea160de138e130298&quot;,
             &quot;createDate&quot;: &quot;Jan 30, 2016 2:51:13 PM&quot;,
             &quot;hypervisorType&quot;: &quot;KVM&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:20 PM&quot;,
             &quot;managementIp&quot;: &quot;192.168.200.187&quot;,
             &quot;name&quot;: &quot;host1&quot;,
             &quot;state&quot;: &quot;Enabled&quot;,
             &quot;status&quot;: &quot;Connected&quot;,
             &quot;totalCpuCapacity&quot;: 7182,
             &quot;totalMemoryCapacity&quot;: 2098233344,
             &quot;username&quot;: &quot;root&quot;,
             &quot;uuid&quot;: &quot;402f8304a50c410486e023512492316b&quot;,
             &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
         },
         {
             &quot;availableCpuCapacity&quot;: 14363,
             &quot;availableMemoryCapacity&quot;: 8321593344,
             &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
             &quot;createDate&quot;: &quot;Jan 30, 2016 3:03:14 PM&quot;,
             &quot;hypervisorType&quot;: &quot;KVM&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:52 PM&quot;,
             &quot;managementIp&quot;: &quot;192.168.200.150&quot;,
             &quot;name&quot;: &quot;host2&quot;,
             &quot;state&quot;: &quot;Enabled&quot;,
             &quot;status&quot;: &quot;Connected&quot;,
             &quot;totalCpuCapacity&quot;: 14364,
             &quot;totalMemoryCapacity&quot;: 8371924992,
             &quot;username&quot;: &quot;root&quot;,
             &quot;uuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
             &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
         }
     ],
     &quot;success&quot;: true
 }

 &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=402f8304a50c410486e023512492316b
 {
     &quot;success&quot;: true
 }

 &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=415fa093b34e4a3d873368104b127115
 {
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 02 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/v1.0.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/v1.0.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
      <item>
        <title>ZStack v1.0 release</title>
        <description>&lt;p&gt;Hello everyone, I am Frank Zhang, the architect of ZStack. Today I am happy to
announce that ZStack v1.0 is released.&lt;/p&gt;

&lt;h1&gt;New Features&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#flatnetworkprovider&quot;&gt;Flat Network Provider, providing distributed DHCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#userdata&quot;&gt;User Data, supporting cloud-init&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#localstoragemigration&quot;&gt;Volume Migration on Local Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#isoapi&quot;&gt;ISO APIs, supporting attach/detach ISO and change VM boot order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#spice&quot;&gt;Spice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#i18n&quot;&gt;i18n, English/Chinese PRC/Chinese Taiwan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vmstate&quot;&gt;VM State Realtime Syncing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#deletionpolicy&quot;&gt;Resource Deletion Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cpumodel&quot;&gt;CPU model pass-through, supporting nested-virtualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zstackimage&quot;&gt;22M Tiny Image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Installation And Upgrade&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#install&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgrade&quot;&gt;Upgrade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgradevr&quot;&gt;Upgrade Virtual Router Provider To Flat Network Provider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;flatnetworkprovider&quot;&gt; 1. Flat Network Provider &lt;/h2&gt;


&lt;p&gt;A new network provider, flat network provider, which provides DHCP, Userdata
services is available for users only using flat networks. Compared to the
virtual router provider, the main advantage of the new provider is you don&#39;t
need a virtual router VM for DHCP server anymore, which simplifies the effort of
deploying a flat network significantly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1.0/1.PNG&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;The flat network provider contains a distributed DHCP system that runs a
DHCP server serving DHCP requests from VMs on the local KVM host. Compared to the
traditional DHCP system that has only one DHCP server, the
distributed DHCP system has no single failure point, and a DHCP server down only
effects VMs on one host. Large DHCP requests originated from concurrent VMs
creation/starting are balanced to different DHCP servers, which improves the overall
concurrency.&lt;/p&gt;

&lt;h3&gt;1.1 Use Flat Network Provider&lt;/h3&gt;

&lt;p&gt;When you create a L3 network, do following steps when selecting network
services:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1.0/2.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;select provider as “Flat Network Service Provider”&lt;/li&gt;
&lt;li&gt;select service DHCP&lt;/li&gt;
&lt;li&gt;click button “Add”&lt;/li&gt;
&lt;li&gt;repeat step 2, 3 to add service Userdata&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;bs-callout bs-callout-info&quot;&gt;

&lt;h4&gt;You can combine flat network provider and virtual router provider&lt;/h4&gt;

The flat network provider is mainly for flat networks which only require DHCP
service. However, you can combine it with the virtual router provider for a
mixed setup. For example, use the flat network provider for DHCP service and use
the virtual router provider for SNAT and EIP services.

&lt;/div&gt;




&lt;h2 id=&quot;userdata&quot;&gt; User Data &lt;/h2&gt;


&lt;p&gt;User data, complying the standard of
&lt;a href=&quot;https://cloudinit.readthedocs.org/en/latest/&quot;&gt;cloud-init&lt;/a&gt;, is enabled by the
userdata service of the flat network provider.&lt;/p&gt;

&lt;div class=&quot;bs-callout bs-callout-info&quot;&gt;

&lt;h4&gt;Your template must install cloud-init package&lt;/h4&gt;
To use the user data, you must install cloud-init package in the VM’s operating
system.
&lt;/div&gt;


&lt;p&gt;The userdata is implemented by ZStack’s system tag mechanism; you can use system
tag APIs to add/update/remove userdata to VMs.&lt;/p&gt;

&lt;p&gt;The format of userdata system is like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    userdata::{the content}

    Example:

    userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;bs-callout bs-callout-info&quot;&gt;
&lt;h4&gt;Minify the cloud-init YAML configuration&lt;/h4&gt;
cloud-init uses a YAML file as user data. As a ZStack system tag is a string, you need
to minify the YAML file before passing to ZStack&#39;s API. Here is simple script to do
that:

&lt;code&gt;sed &#39;:a;N;$!ba;s/\n/\\n/g&#39; the_yaml_file&lt;/code&gt;

&lt;br&gt;
The output will be printed on the screen.
&lt;/div&gt;


&lt;h3&gt;2.1 Use user data&lt;/h3&gt;

&lt;h4&gt;2.1.1 Configure cloud-init in VM&lt;/h4&gt;

&lt;p&gt;To use use data, you need to first configure cloud-init in your VM. We suggest
you doing this once then saving the VM as a template so VMs derived from the
template will have cloud-init installed by default.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;yum install cloud-init or apt-get install cloud-init&lt;/li&gt;
&lt;li&gt;&lt;p&gt;add following content to /etc/cloud/cloud.cfg&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;datasource_list:
  - CloudStack
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;2.2.2 Add user data&lt;/h4&gt;

&lt;p&gt;You can specify user data when creating a new VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateVmInstance name=vm imageUuid=d720ff0c60ee48d3a2e6263dd3e12c33 instanceOfferingUuid=76789b62aeb542a5b4b8b8488fbaced2 l3NetworkUuids=37d3c4a1e2f14a1c8316a23531e62988,05266285f96245f096f3b7dce671991d defaultL3NetworkUuid=05266285f96245f096f3b7dce671991d systemTags=&#39;userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To set the user data to an existing VM, use CreateSystemTag, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateSystemTag resourceUuid=303bf80af28c4e23b9b8c20d4267356b resourceType=VmInstanceVO tag=&#39;userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;resourceUuid&lt;/code&gt; here is the VM&#39;s uuid.&lt;/p&gt;

&lt;h4&gt;2.2.3 Get user data&lt;/h4&gt;

&lt;p&gt;You can use QuerySystemTag to get user data, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    QuerySystemTag resourceUuid=303bf80af28c4e23b9b8c20d4267356b tag~=userdata%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;resourceUuid&lt;/code&gt; here is the VM&#39;s uuid.
 &lt;/p&gt;

&lt;h4&gt;2.2.4 Remove user data&lt;/h4&gt;

&lt;p&gt;You can use DeleteTag to remove user data from a VM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    DeleteTag uuid=user_data_tag_uuid
    For example:
    DeleteTag uuid=7813d03bb85840c489789f8df3a5915b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See above section for retrieving UUID of user data tag.&lt;/p&gt;

&lt;h4&gt;2.2.5 Update user data&lt;/h4&gt;

&lt;p&gt;You can use UpdateSystemTag to update existing user data of a VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateSystemTag uuid=762c3047e05f471ea3fce13f808a50be tag=&#39;userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;uuid&lt;/code&gt; here is the system tag&#39;s UUID. See above section for retrieving UUID of user data tag.&lt;/p&gt;

&lt;h4&gt;2.2.6 Inject SSH public key into a VM&lt;/h4&gt;

&lt;p&gt;As public SSH key injection is a widely used feature for user data, ZStack provides a shortcut system tag for this. The system tag is in format of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sshkey::{content}
    Example:
    sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5x3AoWuiZawxXoBxEcOhhdVAST4kJA/cQ2zGnh3yZ/KBU+VILQHTkbNWAaRw3q0UtfpLfVj/KoPFr43qjGF+ud8B/rD7stsAvbNVdms81aBDAFZyiN7dhlwTK+XvCMhl4RxHUItm7+Y7gzb8jTHPoqlPzAw4r8enqhNf9ABG+kaXIDa0FPhVaMPoLzHWjTe34ONIBlxsY/y1Zle49vPVYS7oAHQTc7ly7bnGXffNJ18uF5M7HPUgsIDum8KICa2LmnXJeB2M9XZtXtJUdR1ZKXeQpRtikAm3G3CwFkDxWnx31dGr0lLa2aZ88LQ2iP8nb2NK58aKb4I9Aq19k44Rl root@yyy
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;2.2.7 Add public SSH key&lt;/h5&gt;

&lt;p&gt;You can do this when you creating a VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateVmInstance name=vm imageUuid=d720ff0c60ee48d3a2e6263dd3e12c33 instanceOfferingUuid=76789b62aeb542a5b4b8b8488fbaced2 l3NetworkUuids=37d3c4a1e2f14a1c8316a23531e62988,05266285f96245f096f3b7dce671991d defaultL3NetworkUuid=05266285f96245f096f3b7dce671991d systemTags=&#39;sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5x3AoWuiZawxXoBxEcOhhdVAST4kJA/cQ2zGnh3yZ/KBU+VILQHTkbNWAaRw3q0UtfpLfVj/KoPFr43qjGF+ud8B/rD7stsAvbNVdms81aBDAFZyiN7dhlwTK+XvCMhl4RxHUItm7+Y7gzb8jTHPoqlPzAw4r8enqhNf9ABG+kaXIDa0FPhVaMPoLzHWjTe34ONIBlxsY/y1Zle49vPVYS7oAHQTc7ly7bnGXffNJ18uF5M7HPUgsIDum8KICa2LmnXJeB2M9XZtXtJUdR1ZKXeQpRtikAm3G3CwFkDxWnx31dGr0lLa2aZ88LQ2iP8nb2NK58aKb4I9Aq19k44Rl root@yyy&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or add the SSH key to an existing VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateSystemTag resourceType=VmInstanceVO resourceUuid=606d9a2fa723407c93438789eaf72cea tag=&quot;sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdlfgEu4SmgAXaEhLtNljm4cqowdFSyOH7NtheqzZROaRNRJOYKCABUZLmsLv1pl3Av+m1vUUILPWNymxdCnhuaxl/vFtvyWrLChKR8s2Cpl24uFpvHaWO6JLd/RnSwj8LCsCreJ3Twq77T9MCwDVl15WNjn3WKuPfFKxmW7gQTDyDK1XX35n7RYSadurdVNmJTAsQWmszmGeBDVO6U7spRtH7nNrNAMVjaOHrPp5NbMRBVCyHfj1UY71bnIdVCa2mY/RtjIkcj4JNBaQ0JPnP1jw4Ig8WVkjn74T7U4chUHmu8jzwhv+++F7EGLSNdb85RKmY5IdHDd+dRuK3Rx67 root@bji-bm-node3&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;2.2.8 Get public SSH key&lt;/h4&gt;

&lt;p&gt;You can use QuerySystemTag to get SSH key, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    QuerySystemTag resourceUuid=303bf80af28c4e23b9b8c20d4267356b tag~=sshkey%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;resourceUuid&lt;/code&gt; here is the VM&#39;s uuid.&lt;/p&gt;

&lt;h4&gt;2.2.9 Remove public SSH key&lt;/h4&gt;

&lt;p&gt;You can use DeleteTag to remove SSH key from a VM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    DeleteTag uuid=user_data_tag_uuid
    For example:
    DeleteTag uuid=7813d03bb85840c489789f8df3a5915b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See above section for retrieving UUID of SSH key tag.&lt;/p&gt;

&lt;h4&gt;2.2.10 Update public SSH key&lt;/h4&gt;

&lt;p&gt;You can use UpdateSystemTag to update the existing SSH key of a VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateSystemTag uuid=762c3047e05f471ea3fce13f808a50be tag=&#39;sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdlfgEu4SmgAXaEhLtNljm4cqowdFSyOH7Nthe    qzZROaRNRJOYKCABUZLmsLv1pl3Av+m1vUUILPWNymxdCnhuaxl/vFtvyWrLChKR8s2Cpl24uFpvHaWO6JLd/RnSwj8LCsCreJ3Twq77T9MCwDVl15WNjn3WKuPfFKxmW7gQTDyDK1XX35n7RYSadurdVNmJTAsQWmszmGeBDVO6U7spRtH7nNrNA    MVjaOHrPp5NbMRBVCyHfj1UY71bnIdVCa2mY/RtjIkcj4JNBaQ0JPnP1jw4Ig8WVkjn74T7U4chUHmu8jzwhv+++F7EGLSNdb85RKmY5IdHDd+dRuK3Rx67 root@bji-bm-node3&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;uuid&lt;/code&gt; here is the system tag&#39;s UUID. See above section for retrieving UUID of SSH key tag.&lt;/p&gt;

&lt;div class=&quot;bs-callout bs-callout-warning&quot;&gt;
&lt;h4&gt;You may need to reboot the VM to enable the SSH key&lt;/h4&gt;

If you add/update a SSH key to an existing VM, you need to do following steps:&lt;br&gt;
1. clean up existing cloud-init data by &#39;rm -rf /var/lib/cloud&#39; in the VM&#39;s operating system&lt;br&gt;
2. reboot the VM&lt;br&gt;

&lt;br&gt;
For creating new VM, you don&#39;t need to do this.
&lt;/div&gt;




&lt;h2 id=&quot;localstoragemigration&quot;&gt; 3. Volume Migration For Local Storage &lt;/h2&gt;


&lt;p&gt;In this version, you can migrate volumes between different hosts on local primary storage. This mainly solves the problem that VMs cannot be migrated when using local primary storage.&lt;/p&gt;

&lt;h3&gt;3.1 Migrate Volumes&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;LocalStorageMigrateVolume&lt;/code&gt; to migrate both root volumes and data volumes, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    LocalStorageMigrateVolume volumeUuid=cdbda88fef1a42f386ff111b729159d9 destHostUuid=252d484d93e64fea946148097162b60f
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;3.2 Migration Rules&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If the volume is a root volume, the VM of the root volume must be stopped&lt;/li&gt;
&lt;li&gt;If the volume is a data volume, it must be detached&lt;/li&gt;
&lt;li&gt;If there are snapshots of the volume, snapshots are migrated as well&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;bs-callout bs-callout-info&quot;&gt;
&lt;h4&gt;Migrating a VM by migrating its root volume&lt;/h4&gt;
If you want to migrate a VM to another host when using local primary storage. You can do following steps:&lt;br&gt;
1. stop the VM&lt;br&gt;
2. migrate the VM&#39;s root volume to the destination host&lt;br&gt;
3. start the VM&lt;br&gt;
&lt;/div&gt;




&lt;h2 id=&quot;isoapi&quot;&gt; 4. ISO API &lt;/h2&gt;


&lt;p&gt;In this version, you can use APIs to attach/detach ISO to/from a VM, and can use APIs to set/get VM&#39;s boot device order&lt;/p&gt;

&lt;h3&gt;4.1 Attach ISO&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;AttachIsoToVmInstance&lt;/code&gt; to attach an ISO to a VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    AttachIsoToVmInstance vmInstanceUuid=d4a83b0394b44482bbcb964b4dbe991c isoUuid=815dcd3d83dd429298ba2c9b1685c1ad
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4.2 Detach ISO&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;DetachIsoFromVmInstance&lt;/code&gt; to detach the ISO from a VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    DetachIsoFromVmInstance vmInstanceUuid=d4a83b0394b44482bbcb964b4dbe991c
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4.3 Get VM&#39;s boot device order&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;GetVmBootOrder&lt;/code&gt; to get the boot device order of a VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    GetVmBootOrder uuid=303bf80af28c4e23b9b8c20d4267356b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;uuid&lt;/code&gt; here is the VM&#39;s UUID.&lt;/p&gt;

&lt;h3&gt;4.4 Set VM&#39;s boot device order&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;SetVmBootOrder&lt;/code&gt; to set the boot device order of a VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    SetVmBootOrder uuid=303bf80af28c4e23b9b8c20d4267356b bootOrder=HardDisk,CdRom
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;uuid&lt;/code&gt; here is the VM&#39;s UUID.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Note: the valid boot devices are: HardDisk and CdRom&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;4.5 Boot Device Order Rules&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;For VMs created from an ISO, the default boot device is set to CdRom. Once you finish installing the operating system and reboot the VM, the boot device is changed to HardDisk&lt;/li&gt;
&lt;li&gt;For VMs created from a template, the default boot device is HardDisk&lt;/li&gt;
&lt;li&gt;Attaching an ISO to an existing VM won&#39;t change its boot device order, you need to use &lt;code&gt;SetVmBootOrder&lt;/code&gt; to change it explicitly if you want&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;spice&quot;&gt;5. Spice Support&lt;/h2&gt;


&lt;p&gt;You can use Spice protocol to access a VM console in this version. To enable the spice protocol, do following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     UpdateGlobalConfig category=kvm name=vm.consoleMode value=spice
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;valid values: vnc and spice&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ZStack doesn&#39;t have a spice console proxy for now. To access a VM&#39;s console, you need to use a Spice client to connect to VM&#39;s spice port on the host. The port and the host&#39;s IP
can be obtained by the API &lt;code&gt;GetVmConsoleAddress&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt;GetVmConsoleAddress uuid=9cd68155905e47b5b0698ecba9126242
    {
        &quot;hostIp&quot;: &quot;192.168.199.136&quot;,
        &quot;port&quot;: 5902,
        &quot;protocol&quot;: &quot;spice&quot;,
        &quot;success&quot;: true
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the parameter &lt;code&gt;uuid&lt;/code&gt; is the UUID of the VM you want to access. Thanks Nan Su(fengcai_ji@163.com) from Wuhan Textile University for contributing this feature!&lt;/p&gt;

&lt;h2 id=&quot;i18n&quot;&gt; I18n Support &lt;/h2&gt;


&lt;p&gt;The i18n is supported in the new UI. You can switch between languages of English/Chinese PRC/Chinese Taiwan by clicking the language button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1.0/3.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;Thanks Nan Su(fengcai_ji@163.com), Zhiqiang Hu(1063751150@qq.com)u Qi Wei(804470533@qq.com), Yu Chen(ppak@sohu.com), Wanling Xue(1962670706@qq.com) from Wuhan Textile University
for contributing this feature!&lt;/p&gt;

&lt;p&gt;Thanks &lt;a href=&quot;http://www.baiyuan.com.tw/&quot;&gt;BaiYun Tech&lt;/a&gt; Taiwan for contributing the language of Chinese Taiwan support!&lt;/p&gt;

&lt;h2 id=&quot;vmstate&quot;&gt;7. Realtime VM State Syncing&lt;/h2&gt;


&lt;p&gt;In this version, ZStack will sync VMs&#39; state realtime; that is to say, you can use virsh command(even not recommended) to control VMs&#39; life cycle or shutdown a VM by typing &lt;code&gt;halt&lt;/code&gt;
command in the guest operating system; ZStack will detect the state change and sync it to the database realtime.&lt;/p&gt;

&lt;h2 id=&quot;deletionpolicy&quot;&gt;8. Resource Deletion Policy&lt;/h2&gt;


&lt;p&gt;Beginning at this version, you can set deletion policies on core resources including VMs, images, and volumes, to avoid accidental deletion. There are three polices: &lt;code&gt;Direct&lt;/code&gt;, &lt;code&gt;Delay&lt;/code&gt;, and &lt;code&gt;Never&lt;/code&gt;, and the default one is &lt;code&gt;Delay&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;8.1 The rule&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Direct: resources are deleted directly from the physical devices, no way to recover&lt;/li&gt;
&lt;li&gt;Delay: resources are marked as &lt;code&gt;Deleted&lt;/code&gt; in the database and will be physically expunged after a configurable period. Before being expunged, you can recover the resource anytime&lt;/li&gt;
&lt;li&gt;Never: resources are marked as &lt;code&gt;Deleted&lt;/code&gt; only and will never be expunged&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;8.2 VM deletion policy&lt;/h3&gt;

&lt;p&gt;You can change the deletion policy of VMs by doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=vm name=deletionPolicy value=Direct
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the policy is &lt;code&gt;Delay&lt;/code&gt;, you can specify the delay period by doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=vm name=expungePeriod value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;the value is in seconds. The default delay is 24 hours&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You can also configure the interval that ZStack checks expunging candidates, do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=vm name=expungeInterval value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;the value is in seconds&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You can recover a deleted VM by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     RecoverVmInstance vmInstanceUuid=8c4c4c0bbac7441fb056d0d6e2168996
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;8.3 Image deletion policy&lt;/h3&gt;

&lt;p&gt;You can change image deletion policies too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     UpdateGlobalConfig category=image name=deletionPolicy value=Direct
     UpdateGlobalConfig category=image name=expungePeriod value=3600
     UpdateGlobalConfig category=image name=expungeInterval value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and recover a deleted image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    RecoverImage imageUuid=8c4c4c0bbac7441fb056d0d6e2168996
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can recover an image on specified backup storage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    RecoverImage imageUuid=8c4c4c0bbac7441fb056d0d6e2168996 backupStorageUuids=36c27e8ff05c4780bf6d2fa65700f22e
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;8.4 Volume deleted policy&lt;/h3&gt;

&lt;p&gt;You can change data volume deletion policies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=volume name=deletionPolicy value=Direct
    UpdateGlobalConfig category=volume name=expungePeriod value=3600
    UpdateGlobalConfig category=volume name=expungeInterval value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can recover a deleted data volume:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     RecoverDataVolume uuid=36c27e8ff05c4780bf6d2fa65700f22e
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;root volumes are recovered when you recover VMs&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;cpumodel&quot;&gt;9. Host CPU model pass-through ( Nested Virtualization Support)&lt;/h2&gt;


&lt;p&gt;You can change a global configuration to let VMs get hosts&#39; CPU model. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=kvm name=vm.cpuMode value=host-model
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;Valid values are: none, host-model, host-passthrough. The default value is &lt;code&gt;none&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Set this configuration to &lt;code&gt;host-model&lt;/code&gt; or &lt;code&gt;host-passthrough&lt;/code&gt; can enable nested virtualization in the VM.&lt;/p&gt;

&lt;div class=&quot;bs-callout bs-callout-warning&quot;&gt;
&lt;h4&gt;This may break live migration&lt;/h4&gt;

Because live migration will check the CPU model, setting this value to &lt;code&gt;host-model&lt;/code&gt; or &lt;code&gt;host-passthrough&lt;/code&gt; may
break live migration if CPU models are different on two hosts.
&lt;/div&gt;




&lt;h2 id=&quot;zstackimage&quot;&gt;10. 22M Tiny Image&lt;/h2&gt;


&lt;p&gt;We build a tiny image that supports SSHD and ACPID, which can do graceful stop when you stop the VM through ZStack UI. The image locates at&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    http://download.zstack.org/templates/zstack-image-0.0.7.qcow2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can download it for quick test. Thanks Robert Yang(@linuxer) for contributing this feature!&lt;/p&gt;

&lt;h2 id=&quot;install&quot;&gt;11. Installation&lt;/h2&gt;


&lt;p&gt;You can install the RC1 release by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.0/1.0.0/zstack-installer-1.0.0-0201.bin -O zstack-installer-1.0.0-0201.bin
    bash zstack-installer-1.0.0-0201.bin -R aliyun
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;upgrade&quot;&gt;12. Upgrade&lt;/h2&gt;


&lt;p&gt;To upgrade your ZStack to 1.0, do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.0/1.0.0/zstack-installer-1.0.0-0201.bin -O zstack-installer-1.0.0-0201.bin
    bash zstack-installer-1.0.0-0201.bin -u
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;upgradevr&quot;&gt;13. Upgrade Virtual Router Provider To Flat Network Provider&lt;/h2&gt;


&lt;p&gt;If you are currently using a flat network with a previous ZStack version, you can upgrade the L3 network using the flat network provider so
you won&#39;t need the virtual router VM anymore. Assume the UUID of your L3 network is 1a82c2691978476fa6cefa36bb9d4bfd, please follow
the below steps:&lt;/p&gt;

&lt;h4&gt;1. Obtain the UUID of the virtual rotuer provider&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceL3NetworkRef l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd
    {
        &quot;inventories&quot;: [
            {
                &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
                &quot;networkServiceType&quot;: &quot;DNS&quot;
            },
            {
                &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
                &quot;networkServiceType&quot;: &quot;DHCP&quot;
            }
        ],
        &quot;success&quot;: true
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;2. Detach the virtual router provider from the L3 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;&amp;gt;DetachNetworkServiceFromL3Network  l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;:[&quot;DHCP&quot;,&quot;DNS&quot;]}&#39;
         {
             &quot;inventory&quot;: {
                 &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
                 &quot;dns&quot;: [
                     &quot;8.8.8.8&quot;
                 ],
                 &quot;ipRanges&quot;: [
                     {
                         &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                         &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                         &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                         &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                         &quot;name&quot;: &quot;ipr-dk7p&quot;,
                         &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                         &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                         &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
                     }
                 ],
                 &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
                 &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
                 &quot;name&quot;: &quot;l3-etpz&quot;,
                 &quot;networkServices&quot;: [],
                 &quot;state&quot;: &quot;Enabled&quot;,
                 &quot;system&quot;: false,
                 &quot;type&quot;: &quot;L3BasicNetwork&quot;,
                 &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
             },
             &quot;success&quot;: true
         }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;the parameter &lt;code&gt;networkServices&lt;/code&gt; is a map where the key is a &lt;code&gt;networkServiceProviderUuid&lt;/code&gt; and the value is a list of &lt;code&gt;networkServiceType&lt;/code&gt;, which you obtain in the step 1&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4&gt;3. Get the flat network provider UUID&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceProvider type=Flat
        {
            &quot;inventories&quot;: [
                {
                    &quot;attachedL2NetworkUuids&quot;: [
                        &quot;9ec8cad681d1424fa7eda2447edae142&quot;
                    ],
                    &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
                    &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
                    &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
                    &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
                    &quot;networkServiceTypes&quot;: [
                        &quot;DHCP&quot;,
                        &quot;Userdata&quot;
                    ],
                    &quot;type&quot;: &quot;Flat&quot;,
                    &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
                }
            ],
            &quot;success&quot;: true
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;4. Get L2 UUID for the L3 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;&amp;gt;QueryL3Network fields=l2NetworkUuid, uuid=1a82c2691978476fa6cefa36bb9d4bfd
        {
            &quot;inventories&quot;: [
                {
                    &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;
                }
            ],
            &quot;success&quot;: true
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;5. Attach the flat network provider to the L2 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;       &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceProviderToL2Network l2NetworkUuid=9ec8cad681d1424fa7eda2447edae142 networkServiceProviderUuid=17864f985e584a9ba4cd81de215212ce
       {
           &quot;inventory&quot;: {
               &quot;attachedL2NetworkUuids&quot;: [
                   &quot;9ec8cad681d1424fa7eda2447edae142&quot;
               ],
               &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
               &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
               &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
               &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
               &quot;networkServiceTypes&quot;: [
                   &quot;DHCP&quot;,
                   &quot;Userdata&quot;
               ],
               &quot;type&quot;: &quot;Flat&quot;,
               &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
           },
           &quot;success&quot;: true
       }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;6. Attach the flat network provider to the L3 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;     &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceToL3Network l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;17864f985e584a9ba4cd81de215212ce&quot;:[&quot;DHCP&quot;,&quot;Userdata&quot;]}&#39;
      {
          &quot;inventory&quot;: {
              &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
              &quot;dns&quot;: [
                  &quot;8.8.8.8&quot;
              ],
              &quot;ipRanges&quot;: [
                  {
                      &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                      &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                      &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                      &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                      &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                      &quot;name&quot;: &quot;ipr-dk7p&quot;,
                      &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                      &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                      &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
                  }
              ],
              &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
              &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
              &quot;name&quot;: &quot;l3-etpz&quot;,
              &quot;networkServices&quot;: [
                  {
                      &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                      &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                      &quot;networkServiceType&quot;: &quot;DHCP&quot;
                  },
                  {
                      &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                      &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                      &quot;networkServiceType&quot;: &quot;Userdata&quot;
                  }
              ],
              &quot;state&quot;: &quot;Enabled&quot;,
              &quot;system&quot;: false,
              &quot;type&quot;: &quot;L3BasicNetwork&quot;,
              &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
              &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
          },
          &quot;success&quot;: true
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;7. Delete the virtual router VM&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;QueryVirtualRouterVm
         {
             &quot;inventories&quot;: [
                 {
                     &quot;allVolumes&quot;: [
                         {
                             &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                             &quot;description&quot;: &quot;Root volume for VM[uuid:c5a966cb87d644649952daf683f89e26]&quot;,
                             &quot;deviceId&quot;: 0,
                             &quot;format&quot;: &quot;qcow2&quot;,
                             &quot;installPath&quot;: &quot;/zstack_ps/rootVolumes/acct-36c27e8ff05c4780bf6d2fa65700f22e/vol-8eeaa9cb4c1045a2825f8815fed69d72/8eeaa9cb4c1045a2825f8815fed69d72.qcow2&quot;,
                             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:59 PM&quot;,
                             &quot;name&quot;: &quot;ROOT-for-virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                             &quot;primaryStorageUuid&quot;: &quot;4bff4e2d266f480ead596752d14ff3b5&quot;,
                             &quot;rootImageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
                             &quot;size&quot;: 467206656,
                             &quot;state&quot;: &quot;Enabled&quot;,
                             &quot;status&quot;: &quot;Ready&quot;,
                             &quot;type&quot;: &quot;Root&quot;,
                             &quot;uuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
                             &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                         }
                     ],
                     &quot;allocatorStrategy&quot;: &quot;LeastVmPreferredHostAllocatorStrategy&quot;,
                     &quot;applianceVmType&quot;: &quot;VirtualRouter&quot;,
                     &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
                     &quot;cpuNum&quot;: 1,
                     &quot;cpuSpeed&quot;: 2,
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;defaultRouteL3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;hostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
                     &quot;hypervisorType&quot;: &quot;KVM&quot;,
                     &quot;imageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
                     &quot;instanceOfferingUuid&quot;: &quot;9cec7bd6324445a184351ffb7d32f970&quot;,
                     &quot;lastHostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:07:20 PM&quot;,
                     &quot;managementNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;memorySize&quot;: 536870912,
                     &quot;name&quot;: &quot;virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;platform&quot;: &quot;Linux&quot;,
                     &quot;publicNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;rootVolumeUuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
                     &quot;state&quot;: &quot;Running&quot;,
                     &quot;status&quot;: &quot;Connected&quot;,
                     &quot;type&quot;: &quot;ApplianceVm&quot;,
                     &quot;uuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;,
                     &quot;vmNics&quot;: [
                         {
                             &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                             &quot;deviceId&quot;: 0,
                             &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                             &quot;ip&quot;: &quot;192.168.201.195&quot;,
                             &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                             &quot;mac&quot;: &quot;fa:4c:01:68:77:00&quot;,
                             &quot;metaData&quot;: &quot;7&quot;,
                             &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                             &quot;uuid&quot;: &quot;c44e856aa88a42bc85ec30ce8c334c6c&quot;,
                             &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                         }
                     ],
                     &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
                 }
             ],
             &quot;success&quot;: true
         }

         &amp;gt;&amp;gt;&amp;gt;DestroyVmInstance uuid=c5a966cb87d644649952daf683f89e26
         {
             &quot;success&quot;: true
         }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;8. Reconnect all hosts&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;         &amp;gt;&amp;gt;&amp;gt;QueryHost
         {
             &quot;inventories&quot;: [
                 {
                     &quot;availableCpuCapacity&quot;: 7180,
                     &quot;availableMemoryCapacity&quot;: 1997570048,
                     &quot;clusterUuid&quot;: &quot;4282fb61aa55458ea160de138e130298&quot;,
                     &quot;createDate&quot;: &quot;Jan 30, 2016 2:51:13 PM&quot;,
                     &quot;hypervisorType&quot;: &quot;KVM&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:20 PM&quot;,
                     &quot;managementIp&quot;: &quot;192.168.200.187&quot;,
                     &quot;name&quot;: &quot;host1&quot;,
                     &quot;state&quot;: &quot;Enabled&quot;,
                     &quot;status&quot;: &quot;Connected&quot;,
                     &quot;totalCpuCapacity&quot;: 7182,
                     &quot;totalMemoryCapacity&quot;: 2098233344,
                     &quot;username&quot;: &quot;root&quot;,
                     &quot;uuid&quot;: &quot;402f8304a50c410486e023512492316b&quot;,
                     &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
                 },
                 {
                     &quot;availableCpuCapacity&quot;: 14363,
                     &quot;availableMemoryCapacity&quot;: 8321593344,
                     &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:03:14 PM&quot;,
                     &quot;hypervisorType&quot;: &quot;KVM&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:52 PM&quot;,
                     &quot;managementIp&quot;: &quot;192.168.200.150&quot;,
                     &quot;name&quot;: &quot;host2&quot;,
                     &quot;state&quot;: &quot;Enabled&quot;,
                     &quot;status&quot;: &quot;Connected&quot;,
                     &quot;totalCpuCapacity&quot;: 14364,
                     &quot;totalMemoryCapacity&quot;: 8371924992,
                     &quot;username&quot;: &quot;root&quot;,
                     &quot;uuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
                     &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
                 }
             ],
             &quot;success&quot;: true
         }

         &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=402f8304a50c410486e023512492316b
         {
             &quot;success&quot;: true
         }

         &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=415fa093b34e4a3d873368104b127115
         {
             &quot;success&quot;: true
         }
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Mon, 01 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/blog/v1.0.html</link>
        <guid isPermaLink="true">http://zstack.org/blog/v1.0.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>ZStack v1.0 release</title>
        <description>&lt;p&gt;Hello everyone, I am Frank Zhang, the architect of ZStack. Today I am happy to
announce that ZStack v1.0 is released.&lt;/p&gt;

&lt;h1&gt;New Features&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#flatnetworkprovider&quot;&gt;Flat Network Provider, providing distributed DHCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#userdata&quot;&gt;User Data, supporting cloud-init&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#localstoragemigration&quot;&gt;Volume Migration on Local Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#isoapi&quot;&gt;ISO APIs, supporting attach/detach ISO and change VM boot order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#spice&quot;&gt;Spice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#i18n&quot;&gt;i18n, English/Chinese PRC/Chinese Taiwan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vmstate&quot;&gt;VM State Realtime Syncing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#deletionpolicy&quot;&gt;Resource Deletion Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cpumodel&quot;&gt;CPU model pass-through, supporting nested-virtualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zstackimage&quot;&gt;22M Tiny Image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Installation And Upgrade&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#install&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgrade&quot;&gt;Upgrade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#upgradevr&quot;&gt;Upgrade Virtual Router Provider To Flat Network Provider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;flatnetworkprovider&quot;&gt; 1. Flat Network Provider &lt;/h2&gt;


&lt;p&gt;A new network provider, flat network provider, which provides DHCP, Userdata
services is available for users only using flat networks. Compared to the
virtual router provider, the main advantage of the new provider is you don&#39;t
need a virtual router VM for DHCP server anymore, which simplifies the effort of
deploying a flat network significantly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1.0/1.PNG&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;The flat network provider contains a distributed DHCP system that runs a
DHCP server serving DHCP requests from VMs on the local KVM host. Compared to the
traditional DHCP system that has only one DHCP server, the
distributed DHCP system has no single failure point, and a DHCP server down only
effects VMs on one host. Large DHCP requests originated from concurrent VMs
creation/starting are balanced to different DHCP servers, which improves the overall
concurrency.&lt;/p&gt;

&lt;h3&gt;1.1 Use Flat Network Provider&lt;/h3&gt;

&lt;p&gt;When you create a L3 network, do following steps when selecting network
services:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1.0/2.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;select provider as “Flat Network Service Provider”&lt;/li&gt;
&lt;li&gt;select service DHCP&lt;/li&gt;
&lt;li&gt;click button “Add”&lt;/li&gt;
&lt;li&gt;repeat step 2, 3 to add service Userdata&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;bs-callout bs-callout-info&quot;&gt;

&lt;h4&gt;You can combine flat network provider and virtual router provider&lt;/h4&gt;

The flat network provider is mainly for flat networks which only require DHCP
service. However, you can combine it with the virtual router provider for a
mixed setup. For example, use the flat network provider for DHCP service and use
the virtual router provider for SNAT and EIP services.

&lt;/div&gt;




&lt;h2 id=&quot;userdata&quot;&gt; User Data &lt;/h2&gt;


&lt;p&gt;User data, complying the standard of
&lt;a href=&quot;https://cloudinit.readthedocs.org/en/latest/&quot;&gt;cloud-init&lt;/a&gt;, is enabled by the
userdata service of the flat network provider.&lt;/p&gt;

&lt;div class=&quot;bs-callout bs-callout-info&quot;&gt;

&lt;h4&gt;Your template must install cloud-init package&lt;/h4&gt;
To use the user data, you must install cloud-init package in the VM’s operating
system.
&lt;/div&gt;


&lt;p&gt;The userdata is implemented by ZStack’s system tag mechanism; you can use system
tag APIs to add/update/remove userdata to VMs.&lt;/p&gt;

&lt;p&gt;The format of userdata system is like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    userdata::{the content}

    Example:

    userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;bs-callout bs-callout-info&quot;&gt;
&lt;h4&gt;Minify the cloud-init YAML configuration&lt;/h4&gt;
cloud-init uses a YAML file as user data. As a ZStack system tag is a string, you need
to minify the YAML file before passing to ZStack&#39;s API. Here is simple script to do
that:

&lt;code&gt;sed &#39;:a;N;$!ba;s/\n/\\n/g&#39; the_yaml_file&lt;/code&gt;

&lt;br&gt;
The output will be printed on the screen.
&lt;/div&gt;


&lt;h3&gt;2.1 Use user data&lt;/h3&gt;

&lt;h4&gt;2.1.1 Configure cloud-init in VM&lt;/h4&gt;

&lt;p&gt;To use use data, you need to first configure cloud-init in your VM. We suggest
you doing this once then saving the VM as a template so VMs derived from the
template will have cloud-init installed by default.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;yum install cloud-init or apt-get install cloud-init&lt;/li&gt;
&lt;li&gt;&lt;p&gt;add following content to /etc/cloud/cloud.cfg&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;datasource_list:
  - CloudStack
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;2.2.2 Add user data&lt;/h4&gt;

&lt;p&gt;You can specify user data when creating a new VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateVmInstance name=vm imageUuid=d720ff0c60ee48d3a2e6263dd3e12c33 instanceOfferingUuid=76789b62aeb542a5b4b8b8488fbaced2 l3NetworkUuids=37d3c4a1e2f14a1c8316a23531e62988,05266285f96245f096f3b7dce671991d defaultL3NetworkUuid=05266285f96245f096f3b7dce671991d systemTags=&#39;userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To set the user data to an existing VM, use CreateSystemTag, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateSystemTag resourceUuid=303bf80af28c4e23b9b8c20d4267356b resourceType=VmInstanceVO tag=&#39;userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;resourceUuid&lt;/code&gt; here is the VM&#39;s uuid.&lt;/p&gt;

&lt;h4&gt;2.2.3 Get user data&lt;/h4&gt;

&lt;p&gt;You can use QuerySystemTag to get user data, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    QuerySystemTag resourceUuid=303bf80af28c4e23b9b8c20d4267356b tag~=userdata%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;resourceUuid&lt;/code&gt; here is the VM&#39;s uuid.
 &lt;/p&gt;

&lt;h4&gt;2.2.4 Remove user data&lt;/h4&gt;

&lt;p&gt;You can use DeleteTag to remove user data from a VM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    DeleteTag uuid=user_data_tag_uuid
    For example:
    DeleteTag uuid=7813d03bb85840c489789f8df3a5915b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See above section for retrieving UUID of user data tag.&lt;/p&gt;

&lt;h4&gt;2.2.5 Update user data&lt;/h4&gt;

&lt;p&gt;You can use UpdateSystemTag to update existing user data of a VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateSystemTag uuid=762c3047e05f471ea3fce13f808a50be tag=&#39;userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;uuid&lt;/code&gt; here is the system tag&#39;s UUID. See above section for retrieving UUID of user data tag.&lt;/p&gt;

&lt;h4&gt;2.2.6 Inject SSH public key into a VM&lt;/h4&gt;

&lt;p&gt;As public SSH key injection is a widely used feature for user data, ZStack provides a shortcut system tag for this. The system tag is in format of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sshkey::{content}
    Example:
    sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5x3AoWuiZawxXoBxEcOhhdVAST4kJA/cQ2zGnh3yZ/KBU+VILQHTkbNWAaRw3q0UtfpLfVj/KoPFr43qjGF+ud8B/rD7stsAvbNVdms81aBDAFZyiN7dhlwTK+XvCMhl4RxHUItm7+Y7gzb8jTHPoqlPzAw4r8enqhNf9ABG+kaXIDa0FPhVaMPoLzHWjTe34ONIBlxsY/y1Zle49vPVYS7oAHQTc7ly7bnGXffNJ18uF5M7HPUgsIDum8KICa2LmnXJeB2M9XZtXtJUdR1ZKXeQpRtikAm3G3CwFkDxWnx31dGr0lLa2aZ88LQ2iP8nb2NK58aKb4I9Aq19k44Rl root@yyy
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;2.2.7 Add public SSH key&lt;/h5&gt;

&lt;p&gt;You can do this when you creating a VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateVmInstance name=vm imageUuid=d720ff0c60ee48d3a2e6263dd3e12c33 instanceOfferingUuid=76789b62aeb542a5b4b8b8488fbaced2 l3NetworkUuids=37d3c4a1e2f14a1c8316a23531e62988,05266285f96245f096f3b7dce671991d defaultL3NetworkUuid=05266285f96245f096f3b7dce671991d systemTags=&#39;sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5x3AoWuiZawxXoBxEcOhhdVAST4kJA/cQ2zGnh3yZ/KBU+VILQHTkbNWAaRw3q0UtfpLfVj/KoPFr43qjGF+ud8B/rD7stsAvbNVdms81aBDAFZyiN7dhlwTK+XvCMhl4RxHUItm7+Y7gzb8jTHPoqlPzAw4r8enqhNf9ABG+kaXIDa0FPhVaMPoLzHWjTe34ONIBlxsY/y1Zle49vPVYS7oAHQTc7ly7bnGXffNJ18uF5M7HPUgsIDum8KICa2LmnXJeB2M9XZtXtJUdR1ZKXeQpRtikAm3G3CwFkDxWnx31dGr0lLa2aZ88LQ2iP8nb2NK58aKb4I9Aq19k44Rl root@yyy&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or add the SSH key to an existing VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateSystemTag resourceType=VmInstanceVO resourceUuid=606d9a2fa723407c93438789eaf72cea tag=&quot;sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdlfgEu4SmgAXaEhLtNljm4cqowdFSyOH7NtheqzZROaRNRJOYKCABUZLmsLv1pl3Av+m1vUUILPWNymxdCnhuaxl/vFtvyWrLChKR8s2Cpl24uFpvHaWO6JLd/RnSwj8LCsCreJ3Twq77T9MCwDVl15WNjn3WKuPfFKxmW7gQTDyDK1XX35n7RYSadurdVNmJTAsQWmszmGeBDVO6U7spRtH7nNrNAMVjaOHrPp5NbMRBVCyHfj1UY71bnIdVCa2mY/RtjIkcj4JNBaQ0JPnP1jw4Ig8WVkjn74T7U4chUHmu8jzwhv+++F7EGLSNdb85RKmY5IdHDd+dRuK3Rx67 root@bji-bm-node3&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;2.2.8 Get public SSH key&lt;/h4&gt;

&lt;p&gt;You can use QuerySystemTag to get SSH key, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    QuerySystemTag resourceUuid=303bf80af28c4e23b9b8c20d4267356b tag~=sshkey%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;resourceUuid&lt;/code&gt; here is the VM&#39;s uuid.&lt;/p&gt;

&lt;h4&gt;2.2.9 Remove public SSH key&lt;/h4&gt;

&lt;p&gt;You can use DeleteTag to remove SSH key from a VM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    DeleteTag uuid=user_data_tag_uuid
    For example:
    DeleteTag uuid=7813d03bb85840c489789f8df3a5915b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See above section for retrieving UUID of SSH key tag.&lt;/p&gt;

&lt;h4&gt;2.2.10 Update public SSH key&lt;/h4&gt;

&lt;p&gt;You can use UpdateSystemTag to update the existing SSH key of a VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateSystemTag uuid=762c3047e05f471ea3fce13f808a50be tag=&#39;sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdlfgEu4SmgAXaEhLtNljm4cqowdFSyOH7Nthe    qzZROaRNRJOYKCABUZLmsLv1pl3Av+m1vUUILPWNymxdCnhuaxl/vFtvyWrLChKR8s2Cpl24uFpvHaWO6JLd/RnSwj8LCsCreJ3Twq77T9MCwDVl15WNjn3WKuPfFKxmW7gQTDyDK1XX35n7RYSadurdVNmJTAsQWmszmGeBDVO6U7spRtH7nNrNA    MVjaOHrPp5NbMRBVCyHfj1UY71bnIdVCa2mY/RtjIkcj4JNBaQ0JPnP1jw4Ig8WVkjn74T7U4chUHmu8jzwhv+++F7EGLSNdb85RKmY5IdHDd+dRuK3Rx67 root@bji-bm-node3&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;uuid&lt;/code&gt; here is the system tag&#39;s UUID. See above section for retrieving UUID of SSH key tag.&lt;/p&gt;

&lt;div class=&quot;bs-callout bs-callout-warning&quot;&gt;
&lt;h4&gt;You may need to reboot the VM to enable the SSH key&lt;/h4&gt;

If you add/update a SSH key to an existing VM, you need to do following steps:&lt;br&gt;
1. clean up existing cloud-init data by &#39;rm -rf /var/lib/cloud&#39; in the VM&#39;s operating system&lt;br&gt;
2. reboot the VM&lt;br&gt;

&lt;br&gt;
For creating new VM, you don&#39;t need to do this.
&lt;/div&gt;




&lt;h2 id=&quot;localstoragemigration&quot;&gt; 3. Volume Migration For Local Storage &lt;/h2&gt;


&lt;p&gt;In this version, you can migrate volumes between different hosts on local primary storage. This mainly solves the problem that VMs cannot be migrated when using local primary storage.&lt;/p&gt;

&lt;h3&gt;3.1 Migrate Volumes&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;LocalStorageMigrateVolume&lt;/code&gt; to migrate both root volumes and data volumes, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    LocalStorageMigrateVolume volumeUuid=cdbda88fef1a42f386ff111b729159d9 destHostUuid=252d484d93e64fea946148097162b60f
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;3.2 Migration Rules&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If the volume is a root volume, the VM of the root volume must be stopped&lt;/li&gt;
&lt;li&gt;If the volume is a data volume, it must be detached&lt;/li&gt;
&lt;li&gt;If there are snapshots of the volume, snapshots are migrated as well&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;bs-callout bs-callout-info&quot;&gt;
&lt;h4&gt;Migrating a VM by migrating its root volume&lt;/h4&gt;
If you want to migrate a VM to another host when using local primary storage. You can do following steps:&lt;br&gt;
1. stop the VM&lt;br&gt;
2. migrate the VM&#39;s root volume to the destination host&lt;br&gt;
3. start the VM&lt;br&gt;
&lt;/div&gt;




&lt;h2 id=&quot;isoapi&quot;&gt; 4. ISO API &lt;/h2&gt;


&lt;p&gt;In this version, you can use APIs to attach/detach ISO to/from a VM, and can use APIs to set/get VM&#39;s boot device order&lt;/p&gt;

&lt;h3&gt;4.1 Attach ISO&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;AttachIsoToVmInstance&lt;/code&gt; to attach an ISO to a VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    AttachIsoToVmInstance vmInstanceUuid=d4a83b0394b44482bbcb964b4dbe991c isoUuid=815dcd3d83dd429298ba2c9b1685c1ad
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4.2 Detach ISO&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;DetachIsoFromVmInstance&lt;/code&gt; to detach the ISO from a VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    DetachIsoFromVmInstance vmInstanceUuid=d4a83b0394b44482bbcb964b4dbe991c
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4.3 Get VM&#39;s boot device order&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;GetVmBootOrder&lt;/code&gt; to get the boot device order of a VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    GetVmBootOrder uuid=303bf80af28c4e23b9b8c20d4267356b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;uuid&lt;/code&gt; here is the VM&#39;s UUID.&lt;/p&gt;

&lt;h3&gt;4.4 Set VM&#39;s boot device order&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;SetVmBootOrder&lt;/code&gt; to set the boot device order of a VM, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    SetVmBootOrder uuid=303bf80af28c4e23b9b8c20d4267356b bootOrder=HardDisk,CdRom
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;uuid&lt;/code&gt; here is the VM&#39;s UUID.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Note: the valid boot devices are: HardDisk and CdRom&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;4.5 Boot Device Order Rules&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;For VMs created from an ISO, the default boot device is set to CdRom. Once you finish installing the operating system and reboot the VM, the boot device is changed to HardDisk&lt;/li&gt;
&lt;li&gt;For VMs created from a template, the default boot device is HardDisk&lt;/li&gt;
&lt;li&gt;Attaching an ISO to an existing VM won&#39;t change its boot device order, you need to use &lt;code&gt;SetVmBootOrder&lt;/code&gt; to change it explicitly if you want&lt;/li&gt;
&lt;/ul&gt;


&lt;h2 id=&quot;spice&quot;&gt;5. Spice Support&lt;/h2&gt;


&lt;p&gt;You can use Spice protocol to access a VM console in this version. To enable the spice protocol, do following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     UpdateGlobalConfig category=kvm name=vm.consoleMode value=spice
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;valid values: vnc and spice&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ZStack doesn&#39;t have a spice console proxy for now. To access a VM&#39;s console, you need to use a Spice client to connect to VM&#39;s spice port on the host. The port and the host&#39;s IP
can be obtained by the API &lt;code&gt;GetVmConsoleAddress&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt;GetVmConsoleAddress uuid=9cd68155905e47b5b0698ecba9126242
    {
        &quot;hostIp&quot;: &quot;192.168.199.136&quot;,
        &quot;port&quot;: 5902,
        &quot;protocol&quot;: &quot;spice&quot;,
        &quot;success&quot;: true
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the parameter &lt;code&gt;uuid&lt;/code&gt; is the UUID of the VM you want to access. Thanks Nan Su(fengcai_ji@163.com) from Wuhan Textile University for contributing this feature!&lt;/p&gt;

&lt;h2 id=&quot;i18n&quot;&gt; I18n Support &lt;/h2&gt;


&lt;p&gt;The i18n is supported in the new UI. You can switch between languages of English/Chinese PRC/Chinese Taiwan by clicking the language button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1.0/3.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;Thanks Nan Su(fengcai_ji@163.com), Zhiqiang Hu(1063751150@qq.com)u Qi Wei(804470533@qq.com), Yu Chen(ppak@sohu.com), Wanling Xue(1962670706@qq.com) from Wuhan Textile University
for contributing this feature!&lt;/p&gt;

&lt;p&gt;Thanks &lt;a href=&quot;http://www.baiyuan.com.tw/&quot;&gt;BaiYun Tech&lt;/a&gt; Taiwan for contributing the language of Chinese Taiwan support!&lt;/p&gt;

&lt;h2 id=&quot;vmstate&quot;&gt;7. Realtime VM State Syncing&lt;/h2&gt;


&lt;p&gt;In this version, ZStack will sync VMs&#39; state realtime; that is to say, you can use virsh command(even not recommended) to control VMs&#39; life cycle or shutdown a VM by typing &lt;code&gt;halt&lt;/code&gt;
command in the guest operating system; ZStack will detect the state change and sync it to the database realtime.&lt;/p&gt;

&lt;h2 id=&quot;deletionpolicy&quot;&gt;8. Resource Deletion Policy&lt;/h2&gt;


&lt;p&gt;Beginning at this version, you can set deletion policies on core resources including VMs, images, and volumes, to avoid accidental deletion. There are three polices: &lt;code&gt;Direct&lt;/code&gt;, &lt;code&gt;Delay&lt;/code&gt;, and &lt;code&gt;Never&lt;/code&gt;, and the default one is &lt;code&gt;Delay&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;8.1 The rule&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Direct: resources are deleted directly from the physical devices, no way to recover&lt;/li&gt;
&lt;li&gt;Delay: resources are marked as &lt;code&gt;Deleted&lt;/code&gt; in the database and will be physically expunged after a configurable period. Before being expunged, you can recover the resource anytime&lt;/li&gt;
&lt;li&gt;Never: resources are marked as &lt;code&gt;Deleted&lt;/code&gt; only and will never be expunged&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;8.2 VM deletion policy&lt;/h3&gt;

&lt;p&gt;You can change the deletion policy of VMs by doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=vm name=deletionPolicy value=Direct
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the policy is &lt;code&gt;Delay&lt;/code&gt;, you can specify the delay period by doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=vm name=expungePeriod value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;the value is in seconds. The default delay is 24 hours&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You can also configure the interval that ZStack checks expunging candidates, do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=vm name=expungeInterval value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;the value is in seconds&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You can recover a deleted VM by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     RecoverVmInstance vmInstanceUuid=8c4c4c0bbac7441fb056d0d6e2168996
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;8.3 Image deletion policy&lt;/h3&gt;

&lt;p&gt;You can change image deletion policies too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     UpdateGlobalConfig category=image name=deletionPolicy value=Direct
     UpdateGlobalConfig category=image name=expungePeriod value=3600
     UpdateGlobalConfig category=image name=expungeInterval value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and recover a deleted image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    RecoverImage imageUuid=8c4c4c0bbac7441fb056d0d6e2168996
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can recover an image on specified backup storage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    RecoverImage imageUuid=8c4c4c0bbac7441fb056d0d6e2168996 backupStorageUuids=36c27e8ff05c4780bf6d2fa65700f22e
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;8.4 Volume deleted policy&lt;/h3&gt;

&lt;p&gt;You can change data volume deletion policies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=volume name=deletionPolicy value=Direct
    UpdateGlobalConfig category=volume name=expungePeriod value=3600
    UpdateGlobalConfig category=volume name=expungeInterval value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can recover a deleted data volume:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     RecoverDataVolume uuid=36c27e8ff05c4780bf6d2fa65700f22e
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;root volumes are recovered when you recover VMs&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;cpumodel&quot;&gt;9. Host CPU model pass-through ( Nested Virtualization Support)&lt;/h2&gt;


&lt;p&gt;You can change a global configuration to let VMs get hosts&#39; CPU model. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=kvm name=vm.cpuMode value=host-model
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;Valid values are: none, host-model, host-passthrough. The default value is &lt;code&gt;none&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Set this configuration to &lt;code&gt;host-model&lt;/code&gt; or &lt;code&gt;host-passthrough&lt;/code&gt; can enable nested virtualization in the VM.&lt;/p&gt;

&lt;div class=&quot;bs-callout bs-callout-warning&quot;&gt;
&lt;h4&gt;This may break live migration&lt;/h4&gt;

Because live migration will check the CPU model, setting this value to &lt;code&gt;host-model&lt;/code&gt; or &lt;code&gt;host-passthrough&lt;/code&gt; may
break live migration if CPU models are different on two hosts.
&lt;/div&gt;




&lt;h2 id=&quot;zstackimage&quot;&gt;10. 22M Tiny Image&lt;/h2&gt;


&lt;p&gt;We build a tiny image that supports SSHD and ACPID, which can do graceful stop when you stop the VM through ZStack UI. The image locates at&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    http://download.zstack.org/templates/zstack-image-0.0.7.qcow2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can download it for quick test. Thanks Robert Yang(@linuxer) for contributing this feature!&lt;/p&gt;

&lt;h2 id=&quot;install&quot;&gt;11. Installation&lt;/h2&gt;


&lt;p&gt;You can install the RC1 release by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.0/1.0.0/zstack-installer-1.0.0-0201.bin -O zstack-installer-1.0.0-0201.bin
    bash zstack-installer-1.0.0-0201.bin -R aliyun
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;upgrade&quot;&gt;12. Upgrade&lt;/h2&gt;


&lt;p&gt;To upgrade your ZStack to 1.0, do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://download.zstack.org/releases/1.0/1.0.0/zstack-installer-1.0.0-0201.bin -O zstack-installer-1.0.0-0201.bin
    bash zstack-installer-1.0.0-0201.bin -u
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;upgradevr&quot;&gt;13. Upgrade Virtual Router Provider To Flat Network Provider&lt;/h2&gt;


&lt;p&gt;If you are currently using a flat network with a previous ZStack version, you can upgrade the L3 network using the flat network provider so
you won&#39;t need the virtual router VM anymore. Assume the UUID of your L3 network is 1a82c2691978476fa6cefa36bb9d4bfd, please follow
the below steps:&lt;/p&gt;

&lt;h4&gt;1. Obtain the UUID of the virtual rotuer provider&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceL3NetworkRef l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd
    {
        &quot;inventories&quot;: [
            {
                &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
                &quot;networkServiceType&quot;: &quot;DNS&quot;
            },
            {
                &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
                &quot;networkServiceType&quot;: &quot;DHCP&quot;
            }
        ],
        &quot;success&quot;: true
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;2. Detach the virtual router provider from the L3 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;&amp;gt;DetachNetworkServiceFromL3Network  l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;:[&quot;DHCP&quot;,&quot;DNS&quot;]}&#39;
         {
             &quot;inventory&quot;: {
                 &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
                 &quot;dns&quot;: [
                     &quot;8.8.8.8&quot;
                 ],
                 &quot;ipRanges&quot;: [
                     {
                         &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                         &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                         &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                         &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                         &quot;name&quot;: &quot;ipr-dk7p&quot;,
                         &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                         &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                         &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
                     }
                 ],
                 &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
                 &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
                 &quot;name&quot;: &quot;l3-etpz&quot;,
                 &quot;networkServices&quot;: [],
                 &quot;state&quot;: &quot;Enabled&quot;,
                 &quot;system&quot;: false,
                 &quot;type&quot;: &quot;L3BasicNetwork&quot;,
                 &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
             },
             &quot;success&quot;: true
         }
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;the parameter &lt;code&gt;networkServices&lt;/code&gt; is a map where the key is a &lt;code&gt;networkServiceProviderUuid&lt;/code&gt; and the value is a list of &lt;code&gt;networkServiceType&lt;/code&gt;, which you obtain in the step 1&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4&gt;3. Get the flat network provider UUID&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceProvider type=Flat
        {
            &quot;inventories&quot;: [
                {
                    &quot;attachedL2NetworkUuids&quot;: [
                        &quot;9ec8cad681d1424fa7eda2447edae142&quot;
                    ],
                    &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
                    &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
                    &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
                    &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
                    &quot;networkServiceTypes&quot;: [
                        &quot;DHCP&quot;,
                        &quot;Userdata&quot;
                    ],
                    &quot;type&quot;: &quot;Flat&quot;,
                    &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
                }
            ],
            &quot;success&quot;: true
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;4. Get L2 UUID for the L3 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;&amp;gt;QueryL3Network fields=l2NetworkUuid, uuid=1a82c2691978476fa6cefa36bb9d4bfd
        {
            &quot;inventories&quot;: [
                {
                    &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;
                }
            ],
            &quot;success&quot;: true
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;5. Attach the flat network provider to the L2 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;       &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceProviderToL2Network l2NetworkUuid=9ec8cad681d1424fa7eda2447edae142 networkServiceProviderUuid=17864f985e584a9ba4cd81de215212ce
       {
           &quot;inventory&quot;: {
               &quot;attachedL2NetworkUuids&quot;: [
                   &quot;9ec8cad681d1424fa7eda2447edae142&quot;
               ],
               &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
               &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
               &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
               &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
               &quot;networkServiceTypes&quot;: [
                   &quot;DHCP&quot;,
                   &quot;Userdata&quot;
               ],
               &quot;type&quot;: &quot;Flat&quot;,
               &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
           },
           &quot;success&quot;: true
       }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;6. Attach the flat network provider to the L3 network&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;     &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceToL3Network l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;17864f985e584a9ba4cd81de215212ce&quot;:[&quot;DHCP&quot;,&quot;Userdata&quot;]}&#39;
      {
          &quot;inventory&quot;: {
              &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
              &quot;dns&quot;: [
                  &quot;8.8.8.8&quot;
              ],
              &quot;ipRanges&quot;: [
                  {
                      &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                      &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                      &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                      &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                      &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                      &quot;name&quot;: &quot;ipr-dk7p&quot;,
                      &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                      &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                      &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
                  }
              ],
              &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
              &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
              &quot;name&quot;: &quot;l3-etpz&quot;,
              &quot;networkServices&quot;: [
                  {
                      &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                      &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                      &quot;networkServiceType&quot;: &quot;DHCP&quot;
                  },
                  {
                      &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                      &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                      &quot;networkServiceType&quot;: &quot;Userdata&quot;
                  }
              ],
              &quot;state&quot;: &quot;Enabled&quot;,
              &quot;system&quot;: false,
              &quot;type&quot;: &quot;L3BasicNetwork&quot;,
              &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
              &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
          },
          &quot;success&quot;: true
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;7. Delete the virtual router VM&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;        &amp;gt;&amp;gt;QueryVirtualRouterVm
         {
             &quot;inventories&quot;: [
                 {
                     &quot;allVolumes&quot;: [
                         {
                             &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                             &quot;description&quot;: &quot;Root volume for VM[uuid:c5a966cb87d644649952daf683f89e26]&quot;,
                             &quot;deviceId&quot;: 0,
                             &quot;format&quot;: &quot;qcow2&quot;,
                             &quot;installPath&quot;: &quot;/zstack_ps/rootVolumes/acct-36c27e8ff05c4780bf6d2fa65700f22e/vol-8eeaa9cb4c1045a2825f8815fed69d72/8eeaa9cb4c1045a2825f8815fed69d72.qcow2&quot;,
                             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:59 PM&quot;,
                             &quot;name&quot;: &quot;ROOT-for-virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                             &quot;primaryStorageUuid&quot;: &quot;4bff4e2d266f480ead596752d14ff3b5&quot;,
                             &quot;rootImageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
                             &quot;size&quot;: 467206656,
                             &quot;state&quot;: &quot;Enabled&quot;,
                             &quot;status&quot;: &quot;Ready&quot;,
                             &quot;type&quot;: &quot;Root&quot;,
                             &quot;uuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
                             &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                         }
                     ],
                     &quot;allocatorStrategy&quot;: &quot;LeastVmPreferredHostAllocatorStrategy&quot;,
                     &quot;applianceVmType&quot;: &quot;VirtualRouter&quot;,
                     &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
                     &quot;cpuNum&quot;: 1,
                     &quot;cpuSpeed&quot;: 2,
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;defaultRouteL3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;hostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
                     &quot;hypervisorType&quot;: &quot;KVM&quot;,
                     &quot;imageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
                     &quot;instanceOfferingUuid&quot;: &quot;9cec7bd6324445a184351ffb7d32f970&quot;,
                     &quot;lastHostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:07:20 PM&quot;,
                     &quot;managementNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;memorySize&quot;: 536870912,
                     &quot;name&quot;: &quot;virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;platform&quot;: &quot;Linux&quot;,
                     &quot;publicNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;rootVolumeUuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
                     &quot;state&quot;: &quot;Running&quot;,
                     &quot;status&quot;: &quot;Connected&quot;,
                     &quot;type&quot;: &quot;ApplianceVm&quot;,
                     &quot;uuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;,
                     &quot;vmNics&quot;: [
                         {
                             &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                             &quot;deviceId&quot;: 0,
                             &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                             &quot;ip&quot;: &quot;192.168.201.195&quot;,
                             &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                             &quot;mac&quot;: &quot;fa:4c:01:68:77:00&quot;,
                             &quot;metaData&quot;: &quot;7&quot;,
                             &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                             &quot;uuid&quot;: &quot;c44e856aa88a42bc85ec30ce8c334c6c&quot;,
                             &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                         }
                     ],
                     &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
                 }
             ],
             &quot;success&quot;: true
         }

         &amp;gt;&amp;gt;&amp;gt;DestroyVmInstance uuid=c5a966cb87d644649952daf683f89e26
         {
             &quot;success&quot;: true
         }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;8. Reconnect all hosts&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;         &amp;gt;&amp;gt;&amp;gt;QueryHost
         {
             &quot;inventories&quot;: [
                 {
                     &quot;availableCpuCapacity&quot;: 7180,
                     &quot;availableMemoryCapacity&quot;: 1997570048,
                     &quot;clusterUuid&quot;: &quot;4282fb61aa55458ea160de138e130298&quot;,
                     &quot;createDate&quot;: &quot;Jan 30, 2016 2:51:13 PM&quot;,
                     &quot;hypervisorType&quot;: &quot;KVM&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:20 PM&quot;,
                     &quot;managementIp&quot;: &quot;192.168.200.187&quot;,
                     &quot;name&quot;: &quot;host1&quot;,
                     &quot;state&quot;: &quot;Enabled&quot;,
                     &quot;status&quot;: &quot;Connected&quot;,
                     &quot;totalCpuCapacity&quot;: 7182,
                     &quot;totalMemoryCapacity&quot;: 2098233344,
                     &quot;username&quot;: &quot;root&quot;,
                     &quot;uuid&quot;: &quot;402f8304a50c410486e023512492316b&quot;,
                     &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
                 },
                 {
                     &quot;availableCpuCapacity&quot;: 14363,
                     &quot;availableMemoryCapacity&quot;: 8321593344,
                     &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:03:14 PM&quot;,
                     &quot;hypervisorType&quot;: &quot;KVM&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:52 PM&quot;,
                     &quot;managementIp&quot;: &quot;192.168.200.150&quot;,
                     &quot;name&quot;: &quot;host2&quot;,
                     &quot;state&quot;: &quot;Enabled&quot;,
                     &quot;status&quot;: &quot;Connected&quot;,
                     &quot;totalCpuCapacity&quot;: 14364,
                     &quot;totalMemoryCapacity&quot;: 8371924992,
                     &quot;username&quot;: &quot;root&quot;,
                     &quot;uuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
                     &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
                 }
             ],
             &quot;success&quot;: true
         }

         &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=402f8304a50c410486e023512492316b
         {
             &quot;success&quot;: true
         }

         &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=415fa093b34e4a3d873368104b127115
         {
             &quot;success&quot;: true
         }
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Mon, 01 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn/blog/v1.0.html</link>
        <guid isPermaLink="true">http://zstack.org/cn/blog/v1.0.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>ZStack v1.0 RC1 发布</title>
        <description>&lt;h2&gt;ZStack 1.0 RC1 版本今天发布&lt;/h2&gt;

&lt;p&gt;ZStack 1.0 RC1 版本今天发布，欢迎大家下载试用。在该版本中，我们加入了以下新功能。&lt;/p&gt;

&lt;h2&gt;1. Flat Network Provider&lt;/h2&gt;

&lt;p&gt;Flat Network Provider是一种新的网络服务提供模式，它提供DHCP和Userdata服务。相对于已有的Virtual Router Provider，Flat Network Provider最大的优势在于不需要启动一个Virtual Router虚拟机就可以为VM提供DHCP服务，这大大简化了部署一个扁平网络的复杂度。此外，由于采用了分布式DHCP系统，Flat Network Provider不存在传统DHCP系统的单点失败情况，因为每个物理机上都会有一个DHCP服务器服务运行在该物理机上的VM。在高并发创建或启动VM的时候，DHCP的负载会被分发到不同物理机上去，大大提供了系统整体的并发性。下图是分布式DHCP系统的一个总体架构图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1.0/1.PNG&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;h3&gt;1.1 使用Flat Network Provider&lt;/h3&gt;

&lt;p&gt;当你在创建一个L3网络的时候，在最后一步选择网络服务时做如下操作：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1.0/2.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;选择“Flat Network Service Provider&quot;做为网络服务提供商&lt;/li&gt;
&lt;li&gt;选择DHCP服务&lt;/li&gt;
&lt;li&gt;点击“添加”按钮&lt;/li&gt;
&lt;li&gt;重复步骤2和3添加user data服务&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;bs-callout bs-callout-info&quot;&gt;
&lt;h4&gt;你可以将Flat Network Provider和Virtual Router Provider混合使用&lt;/h4&gt;
尽管Flat Network Provider的主要目的是为扁平网络情况提供DHCP服务器，你也可以讲它跟已有的Virtual Router Provider混合使用。
例如使用Flat Network Provider提供DHCP，用Virtual Router Provider提供DNS/SNAT等其他服务。
&lt;/div&gt;


&lt;h2&gt;2. User Data&lt;/h2&gt;

&lt;p&gt;标准的&lt;a href=&quot;https://cloudinit.readthedocs.org/en/latest/&quot;&gt;Cloud-init&lt;/a&gt;在该版本中得到支持。要使用user data，你需要在VM的操作系统中安装cloud-init包。User data使用了ZStack的系统标签（System Tags）机制实现，其格式为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    userdata::{the content}
    例如：
    userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你应该已经注意到了上面的user data中包含了一个非常长的字符串，它其实是cloud-init的YAML配置文件minify后的结果。因为ZStack的CLI工具只能接受单行字符串，在传递cloud-init YAML配置的时候你需要先把它变成一个单行的字符串。你可以使用下面脚本：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sed &#39;:a;N;$!ba;s/\n/\\n/g&#39; YAML文件路径
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出的长字符串会打印到屏幕，你可以复制黏贴。&lt;/p&gt;

&lt;h3&gt;2.1 使用User Data&lt;/h3&gt;

&lt;p&gt;当你在VM的操作系统中安装完cloud-init包后，我们强烈建议你把它保存成一个模板，这样从该模板新建的VM都会有cloud-init的包。使用下面步骤安装cloud-init包：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;yum install cloud-init 或 apt-get install cloud-init&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在/etc/cloud/cloud.cfg文件中添加如下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; datasource_list:
   - CloudStack
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;cloud-init支持AWS，CloudStack，OpenStack多种获取user data的方式，ZStack使用的是CloudStack方式，即用DHCP服务器提供user data。&lt;/p&gt;

&lt;h4&gt;2.1.1 添加User Data&lt;/h4&gt;

&lt;p&gt;你可以在新建VM的时候指定user data：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateVmInstance name=vm imageUuid=d720ff0c60ee48d3a2e6263dd3e12c33 instanceOfferingUuid=76789b62aeb542a5b4b8b8488fbaced2 l3NetworkUuids=37d3c4a1e2f14a1c8316a23531e62988,05266285f96245f096f3b7dce671991d defaultL3NetworkUuid=05266285f96245f096f3b7dce671991d systemTags=&#39;userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者对一个已经创建的VM指定user data：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateSystemTag resourceUuid=303bf80af28c4e23b9b8c20d4267356b resourceType=VmInstanceVO tag=&#39;userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;resourceUuid&lt;/code&gt;是VM的UUID。&lt;/p&gt;

&lt;h4&gt;2.1.2 获得user data&lt;/h4&gt;

&lt;p&gt;你可以用&lt;code&gt;QuerySystemTag&lt;/code&gt;获取一个VM的user data，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    QuerySystemTag resourceUuid=303bf80af28c4e23b9b8c20d4267356b tag~=userdata%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;resourceUuid&lt;/code&gt;是VM的UUID。&lt;/p&gt;

&lt;h4&gt;2.1.3 删除user data&lt;/h4&gt;

&lt;p&gt;你可以用&lt;code&gt;DeleteTag&lt;/code&gt;从一个VM上删除user data，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    DeleteTag uuid=user_data_tag_uuid
    例如：
    DeleteTag uuid=7813d03bb85840c489789f8df3a5915b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的UUID是system tag的UUID，你可以用获取user data一节的方法拿到。&lt;/p&gt;

&lt;h4&gt;2.1.4 更新user data&lt;/h4&gt;

&lt;p&gt;你可以用&lt;code&gt;UpdateSystemTag&lt;/code&gt;更新一个VM上已有的user data，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateSystemTag uuid=762c3047e05f471ea3fce13f808a50be tag=&#39;userdata::groups:\n  - ubuntu: [foo,bar]\n  - cloud-users\n\n# Add users to the system. Users are added after groups are added.\nusers:\n  - default\n  - name: foobar\n    gecos: Foo B. Bar\n    primary-group: foobar\n    groups: users\n    selinux-user: staff_u\n    expiredate: 2012-09-01\n    ssh-import-id: foobar\n    lock-passwd: false\n  - name: barfoo\n    gecos: Bar B. Foo\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: users, admin\n    ssh-import-id: None\n    lock-passwd: true\n    ssh-authorized-keys:\n      - &amp;lt;ssh pub key 1&amp;gt;\n      - &amp;lt;ssh pub key 2&amp;gt;\n  - name: cloudy\n    gecos: Magic Cloud App Daemon User\n    inactive: true\n    system: true&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的UUID是system tag的UUID，你可以用获取user data一节的方法拿到。&lt;/p&gt;

&lt;h4&gt;2.2 注入SSH公钥&lt;/h4&gt;

&lt;p&gt;SSH公钥是用户使用user data最常见的用法，为此我们特别提供了一个专门的system tag，格式为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sshkey::{content}
    例如：
    sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5x3AoWuiZawxXoBxEcOhhdVAST4kJA/cQ2zGnh3yZ/KBU+VILQHTkbNWAaRw3q0UtfpLfVj/KoPFr43qjGF+ud8B/rD7stsAvbNVdms81aBDAFZyiN7dhlwTK+XvCMhl4RxHUItm7+Y7gzb8jTHPoqlPzAw4r8enqhNf9ABG+kaXIDa0FPhVaMPoLzHWjTe34ONIBlxsY/y1Zle49vPVYS7oAHQTc7ly7bnGXffNJ18uF5M7HPUgsIDum8KICa2LmnXJeB2M9XZtXtJUdR1ZKXeQpRtikAm3G3CwFkDxWnx31dGr0lLa2aZ88LQ2iP8nb2NK58aKb4I9Aq19k44Rl root@yyy
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;2.2.1 注入SSH公钥&lt;/h5&gt;

&lt;p&gt;你可以在创建VM的时候指定公钥，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateVmInstance name=vm imageUuid=d720ff0c60ee48d3a2e6263dd3e12c33 instanceOfferingUuid=76789b62aeb542a5b4b8b8488fbaced2 l3NetworkUuids=37d3c4a1e2f14a1c8316a23531e62988,05266285f96245f096f3b7dce671991d defaultL3NetworkUuid=05266285f96245f096f3b7dce671991d systemTags=&#39;sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5x3AoWuiZawxXoBxEcOhhdVAST4kJA/cQ2zGnh3yZ/KBU+VILQHTkbNWAaRw3q0UtfpLfVj/KoPFr43qjGF+ud8B/rD7stsAvbNVdms81aBDAFZyiN7dhlwTK+XvCMhl4RxHUItm7+Y7gzb8jTHPoqlPzAw4r8enqhNf9ABG+kaXIDa0FPhVaMPoLzHWjTe34ONIBlxsY/y1Zle49vPVYS7oAHQTc7ly7bnGXffNJ18uF5M7HPUgsIDum8KICa2LmnXJeB2M9XZtXtJUdR1ZKXeQpRtikAm3G3CwFkDxWnx31dGr0lLa2aZ88LQ2iP8nb2NK58aKb4I9Aq19k44Rl root@yyy&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以给一个已有的VM指定公钥，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CreateSystemTag resourceType=VmInstanceVO resourceUuid=606d9a2fa723407c93438789eaf72cea tag=&quot;sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdlfgEu4SmgAXaEhLtNljm4cqowdFSyOH7NtheqzZROaRNRJOYKCABUZLmsLv1pl3Av+m1vUUILPWNymxdCnhuaxl/vFtvyWrLChKR8s2Cpl24uFpvHaWO6JLd/RnSwj8LCsCreJ3Twq77T9MCwDVl15WNjn3WKuPfFKxmW7gQTDyDK1XX35n7RYSadurdVNmJTAsQWmszmGeBDVO6U7spRtH7nNrNAMVjaOHrPp5NbMRBVCyHfj1UY71bnIdVCa2mY/RtjIkcj4JNBaQ0JPnP1jw4Ig8WVkjn74T7U4chUHmu8jzwhv+++F7EGLSNdb85RKmY5IdHDd+dRuK3Rx67 root@bji-bm-node3&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;2.2.2 获得公钥&lt;/h5&gt;

&lt;p&gt;你可以用&lt;code&gt;QuerySystemTag&lt;/code&gt;获得一个VM的公钥，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    QuerySystemTag resourceUuid=303bf80af28c4e23b9b8c20d4267356b tag~=sshkey%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;resourceUuid&lt;/code&gt;是VM的UUID&lt;/p&gt;

&lt;h5&gt;2.2.3 删除公钥&lt;/h5&gt;

&lt;p&gt;你可以用&lt;code&gt;DeleteTag&lt;/code&gt;从VM上删除一个公钥：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    DeleteTag uuid=user_data_tag_uuid
    例如：
    DeleteTag uuid=7813d03bb85840c489789f8df3a5915b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的UUID是system tag的UUID，你可以用获取公钥一节的方法拿到。&lt;/p&gt;

&lt;h5&gt;2.2.4 更新公钥&lt;/h5&gt;

&lt;p&gt;你可以使用&lt;code&gt;UpdateSystemTag&lt;/code&gt;更新一个VM的公钥，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateSystemTag uuid=762c3047e05f471ea3fce13f808a50be tag=&#39;sshkey::ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdlfgEu4SmgAXaEhLtNljm4cqowdFSyOH7Nthe    qzZROaRNRJOYKCABUZLmsLv1pl3Av+m1vUUILPWNymxdCnhuaxl/vFtvyWrLChKR8s2Cpl24uFpvHaWO6JLd/RnSwj8LCsCreJ3Twq77T9MCwDVl15WNjn3WKuPfFKxmW7gQTDyDK1XX35n7RYSadurdVNmJTAsQWmszmGeBDVO6U7spRtH7nNrNA    MVjaOHrPp5NbMRBVCyHfj1UY71bnIdVCa2mY/RtjIkcj4JNBaQ0JPnP1jw4Ig8WVkjn74T7U4chUHmu8jzwhv+++F7EGLSNdb85RKmY5IdHDd+dRuK3Rx67 root@bji-bm-node3&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的UUID是system tag的UUID，你可以用获取公钥一节的方法拿到。&lt;/p&gt;

&lt;div class=&quot;bs-callout bs-callout-warning&quot;&gt;
&lt;h4&gt;你或许需要重启VM让公钥生效&lt;/h4&gt;

如果你是给一个已有的VM创建公钥或者更新公钥，你需要做如下步骤：&lt;br&gt;
1. 删除在VM中删除已有的cloud-init数据，rm -rf /var/lib/cloud&lt;br&gt;
2. 重启VM&lt;br&gt;

对于给新建的VM指定公钥，你无需做这些步骤。
&lt;/div&gt;


&lt;h2&gt;3. 本地存储的磁盘迁移&lt;/h2&gt;

&lt;p&gt;在本版本中，你可以在本地存储的不同物理机间迁移虚拟机的磁盘(volume)，解决使用本地存储虚拟机不能迁移的的问题。&lt;/p&gt;

&lt;h3&gt;3.1 迁移磁盘&lt;/h3&gt;

&lt;p&gt;你可以用&lt;code&gt;LocalStorageMigrateVolume&lt;/code&gt;迁移VM的root volume和data volume。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    LocalStorageMigrateVolume volumeUuid=cdbda88fef1a42f386ff111b729159d9 destHostUuid=252d484d93e64fea946148097162b60f
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;3.2 迁移规则&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;如果迁移的是root volume，需要先关闭虚拟机&lt;/li&gt;
&lt;li&gt;如果迁移的是data volume，需要先将data volume从虚拟机卸载（detach)&lt;/li&gt;
&lt;li&gt;如果volume上有快照（snapshots），快照会被一并迁移&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;3.3 使用磁盘迁移迁移VM&lt;/h3&gt;

&lt;p&gt;你可以使用磁盘迁移功能在不同物理机上冷迁移虚拟机：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;关闭虚拟机&lt;/li&gt;
&lt;li&gt;将虚拟机的root volume迁移到目的物理机&lt;/li&gt;
&lt;li&gt;启动虚拟机&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;ZStack实际是支持本地存储的虚拟机热迁移的。但在我们的压力测试中，我们发现KVM的带存储热迁移不稳定。我们在一个虚拟机中做一次Linux内核编译，并在这个过程中做带存储热迁移，迁移完成后重启虚拟机，发现虚拟机磁盘损坏。为了保护用户数据，我们在API层面关闭了虚拟机带存储热迁移的功能。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;4. ISO API&lt;/h2&gt;

&lt;p&gt;在该版本中，你可以使用API向一个VM加载或卸载一个ISO，并且改变VM的启动设备顺序。&lt;/p&gt;

&lt;h3&gt;4.1 添加ISO&lt;/h3&gt;

&lt;p&gt;你可以用&lt;code&gt;AttachIsoToVmInstance&lt;/code&gt;向一个VM添加一个ISO，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    AttachIsoToVmInstance vmInstanceUuid=d4a83b0394b44482bbcb964b4dbe991c isoUuid=815dcd3d83dd429298ba2c9b1685c1ad
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4.2 卸载ISO&lt;/h3&gt;

&lt;p&gt;你可以用&lt;code&gt;DetachIsoFromVmInstance&lt;/code&gt;从一个VM上卸载一个ISO，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    DetachIsoFromVmInstance vmInstanceUuid=d4a83b0394b44482bbcb964b4dbe991c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;uuid&lt;/code&gt;是VM的UUID。&lt;/p&gt;

&lt;h3&gt;4.3 设置启动设备顺序&lt;/h3&gt;

&lt;p&gt;你可以用&lt;code&gt;SetVmBootOrder&lt;/code&gt;设置VM的启动设备顺序，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    SetVmBootOrder uuid=303bf80af28c4e23b9b8c20d4267356b bootOrder=HardDisk,CdRom
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;uuid&lt;/code&gt;是VM的UUID。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;合法的启动顺序包括：HardDisk和CdRom&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;4.4 获得启动设备顺序&lt;/h3&gt;

&lt;p&gt;你可以用&lt;code&gt;GetVmBootOrder&lt;/code&gt;获得VM的启动设备顺序，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    GetVmBootOrder uuid=303bf80af28c4e23b9b8c20d4267356b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;uuid&lt;/code&gt;是VM的UUID。&lt;/p&gt;

&lt;h3&gt;4.5 设备启动顺序规则&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如果使用ISO创建一个VM，则该VM的启动设备自动被设置为CdRom。当操作系统安装完成并重启后，启动顺序自动改成HardDisk&lt;/li&gt;
&lt;li&gt;如果使用template创建一个VM，改VM的启动设备自动被设置为HardDisk&lt;/li&gt;
&lt;li&gt;加载一个ISO到一个VM不改变其启动顺序。如果需要，你可以用&lt;code&gt;SetVmBootOrder&lt;/code&gt;更改&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;5. Spice支持&lt;/h2&gt;

&lt;p&gt;在该版本中，我们支持Spice协议作为VM图形终端协议。你可以通过更改全局选项进行设置，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=kvm name=vm.consoleMode value=spice
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;合法的协议包括：vnc和spice&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;目前ZStack还没有针对spice的console proxy，你需要下载一个spice客户端直接连接VM在物理机上的spice端口。你可以用下面的API来获得物理机的IP和VM的spice端口号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt;GetVmConsoleAddress uuid=9cd68155905e47b5b0698ecba9126242
    {
        &quot;hostIp&quot;: &quot;192.168.199.136&quot;,
        &quot;port&quot;: 5902,
        &quot;protocol&quot;: &quot;spice&quot;,
        &quot;success&quot;: true
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;uuid&lt;/code&gt;是VM的UUID。感谢来至武汉纺织大学的Nan Su(fengcai_ji@163.com)同学贡献了这个功能。&lt;/p&gt;

&lt;h2&gt;6. I18N支持&lt;/h2&gt;

&lt;p&gt;在该版本中，我们支持多语言版本，目前支持英文和中文，你可以通过点击语言图标进行切换。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1.0/3.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;感谢来自武汉纺织大学的Nan Su(fengcai_ji@163.com), Zhiqiang Hu(1063751150@qq.com)u Qi Wei(804470533@qq.com), Yu Chen(ppak@sohu.com), Wanling Xue(1962670706@qq.com)贡献了该功能。&lt;/p&gt;

&lt;h2&gt;7. VM状态的实时捕获&lt;/h2&gt;

&lt;p&gt;在该版本中，我们支持VM状态的实时捕获。如果用户绕过ZStack对VM进行了操作，其状态会实时的发送回管理节点进行更新。也就是说你可以在VM内部
通过halt命令来关闭虚拟机，而不用通过ZStack UI。虽然不推荐，但如果你用virsh关闭或者启动了一个VM，其在ZStack中的状态也会被实时更新。&lt;/p&gt;

&lt;h2&gt;8. 资源删除策略控制&lt;/h2&gt;

&lt;p&gt;从该版本开始，我们对一些关键资源实现了删除策略控制，用户可以控制资源的删除方式，以防误删除。目前支持删除策略控制的资源包括：虚拟机、磁盘(volume)、镜像（image）。目前支持的删除策略包括：&lt;strong&gt;Direct（直接删除）&lt;/strong&gt;, &lt;strong&gt;Delay（延时删除）&lt;/strong&gt;, &lt;strong&gt;Never（从不删除）&lt;/strong&gt;三种。默认的策略是Delay。&lt;/p&gt;

&lt;h3&gt;8.1 策略规则&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Direct: 资源会直接被物理删除，并在数据库中删除，无法恢复。&lt;/li&gt;
&lt;li&gt;Delay：资源会首先在数据库中被标记成删除，但不会物理删除。在一定的时间内，用户可以使用API对资源进行恢复，在此期间资源仍然物理存在，所以它还会占用物理空间（例如磁盘空间）。在超过一定时间后，资源会被物理删除，无法再恢复。&lt;/li&gt;
&lt;li&gt;Never：资源数据库中标记成删除，永远不会被物理删除，一直占用物理空间。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;8.2 虚拟机删除策略&lt;/h3&gt;

&lt;p&gt;你可以更改虚拟机的删除策略，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=vm name=deletionPolicy value=Direct
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果删除策略是Delay，你可以指定延时删除的时间，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=vm name=expungePeriod value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;单位为秒。在上面的例子中，虚拟机在被标记成删除后的1个小时后被测地删除。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;如果删除策略是Delay，ZStack会周期性的去检查资源是否应该被物理删除，你可以控制周期性轮询的时间：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=vm name=expungeInterval value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;单位为秒&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;你也可以恢复一个处于删除状态的虚拟机：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    RecoverVmInstance vmInstanceUuid=8c4c4c0bbac7441fb056d0d6e2168996
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;8.3 镜像删除策略&lt;/h3&gt;

&lt;p&gt;跟虚拟机一样，你可以改变相应的设置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=image name=deletionPolicy value=Direct
    UpdateGlobalConfig category=image name=expungePeriod value=3600
    UpdateGlobalConfig category=image name=expungeInterval value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以恢复一个处于删除状态的镜像：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    RecoverImage imageUuid=8c4c4c0bbac7441fb056d0d6e2168996
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果镜像存在于多个备份存储，你只想恢复在某些备份存储上的镜像，可以通过额外参数指定：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    RecoverImage imageUuid=8c4c4c0bbac7441fb056d0d6e2168996 backupStorageUuids=36c27e8ff05c4780bf6d2fa65700f22e
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;8.4 磁盘删除策略&lt;/h3&gt;

&lt;p&gt;跟虚拟机一样，你可以通过改变相应的设置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=volume name=deletionPolicy value=Direct
    UpdateGlobalConfig category=volume name=expungePeriod value=3600
    UpdateGlobalConfig category=volume name=expungeInterval value=3600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你也可以恢复一个处于删除状态数据磁盘(data volume)：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    RecoverDataVolume uuid=36c27e8ff05c4780bf6d2fa65700f22e
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;根磁盘(root volume)的恢复是在恢复虚拟机的时候自动恢复。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;9. CPU型号Paasthrough(支持嵌套虚拟化)&lt;/h2&gt;

&lt;p&gt;你可以通过改变全局配置让虚拟机获得跟物理机CPU相同的型号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    UpdateGlobalConfig category=kvm name=vm.cpuMode value=host-model
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;支持三种模式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;none: CPU型号为QEMU模拟器&lt;/li&gt;
&lt;li&gt;host-model：CPU类型为物理机CPU类型&lt;/li&gt;
&lt;li&gt;host-passthrough：CPU型号跟物理机CPU完全一样&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;当模式为&lt;code&gt;host-model&lt;/code&gt;和&lt;code&gt;host-passthrough&lt;/code&gt;时，虚拟机可以获得嵌套虚拟化功能。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;使用该功能可能会影响虚拟机热迁移。因为热迁移时会检查虚拟机CPU型号，如果两台物理机的CPU型号不同，会导致虚拟机热迁移失败。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;10. 安装&lt;/h2&gt;

&lt;p&gt;你可以通过下面方式安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://7xi3lj.com1.z0.glb.clouddn.com/releases%2F1.0%2F1.0.0%2Fzstack-installer-1.0-rc4.bin -O zstack-installer-1.0-rc4.bin
    bash zstack-installer-1.0-rc4.bin -R aliyun
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;这里&lt;code&gt;-R aliyun&lt;/code&gt;参数指定使用阿里云的源进行安装，你也可以使用&lt;code&gt;-R 163&lt;/code&gt;使用网易的源。我们推荐使用阿里云的源&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;11. 升级&lt;/h2&gt;

&lt;p&gt;一如既往的，我们支持一键无缝升级：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget http://7xi3lj.com1.z0.glb.clouddn.com/releases%2F1.0%2F1.0.0%2Fzstack-installer-1.0-rc4.bin -O zstack-installer-1.0-rc4.bin
    bash zstack-installer-1.0-rc4.bin -u
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;&lt;p&gt;如果你安装了多个管理节点，请等待最终GA版本的升级步骤。这里的升级步骤只适合all-in-one安装的ZStack。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;12. 用Flat Network Provider替换Virtual Router Provider&lt;/h2&gt;

&lt;p&gt;如果你的网络模式是扁平网络，并且使用的是Virtual Rotuer Provider作为网络提供商，你可以使用1.0的Flat Network Provider替换它，这样你就不再需要virtual router VM来充当DHCP服务器了。假定你要替换网络提供商的L3网络的UUID是1a82c2691978476fa6cefa36bb9d4bfd，参考以下步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获得当前L3网络的网络提供商UUID&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceL3NetworkRef l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd
 {
     &quot;inventories&quot;: [
         {
             &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
             &quot;networkServiceType&quot;: &quot;DNS&quot;
         },
         {
             &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;networkServiceProviderUuid&quot;: &quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;,
             &quot;networkServiceType&quot;: &quot;DHCP&quot;
         }
     ],
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从L3网络上卸载Virtual Router Provider&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;DetachNetworkServiceFromL3Network  l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;5d21ea0f39c04d6fb68cfaf5a37db4ad&quot;:[&quot;DHCP&quot;,&quot;DNS&quot;]}&#39;
 {
     &quot;inventory&quot;: {
         &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;dns&quot;: [
             &quot;8.8.8.8&quot;
         ],
         &quot;ipRanges&quot;: [
             {
                 &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                 &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;name&quot;: &quot;ipr-dk7p&quot;,
                 &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                 &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                 &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
             }
         ],
         &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;name&quot;: &quot;l3-etpz&quot;,
         &quot;networkServices&quot;: [],
         &quot;state&quot;: &quot;Enabled&quot;,
         &quot;system&quot;: false,
         &quot;type&quot;: &quot;L3BasicNetwork&quot;,
         &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
         &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
     },
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;注意这里的参数networkServices是一个map， key是第一步里返回的networkServiceProviderUuid，value是第一步里返回的networkServiceType&lt;/p&gt;&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获得Flat Network Provider的UUID&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryNetworkServiceProvider type=Flat
 {
     &quot;inventories&quot;: [
         {
             &quot;attachedL2NetworkUuids&quot;: [
                 &quot;9ec8cad681d1424fa7eda2447edae142&quot;
             ],
             &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
             &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
             &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
             &quot;networkServiceTypes&quot;: [
                 &quot;DHCP&quot;,
                 &quot;Userdata&quot;
             ],
             &quot;type&quot;: &quot;Flat&quot;,
             &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
         }
     ],
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获得承载L3网络的L2网络的UUID&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryL3Network fields=l2NetworkUuid, uuid=1a82c2691978476fa6cefa36bb9d4bfd
 {
     &quot;inventories&quot;: [
         {
             &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;
         }
     ],
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加载Flat Network Provider到L2网络&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceProviderToL2Network l2NetworkUuid=9ec8cad681d1424fa7eda2447edae142 networkServiceProviderUuid=17864f985e584a9ba4cd81de215212ce
 {
     &quot;inventory&quot;: {
         &quot;attachedL2NetworkUuids&quot;: [
             &quot;9ec8cad681d1424fa7eda2447edae142&quot;
         ],
         &quot;createDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
         &quot;description&quot;: &quot;Flat Network Service Provider&quot;,
         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 11:56:32 AM&quot;,
         &quot;name&quot;: &quot;Flat Network Service Provider&quot;,
         &quot;networkServiceTypes&quot;: [
             &quot;DHCP&quot;,
             &quot;Userdata&quot;
         ],
         &quot;type&quot;: &quot;Flat&quot;,
         &quot;uuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;
     },
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加载Flat Network Provider的服务到三层网络&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;AttachNetworkServiceToL3Network l3NetworkUuid=1a82c2691978476fa6cefa36bb9d4bfd networkServices=&#39;{&quot;17864f985e584a9ba4cd81de215212ce&quot;:[&quot;DHCP&quot;,&quot;Userdata&quot;]}&#39;
 {
     &quot;inventory&quot;: {
         &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;dns&quot;: [
             &quot;8.8.8.8&quot;
         ],
         &quot;ipRanges&quot;: [
             {
                 &quot;createDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;endIp&quot;: &quot;192.168.201.199&quot;,
                 &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:04 PM&quot;,
                 &quot;name&quot;: &quot;ipr-dk7p&quot;,
                 &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                 &quot;startIp&quot;: &quot;192.168.201.180&quot;,
                 &quot;uuid&quot;: &quot;ec5fd87dd80243fdabeeace847c04427&quot;
             }
         ],
         &quot;l2NetworkUuid&quot;: &quot;9ec8cad681d1424fa7eda2447edae142&quot;,
         &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:01:03 PM&quot;,
         &quot;name&quot;: &quot;l3-etpz&quot;,
         &quot;networkServices&quot;: [
             {
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                 &quot;networkServiceType&quot;: &quot;DHCP&quot;
             },
             {
                 &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                 &quot;networkServiceProviderUuid&quot;: &quot;17864f985e584a9ba4cd81de215212ce&quot;,
                 &quot;networkServiceType&quot;: &quot;Userdata&quot;
             }
         ],
         &quot;state&quot;: &quot;Enabled&quot;,
         &quot;system&quot;: false,
         &quot;type&quot;: &quot;L3BasicNetwork&quot;,
         &quot;uuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
         &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
     },
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除virtualrouter ,删除virtual router offering&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryVirtualRouterVm
 {
     &quot;inventories&quot;: [
         {
             &quot;allVolumes&quot;: [
                 {
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;description&quot;: &quot;Root volume for VM[uuid:c5a966cb87d644649952daf683f89e26]&quot;,
                     &quot;deviceId&quot;: 0,
                     &quot;format&quot;: &quot;qcow2&quot;,
                     &quot;installPath&quot;: &quot;/zstack_ps/rootVolumes/acct-36c27e8ff05c4780bf6d2fa65700f22e/vol-8eeaa9cb4c1045a2825f8815fed69d72/8eeaa9cb4c1045a2825f8815fed69d72.qcow2&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:59 PM&quot;,
                     &quot;name&quot;: &quot;ROOT-for-virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;primaryStorageUuid&quot;: &quot;4bff4e2d266f480ead596752d14ff3b5&quot;,
                     &quot;rootImageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
                     &quot;size&quot;: 467206656,
                     &quot;state&quot;: &quot;Enabled&quot;,
                     &quot;status&quot;: &quot;Ready&quot;,
                     &quot;type&quot;: &quot;Root&quot;,
                     &quot;uuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
                     &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                 }
             ],
             &quot;allocatorStrategy&quot;: &quot;LeastVmPreferredHostAllocatorStrategy&quot;,
             &quot;applianceVmType&quot;: &quot;VirtualRouter&quot;,
             &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
             &quot;cpuNum&quot;: 1,
             &quot;cpuSpeed&quot;: 2,
             &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
             &quot;defaultRouteL3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;hostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
             &quot;hypervisorType&quot;: &quot;KVM&quot;,
             &quot;imageUuid&quot;: &quot;7bed05aa8ace4e5e8d6c55b284b66fb5&quot;,
             &quot;instanceOfferingUuid&quot;: &quot;9cec7bd6324445a184351ffb7d32f970&quot;,
             &quot;lastHostUuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:07:20 PM&quot;,
             &quot;managementNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;memorySize&quot;: 536870912,
             &quot;name&quot;: &quot;virtualRouter.l3.1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;platform&quot;: &quot;Linux&quot;,
             &quot;publicNetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
             &quot;rootVolumeUuid&quot;: &quot;8eeaa9cb4c1045a2825f8815fed69d72&quot;,
             &quot;state&quot;: &quot;Running&quot;,
             &quot;status&quot;: &quot;Connected&quot;,
             &quot;type&quot;: &quot;ApplianceVm&quot;,
             &quot;uuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;,
             &quot;vmNics&quot;: [
                 {
                     &quot;createDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;deviceId&quot;: 0,
                     &quot;gateway&quot;: &quot;192.168.200.1&quot;,
                     &quot;ip&quot;: &quot;192.168.201.195&quot;,
                     &quot;l3NetworkUuid&quot;: &quot;1a82c2691978476fa6cefa36bb9d4bfd&quot;,
                     &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:06:50 PM&quot;,
                     &quot;mac&quot;: &quot;fa:4c:01:68:77:00&quot;,
                     &quot;metaData&quot;: &quot;7&quot;,
                     &quot;netmask&quot;: &quot;255.255.252.0&quot;,
                     &quot;uuid&quot;: &quot;c44e856aa88a42bc85ec30ce8c334c6c&quot;,
                     &quot;vmInstanceUuid&quot;: &quot;c5a966cb87d644649952daf683f89e26&quot;
                 }
             ],
             &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
         }
     ],
     &quot;success&quot;: true
 }

 &amp;gt;&amp;gt;&amp;gt;DestroyVmInstance uuid=c5a966cb87d644649952daf683f89e26
 {
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重连所有有VM运行的host&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt;QueryHost
 {
     &quot;inventories&quot;: [
         {
             &quot;availableCpuCapacity&quot;: 7180,
             &quot;availableMemoryCapacity&quot;: 1997570048,
             &quot;clusterUuid&quot;: &quot;4282fb61aa55458ea160de138e130298&quot;,
             &quot;createDate&quot;: &quot;Jan 30, 2016 2:51:13 PM&quot;,
             &quot;hypervisorType&quot;: &quot;KVM&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:20 PM&quot;,
             &quot;managementIp&quot;: &quot;192.168.200.187&quot;,
             &quot;name&quot;: &quot;host1&quot;,
             &quot;state&quot;: &quot;Enabled&quot;,
             &quot;status&quot;: &quot;Connected&quot;,
             &quot;totalCpuCapacity&quot;: 7182,
             &quot;totalMemoryCapacity&quot;: 2098233344,
             &quot;username&quot;: &quot;root&quot;,
             &quot;uuid&quot;: &quot;402f8304a50c410486e023512492316b&quot;,
             &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
         },
         {
             &quot;availableCpuCapacity&quot;: 14363,
             &quot;availableMemoryCapacity&quot;: 8321593344,
             &quot;clusterUuid&quot;: &quot;10409d3e33b249c19746022930a541c7&quot;,
             &quot;createDate&quot;: &quot;Jan 30, 2016 3:03:14 PM&quot;,
             &quot;hypervisorType&quot;: &quot;KVM&quot;,
             &quot;lastOpDate&quot;: &quot;Jan 30, 2016 3:03:52 PM&quot;,
             &quot;managementIp&quot;: &quot;192.168.200.150&quot;,
             &quot;name&quot;: &quot;host2&quot;,
             &quot;state&quot;: &quot;Enabled&quot;,
             &quot;status&quot;: &quot;Connected&quot;,
             &quot;totalCpuCapacity&quot;: 14364,
             &quot;totalMemoryCapacity&quot;: 8371924992,
             &quot;username&quot;: &quot;root&quot;,
             &quot;uuid&quot;: &quot;415fa093b34e4a3d873368104b127115&quot;,
             &quot;zoneUuid&quot;: &quot;4a3a78b1b9f049948b79cf9e667f0af2&quot;
         }
     ],
     &quot;success&quot;: true
 }

 &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=402f8304a50c410486e023512492316b
 {
     &quot;success&quot;: true
 }

 &amp;gt;&amp;gt;&amp;gt;ReconnectHost uuid=415fa093b34e4a3d873368104b127115
 {
     &quot;success&quot;: true
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 25 Jan 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/v1.0-rc1.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/v1.0-rc1.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
      <item>
        <title>给ZStack添加SPice协议的支持（一）</title>
        <description>&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;读研时方向选定云计算虚拟化，之前一直在摸索学习各种IaaS软件，因老板项目需要找一款合适的开源软件做私有云，无奈实力所限OpenStack这样重量级的实在玩不动。在CloudStack群里有大牛推荐用ZStack简单好用，遂依照 http://ZStack.org/cn/installation/上的一键安装来安装 ZStack, 我这样的小白用all in one和扁平网络的方式，一个小时居然能跑起了VM，兴奋不已。&lt;/p&gt;

&lt;p&gt;后来老板要做VDI，了解相关信息之后发现可用的开源协议只有SPICE了，于是很自然的将Zstack和SPCIE结合起来。有朋友可能会问zs自身的conslo就有VNC啊，也可以接虚拟机图像。但是VNC主要用于linux的服务器的管理，由于无声音和usb传输，不满足于虚拟桌面的使用。而SPICE几乎全面超过VNC，尤其在图像质量和重定向这两部分，几乎是开源的不二选择。&lt;/p&gt;

&lt;h1&gt;实践操作&lt;/h1&gt;

&lt;p&gt;桌面虚拟化与服务器虚拟化的本质区别就是在协议优化，当然这里只讲怎么连上去。Zstack本身拥有VNC协议的Console，SPICE-client连接到VM的方式与VNC相同——都是通过套接字识别VM。在询问群主意见后，决定加一个开关ConsoleMode让其能在SPICE和VNC间自由切换。那么问题来了，具体怎么做呢？&lt;/p&gt;

&lt;p&gt;正好看到ZStack开发分享http://zstack.org/cn_blog/add-qemu-mode-to-zstack.html，作为一只小白，照葫芦画瓢的事情当然最好不过了。思路立马清晰了：1. 新增一个全局的变量叫 ConsoleMode（Java编写） 2. 将此新的全局变量传给 ZStack-utility 里的 agent (Python 编写的) 3. 在 Python编写的 agent 里, 依照此全局变量的值做出对应的设置（哈哈，写到这里我自己都笑了）。&lt;/p&gt;

&lt;h2&gt;步骤一&lt;/h2&gt;

&lt;p&gt;首先修改 ZStack 的部分, 在 conf/globalConfig/kvm.xml新增一个element
&lt;img src=&quot;/images/blogs/spice/1.jpg&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;config&amp;gt;
     &amp;lt;category&amp;gt;kvm&amp;lt;/category&amp;gt;
     &amp;lt;name&amp;gt;consoleMode&amp;lt;/name&amp;gt;
   &amp;lt;description&amp;gt;You can choose a transport protocol for consolemode,when set to spice, enable the spice protocol connection virtual machine.options:[vnc,spice]&amp;lt;/description&amp;gt;
     &amp;lt;type&amp;gt;java.lang.String&amp;lt;/type&amp;gt;
     &amp;lt;defaultValue&amp;gt;vnc&amp;lt;/defaultValue&amp;gt;
&amp;lt;/config&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 plugin/kvm/src/main/java/org/zstack/kvm/KVMGlobalConfig.java 新增全局的变量
&lt;img src=&quot;/images/blogs/spice/2.jpg&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@GlobalConfigValidation(validValues = {&quot;vnc&quot;,&quot;spice&quot;})
public static GlobalConfig VM_CONSOLE_MODE = new GlobalConfi(CATEGORY, &quot;consoleMode&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; 到此基本上已经在 Web UI 的 Global Configure 新增一个配置 ConsoleMode (见下图)，等到我们修改完成后，将该值从vnc修改为spice即可（默认为vnc）。注意：如果已经running的VM需要重启，才会生效。
&lt;img src=&quot;/images/blogs/spice/3.jpg&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;h2&gt;步骤二&lt;/h2&gt;

&lt;p&gt;修改 ZStack 的部分, 在plugin/kvm/src/main/java/org/zstack/kvm/KVMAgentCommands.java 中 public static class StartVmCmd 中新增私有的变量及公有的方法
&lt;img src=&quot;/images/blogs/spice/4.jpg&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private String consoleMode;

public String getConsoleMode() {
         return consoleMode;
     }
     public void setConsoleMode(String consoleMode) {
         this.consoleMode = consoleMode;
     }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接著修改 plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java 在 startVm 方法里透过 VolumeTO 类新增的方法将新增的 Global Config 配置传给 zstack-utility agent
&lt;img src=&quot;/images/blogs/spice/6.jpg&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;h2&gt;步骤三&lt;/h2&gt;

&lt;p&gt;最后我们还要修改 zstack-utility agent在收到我们新增的全局配置后做出对应的修改 kvmagent/kvmagent/plugins/vm_plugin.py
&lt;img src=&quot;/images/blogs/spice/5.jpg&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def get_console_port(self)
if (g.type_ ==&#39;vnc&#39;)or(g.type_==&#39;spice&#39;):

def make_console():
if cmd.consoleMode == &#39;spice&#39;:
            make_spice()
        else:
            make_vnc()

def make_spice():
        devices = elements[&#39;devices&#39;]
        spice = e(devices, &#39;graphics&#39;, None, {&#39;type&#39;:&#39;spice&#39;, &#39;port&#39;:&#39;5900&#39;, &#39;autoport&#39;:&#39;yes&#39;})
        e(spice, &quot;listen&quot;, None, {&#39;type&#39;:&#39;address&#39;, &#39;address&#39;:&#39;0.0.0.0&#39;})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;步骤四&lt;/h2&gt;

&lt;p&gt;依照官方说明的方法来编译ZStack All In One 安装包http://zstack.org/cn_blog/build-zstack.html&lt;/p&gt;

&lt;h1&gt;总结&lt;/h1&gt;

&lt;p&gt;限于本人能力所限，只是加了个切换协议开关，如果想在web上直接显示SPICE链接的远程桌面，还需要添加web-spice-client的代码。所以想体验的同学暂时还需要使用官方的virt-viewer软件才能连接哦，附效果图一张~最后严重感谢惯C哥的帮助^_^
&lt;img src=&quot;/images/blogs/spice/7.jpg&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Jan 2016 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/create_spice_for_console.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/create_spice_for_console.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
      <item>
        <title>给不同L3网络设置不同的 VirtualRouter Offering</title>
        <description>&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;当用户的网络环境中有多套公有L3网络并且使用了 VirtualRouter(VR) 的网络服务的时候，就需要给创建虚拟机的L3网络配置不同的VR Offering。&lt;/p&gt;

&lt;p&gt;由于每个VR Offering会设置特定的管理网络L3和公有网络L3，所以不同公有网络的L3网络应该配备不同的VR Offering，
否则会导致使用其中某个L3网络的虚拟机无法获得正常的网络连接能力。&lt;/p&gt;

&lt;h2&gt;网络场景描述&lt;/h2&gt;

&lt;p&gt;让我们先来看三种网络场景。第一张图描述了在一个典型的EIP网络模型下，有两个用户的私有网络，整个环境共用了相同的管理网络和公有网络。
在这个场景中，不同的用户网络进行了隔离。用户网络内的虚拟机通讯只发生在私有网络上。当需要访问外网环境时，
VM会通过不同的VR连接相同的公有网络。在这里，我们只需要设置一个默认的VR Offering即可，因为两个VR都是使用相同的公有网络。也就是说VR的配置相同。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/vroffering/zstack_1_pub_l3-2_pri_l3.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;有时候，由于一些特殊的原因（例如需要分摊流量、需要设置不同的公网出口等），我们会配置类似于第二张图的场景。
这个场景和第一张图唯一的不同是在于，两个私有网络访问公网的时候并不是通过相同的共有网络。
这个时候我们就需要给两个私有网络（private l3）配置不同的VR Offering。让其中一个VR走 Public L3-1 访问公网，
而另外一个走 Public L3-2 访问公网。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/vroffering/zstack_2_pub_l3_2_pri_l3.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;在扁平网络（Flat Network）模式中，我们更可能遇到多个公有网络的场景。每个公有网络有独立的网关。
例如下图所示，两个VR只负责给各自的L3网络做DHCP和DNS服务，
虚拟机VM1和VM3分别通过不同的公有网络进行网络通讯。这个时候我们也需要给两个公有网络（public l3）配置不同的 VR Offering。
VM会根据所在的不同的L3网络连接公有网络。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/vroffering/zstack_2_pub_l3.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;h2&gt;给不同的L3网络设置不同的VR Offering&lt;/h2&gt;

&lt;p&gt;首先我们要根据公有网络的数量创建相同数量VR Offering，我们可以把最常用L3的VR Offering设置成默认的。&lt;/p&gt;

&lt;p&gt;接着我们就可以给不同L3网络配置不同VR Offering。具体的方法是通过设置系统标签（System Tag）的方式来完成的。
设置系统标签的zstack-cli命令是：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CreateSystemTag resourceType=InstanceOfferingVO resourceUuid=YOUR_VR_OFFERING_UUID tag=guestL3Network::YOUR_L3_NETWORK_UUID&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这里的YOUR_VR_OFFERING_UUID需要替换成目标VR Offering的UUID
YOUR_L3_NETWORK_UUID替换为用于创建VM的L3网络的UUID。EIP模式下（图二），该网络是Private L3。
扁平模式下（图三），该网络是Public L3的UUID。千万留意该L3 网络UUID不可以指定错误。&lt;/p&gt;

&lt;p&gt;如果还不熟悉zstack-cli命令，可以参考ZStack的用户教程里各种&lt;a href=&quot;http://zstack.org/cn/tutorials/flat-network-cli.html&quot;&gt;命令行版本&lt;/a&gt;的操作方法。&lt;/p&gt;

&lt;p&gt;设置完后，ZStack就可以正确识别不同L3网络的VR Offering，并为不同VM使用不同的网络服务。&lt;/p&gt;

&lt;p&gt;更多关于网络服务和VR的信息可以参考：&lt;a href=&quot;http://zstackdoc.readthedocs.org/en/latest/userManual/virtualRouter.html&quot;&gt;ZStack API文档&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/assign_vr_offering_for_different_l3.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/assign_vr_offering_for_different_l3.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
      <item>
        <title>ZStack开发分享－－给Qemu增加Cache Mode</title>
        <description>&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;笔者一直以来都持续关心着各种云相关的软件发展的情形和趋势, 但始终没有真正的去折腾它。
直到今年五月份在 Ceph 群组里听到了一个名为 ZStack的 IaaS 开源软件, 于是在自己的好奇心驱使下加入了 ZStack中国社区QQ群组。
在群里潜水了几个月后发现安装似乎很容易, 所以开始试著依照
http://ZStack.org/cn/installation/ 上的一键安装来安装 ZStack, 果然是非常容易安装&lt;/p&gt;

&lt;p&gt;接着按照&lt;a href=&quot;http://ZStack.org/cn/tutorials/flat-network-ui.html&quot;&gt;扁平网络的教程&lt;/a&gt;, 正准备继续折腾，却发生VM 无法启动的问题, 顿时觉得有点小失望。&lt;/p&gt;

&lt;p&gt;详细的错误讯息请见
https://github.com/ZStackorg/ZStack/issues/146&lt;/p&gt;

&lt;p&gt;后来通过Google搜索发现原来是 Qemu 的 Cache Option 和文件系统兼容性所引起的问题。
这个问题的起源是因为我的机器里用的文件系统是ZFS (操作系统是 Ubuntu 14.04), 但是ZFS 不支持 O_DIRECT 所造成的。
因为 ZStack 0.9中在创建 VM 时都是使用 &#39;cache=none&#39;, 但是在 ZFS 作为 VM 主存储时 cache 必须为 writethrough 或者 writeback 才行。
去群里向原开发者请教之后发现可以通过在 GlobalConfig中增加一个配置来实现Qemu cache 模式的切换，来解决这个问题。
看起来这个方法实现起来也不会太困难, 于是开始着手解决这个问题。&lt;/p&gt;

&lt;h2&gt;实际动手&lt;/h2&gt;

&lt;p&gt;先参考一些官方的文件来了解 ZStack 源代码
(以下些许内容取自 ZStack 官网 http://ZStack.org/cn )
目前ZStack的源代码由三个软件仓库构成：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ZStack使用Java编写，是ZStack的核心，负责IaaS各种资源管理调度和消息通讯；&lt;/li&gt;
&lt;li&gt;ZStack-utility目前主要使用Python编写，包含ZStack的各种终端代理和其他工具。 这些终端代理负责接收来自ZStack核心的消息并执行对应的操作，例如和Libvirt通讯来管理VM的生命周期、各种存储（例如Ceph，iSCSI，SFTP）的管理、 虚拟路由器里管理VM的IP地址等等。除了终端代理工具外，这个软件仓库还包含了ZStack其他的工具，例如ZStack的编辑打包工具、 ZStack安装程序、ZStack命令行工具、ZStack管控工具等等。&lt;/li&gt;
&lt;li&gt;ZStack-dashboard使用JavaScript编写，是ZStack的图形界面。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;(为免篇幅太长, 关于怎么从 Github 取出源码的部分在此省略了)&lt;/p&gt;

&lt;p&gt;基本上修改的思路为三个步骤：
 1. 新增一个全局的变量叫 CacheMode （Java编写）
 2. 将此新的全局变量传给 ZStack-utility 里的 agent (Python 编写的)
 3. 在 Python编写的 agent 里, 依照此全局变量的值做出对应的设置&lt;/p&gt;

&lt;h3&gt;步骤一&lt;/h3&gt;

&lt;p&gt;首先修改 ZStack 的部分,
在 conf/globalConfig/kvm.xml新增一个element&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/cache_mode/1.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;在 plugin/kvm/src/main/java/org/ZStack/kvm/KVMGlobalConfig.java 新增全局的变量&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/cache_mode/2.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;到此基本上已经在 Web UI 的 Global Configure 新增一个配置 vm.CacheMode (见下图)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/cache_mode/3.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;h3&gt;步骤二&lt;/h3&gt;

&lt;p&gt;修改 ZStack 的部分,
在plugin/kvm/src/main/java/org/ZStack/kvm/KVMAgentCommands.java 中
public static class VolumeTO 中新增私有的变量及公有的方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/cache_mode/4.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;接著修改 plugin/kvm/src/main/java/org/ZStack/kvm/KVMHost.java
在 startVm 方法里透过 VolumeTO 类新增的方法将新增的 Global Config 配置传给 ZStack-utility agent&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/cache_mode/5.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;到这边 ZStack 部分算是修改完成&lt;/p&gt;

&lt;h3&gt;依照官方说明的方法来编译ZStack Java 源码&lt;/h3&gt;

&lt;p&gt;http://ZStack.org/cn_blog/build-ZStack.html&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd ZStack&lt;/code&gt;
&lt;code&gt;mvn -DskipTests clean install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/cache_mode/6.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;如果过程顺利应该会看到如下的输出&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/cache_mode/7.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;h3&gt;步骤三&lt;/h3&gt;

&lt;p&gt;最后我们还要修改 ZStack-utility agent在收到我们新增的全局配置后做出对应的修改
kvmagent/kvmagent/plugins/vm_plugin.py&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/cache_mode/8.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/cache_mode/9.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;h3&gt;步骤四&lt;/h3&gt;

&lt;p&gt;依照官方说明的方法来编译ZStack All In One 安装包
http://ZStack.org/cn_blog/build-ZStack.html&lt;/p&gt;

&lt;h3&gt;编译ZStack All In One安装包&lt;/h3&gt;

&lt;p&gt;如果ZStack的Java源码已经编译通过，我们就可以开始尝试编译ZStack All In One安装包了：
&lt;code&gt;cd ~/ZStack-repos/&lt;/code&gt;
&lt;code&gt;wget -c http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.35/bin/apache-tomcat-7.0.35.zip&lt;/code&gt;
&lt;code&gt;cd ZStack-utility/ZStackbuild&lt;/code&gt;
&lt;code&gt;ant -DZStack_build_root=/root/ZStack-repos all-in-one&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;因为default git 都会去 checkout master 分支来编译  ZStack All In One包,下面是我使用的方式&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ant    -DZStack.build_version=0.9fix
-DZStackutility.build_version=0.9fix
-DZStackdashboard.build_version=0.9
-Dbuild_name=qa
-DZStack_build_root=/home/matt/ZStack-github all-in-one&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(关于 –D 相关的选项, 可以看 ZStack-utility/ZStackbuild/build.properties)
如果过程顺利应该会看到如下的输出&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blogs/cache_mode/10.png&quot; class=&quot;center-img img-responsive&quot;&gt;&lt;/p&gt;

&lt;h3&gt;后话&lt;/h3&gt;

&lt;p&gt;对于新增全局配置的修改大致上就是这样, 唯一要特别注意的地方是, 修改 ZStack Java代码的部分, 关于新增全局配置的变量和方法该摆放在哪一个类, 为了以后代码的维护以及可读性, 最好还是可以跟原始开发者讨论讨论, 本范例会修改在 VolumeTO 类 里, 不代表著所有新增的全局配置都需要修改在那边（意思是有经过些许判断的）, 主要还是得依照新增的配置去找出比较相关的类去修改会比较适当, 以上为个人一点小小的心得。&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://zstack.org/cn_blog/add-qemu-mode-to-zstack.html</link>
        <guid isPermaLink="true">http://zstack.org/cn_blog/add-qemu-mode-to-zstack.html</guid>
        
        
        <category>cn_blog</category>
        
      </item>
    
  </channel>
</rss>
